<?xml version="1.0"?>
<rss version="2.0">
  <channel>
    <title>UZABASE Tech Blog</title>
    <link>http://tech.uzabase.com/</link>
    <description>株式会社ユーザベースの技術チームブログです。 主に週次の持ち回りLTやセミナー・イベント情報について書きます。</description>
    <lastBuildDate>Wed, 11 Oct 2017 13:03:52 +0900</lastBuildDate>
    <docs>http://blogs.law.harvard.edu/tech/rss</docs>
    <generator>Hatena::Blog</generator>
    
      
      
        <item>
          <title>Chrome hackingと称しブラウザのレイアウトバグをみんなで調べてみました</title>
          <link>http://tech.uzabase.com/entry/2017/10/11/130352</link>          <description>&lt;p&gt;はじめまして。プロダクト開発チームの&lt;a href=&quot;https://github.com/ryoqun&quot;&gt;小野寺 (ryoqun)&lt;/a&gt;です。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://google.com/chrome/browser/&quot;&gt;Google Chrome (以下、Chrome)&lt;/a&gt;にて、HTMLのレンダリングの回帰バグが紛れ込み、その影響で&lt;a href=&quot;https://jp.ub-speeda.com/&quot;&gt;SPEEDA&lt;/a&gt;の一部分のレイアウトが崩れてしまう問題が発生しました。そこで、「Chrome hacking」と称し、数名の希望者を社内で募り、みんなでこのバグを調査、あわよくば解決しChromeのコミットログに&lt;code&gt;@uzabase.com&lt;/code&gt;のドメインを刻もうと奮い立ちました。&lt;/p&gt;

&lt;p&gt;しかし結論として、別の案件が入り、作業を中断している間に先を越され、名を刻むことはできませんでした。つまりは現在このバグは別の開発者によって修正が完了しています。しかし、結果的にはOSSのソースコードレベルでの調査の実例としては非常に好例となりました。&lt;/p&gt;

&lt;p&gt;その活動記録として、SPEEDA上での問題の発覚からChromeのバグであるという原因の特定や調査から収束に至るまでの一連の出来事を共有したいと思います。&lt;/p&gt;

&lt;h2&gt;前提として、&lt;b&gt;本当に&lt;/b&gt;Chromeのレイアウトバグでした&lt;/h2&gt;

&lt;p&gt;最初はChromeのバグだと断言できませんでした。&lt;/p&gt;

&lt;p&gt;そのため、本当にChromeがCSS 2.1のレイアウト回帰バグを混入させてしまったことが原因だと分かった時は驚きでした。&lt;/p&gt;

&lt;p&gt;当然として、SPEEDAでのレイアウトバグの発覚直後は、SPEEDAのCSSの問題だと考えていました。
というのもCSSは呆れるくらいに枯れたバグの入る余地のないWebの基礎技術だからです。&lt;/p&gt;

&lt;p&gt;CSS 2.1として2011年6月に&lt;a href=&quot;https://en.wikipedia.org/w/index.php?title=Cascading_Style_Sheets&amp;amp;oldid=797497810#cite_note-w3.org-40&quot;&gt;W3C Recommendationとなり&lt;/a&gt;、それから5年以上が経過しています。それまでの歩みは決して容易いものではなかったため、CSSは鉄壁の仕様となっています(1990年代の血みどろのブラウザ競争の中で産み落とされたCSS 1.0がのたうちまわり、当時のWebエンジニアたちをInteroperatabilityの名の下苦悩させ、戦禍の反省とでもいうかのごとく「複数レンダリングエンジン上で実装済み」という大義名分の元、W3CによってひねりだされたCSS 2.0が2000年代を通し、これでもかというくらいに精緻に策定され、晴れてCSS 2.1は生み出されました)。&lt;/p&gt;

&lt;p&gt;培われた仕様の厳密性、テストケースの網羅性はもはや芸術レベルで、1つの仕様に対しての手厚さとしては数有る仕様の中でもトップクラスにCSSは位置すると思います(特に個人的には&lt;a href=&quot;https://www.w3.org/TR/CSS22/visuren.html&quot;&gt;9 Visual formatting model&lt;/a&gt;や&lt;a href=&quot;https://www.w3.org/TR/CSS22/visudet.html&quot;&gt;10 Visual formatting model details&lt;/a&gt;あたりは傑作だと思います)。&lt;/p&gt;

&lt;p&gt;ということで、2017年の今日において、枯れたCSSに対し、&lt;a href=&quot;https://en.wikipedia.org/wiki/Internet_Explorer_6&quot;&gt;IE 6&lt;/a&gt;やガラケーと戯れて涙を飲みながらレイアウトバグの回避を模索していた苦悩の2000年代を彷彿とさせる事象に再び直面し、非常に印象的でした。
&lt;b&gt;どんなに枯れていようが常にソフトウェアにはバグがつきものであり、バグに直面した時、時には自分たちのコードだけでなくミドルウェアも疑う必要性を痛感しました。&lt;/b&gt;
また、CSSを正しく実装することがいかに難しいことであるかの証左なのかもしれません。&lt;/p&gt;

&lt;h2&gt;バグの発覚と内容&lt;/h2&gt;

&lt;p&gt;今回のバグは、SPEEDAの本番環境にて、&lt;a href=&quot;https://chromereleases.googleblog.com/2017/06/stable-channel-update-for-desktop.html&quot;&gt;デスクトップ向けのChromeのStableチャンネルに59が出始めてから&lt;/a&gt;ようやく気づきました。&lt;/p&gt;

&lt;p&gt;バグの内容は、サイト検索フォームの下に表示されるサジェスト候補の一覧が異様に高くなってしまうというものでした。SPEEDAは一般公開されているサービスではないので見せられるスクリーンショットがかなり限定的でわかりにくいのですが、正しいレンダリング時の画像はこのようになります：&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/r/ryoqun/20170901/20170901011237.png&quot; alt=&quot;f:id:ryoqun:20170901011237p:plain&quot; title=&quot;f:id:ryoqun:20170901011237p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;逆に、正しくないレンダリング時の画像は、このようにかなり縦長な感じになってしまいます：&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/r/ryoqun/20170901/20170901011251.png&quot; alt=&quot;f:id:ryoqun:20170901011251p:plain&quot; title=&quot;f:id:ryoqun:20170901011251p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;これだけだとイメージがつきにくいのですが、サジェスト候補が画面表示領域に対してかなりの占有率になってしまい、ユーザーにも違和感を与えるレベルになってしまいました。&lt;/p&gt;

&lt;h2&gt;とりあえず応急処置&lt;/h2&gt;

&lt;p&gt;他のブラウザや以前のバージョンのChromeでは問題が起きなかったことから、どう考えてもChromeのバグらしいというのが判明してきました。そうなってくるとChromeはすぐには修正されないのでまずは応急処置です。
レンダリングエンジンがどう動いているかを想像しつつ、クロスブラウザで無害で等価なCSSを色々と試行錯誤した結果、結局は以下の変更だけで直ってしまいました。&lt;/p&gt;

&lt;pre class=&quot;code lang-diff&quot; data-lang=&quot;diff&quot; data-unlink&gt; .g-search-suggest li .suggestItem {
&lt;span class=&quot;synSpecial&quot;&gt;-  display: block;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;+  display: inline-block;&lt;/span&gt;
   padding-left: 90px;
   color: #555;
&lt;/pre&gt;


&lt;p&gt;CSS的にはほとんど等価なはずなので、やはりどう考えてもChromeのバグのようでした(ちなみに、こういうレイアウトバグの回避策なんてものは、すっかり失われし技術となってしまいました)。&lt;/p&gt;

&lt;p&gt;この応急処置をSPEEDAに反映し、次にChromeを直そうということになりました。&lt;/p&gt;

&lt;h2&gt;ミニマルテストケースの作成&lt;/h2&gt;

&lt;p&gt;ともかくも最初はミニマルテストケースを作りました。そうすることによって社内に公開しても大丈夫で&lt;a href=&quot;https://bugs.chromium.org/p/chromium/issues/list&quot;&gt;Googleにもバグレポートを送れる&lt;/a&gt;ようになります。
作ったミニマルテストケースは↓の通りです。&lt;/p&gt;

&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;.suggestItemOk1&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synType&quot;&gt;display&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;inline&lt;/span&gt;;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;.suggestItemOk2&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synType&quot;&gt;display&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;inline-block&lt;/span&gt;;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;.suggestItemNg&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synType&quot;&gt;display&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;block&lt;/span&gt;;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;.item&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;synType&quot;&gt;overflow&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;hidden&lt;/span&gt;;
  &lt;span class=&quot;synType&quot;&gt;display&lt;/span&gt;: &lt;span class=&quot;synConstant&quot;&gt;inline-block&lt;/span&gt;;
&lt;span class=&quot;synIdentifier&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;suggestItemOk1&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;item&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;AAA&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;suggestItemOk1&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;item&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;BBB&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;suggestItemOk1&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;item&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;CCC&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;suggestItemOk2&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;item&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;AAA&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;suggestItemOk2&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;item&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;BBB&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;suggestItemOk2&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;item&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;CCC&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;suggestItemNg&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;item&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;AAA&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;suggestItemNg&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;item&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;BBB&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;suggestItemNg&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;item&amp;quot;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;CCC&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;ミニマルテストケースの正しいレンダリング時の画像はこうなります:&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/r/ryoqun/20170901/20170901013353.png&quot; alt=&quot;f:id:ryoqun:20170901013353p:plain&quot; title=&quot;f:id:ryoqun:20170901013353p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;逆に、正しくないレンダリング時の画像はこうなります：&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/r/ryoqun/20170901/20170901013155.png&quot; alt=&quot;f:id:ryoqun:20170901013155p:plain&quot; title=&quot;f:id:ryoqun:20170901013155p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;SPEEDA上でのレイアウトバグとなんとなく似ているのは想像できるかと思います。&lt;/p&gt;

&lt;p&gt;このミニマルテストケースから分かることは、&lt;code&gt;display: list-item&lt;/code&gt;と&lt;code&gt;overflow: hidden&lt;/code&gt;,&lt;code&gt;display: block&lt;/code&gt;が組み合わさるとどうやらまずいということです。その情報を元に&lt;a href=&quot;https://bugs.chromium.org/p/chromium/issues/list?can=2&amp;amp;q=inline+block+overflow+hidden&amp;amp;colspec=ID+Pri+M+Stars+ReleaseBlock+Component+Status+Owner+Summary+OS+Modified&amp;amp;x=m&amp;amp;y=releaseblock&amp;amp;cells=ids&quot;&gt;Chromiumのバグを検索&lt;/a&gt;してみましたが、同様のバグが見当たらなかったため、自分たちで直してみようということになりました(ちなみに、今現在はこのキーワードで検索すると、今回の回帰バグのレポートを見つけることができます)。&lt;/p&gt;

&lt;h2&gt;Chromiumのビルド&lt;/h2&gt;

&lt;p&gt;Chromeは、オープンソースである&lt;a href=&quot;https://www.chromium.org/&quot;&gt;Chromium&lt;/a&gt;から作られています。そこでオープンソースの真価を発揮ということで、&lt;a href=&quot;https://chromium.googlesource.com/chromium/src/+/master/docs/linux_build_instructions.md&quot;&gt;手元のマシンでビルド&lt;/a&gt;してみました。Chromiumは相当な数のサードパーティーライブラリに依存していますが、独自ツール(&lt;code&gt;gyp&lt;/code&gt;)を使って比較的簡単にビルド環境を構築できます。ただストレージ容量は結構必要で、例えば私の場合は50GBは必要でした。&lt;/p&gt;

&lt;p&gt;また、今回は回帰バグなのでChromium 58とChromium 59のどちらも並行させてビルドし、比較調査しやすいようにしました。&lt;/p&gt;

&lt;h2&gt;実際にHackして怪しい箇所を見つける&lt;/h2&gt;

&lt;p&gt;ChromeのDeveloper Toolsから得られる情報だけではレイアウトバグの状況が分からなかったので、ブラウザの真骨頂であるレンダリングの中のレイアウト(Reflow)コードを読む必要があります。大抵の大規模ソフトウェアは開発目的で色々な内部状態をダンプする機能があり、Chromiumも例外ではありません。ですが、今回の参加メンバーはChromeにはそれほど詳しくないため、当初はそのやり方が分からず、ソースコードとWebと変更履歴をつっつきまわり、最終的にはデバッグ情報を出力させることができました。&lt;/p&gt;

&lt;p&gt;具体的には下のように、デバッグ関数をよく通るであろうコードパスから呼び出してみました。&lt;/p&gt;

&lt;pre class=&quot;code lang-diff&quot; data-lang=&quot;diff&quot; data-unlink&gt;&lt;span class=&quot;synType&quot;&gt;diff --git a/third_party/WebKit/Source/core/layout/LayoutListItem.cpp b/third_party/WebKit/Source/core/layout/LayoutListItem.cpp&lt;/span&gt;
index 92af305..946e7c9 100644
&lt;span class=&quot;synType&quot;&gt;--- a/third_party/WebKit/Source/core/layout/LayoutListItem.cpp&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;+++ b/third_party/WebKit/Source/core/layout/LayoutListItem.cpp&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;@@ -466,6 +466,10 @@&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt; void LayoutListItem::PositionListMarker() {&lt;/span&gt;
 
 void LayoutListItem::Paint(const PaintInfo&amp;amp; paint_info,
                            const LayoutPoint&amp;amp; paint_offset) const {
&lt;span class=&quot;synIdentifier&quot;&gt;+  this-&amp;gt;ShowTreeForThis();&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;+  this-&amp;gt;ShowLayoutTreeForThis();&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;+  this-&amp;gt;ShowLineTreeForThis();&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;+  //this-&amp;gt;ShowDebugData();&lt;/span&gt;
   ListItemPainter(*this).Paint(paint_info, paint_offset);
 }
&lt;/pre&gt;


&lt;p&gt;そして、レイアウトバグの有無によって、↓のような違う2つのレイアウトツリーが生成されていることが分かりました。&lt;/p&gt;

&lt;p&gt;&lt;b&gt;正しい&lt;/b&gt;レイアウトツリー:&lt;/p&gt;

&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;LayoutListItem 0x19a65d2243d0   LI
  LayoutListMarker (anonymous) 0x19a65d218df0
  LayoutBlockFlow 0x19a65d218f18        SPAN class=&amp;#34;suggestItemOk2&amp;#34;
    LayoutBlockFlow 0x19a65d219040      SPAN class=&amp;#34;item&amp;#34;
      LayoutText 0x19a65d2415f0 #text &amp;#34;CCC&amp;#34;
LayoutListItem 0x19a65d224290   LI
  LayoutBlockFlow 0x19a65d218828        SPAN class=&amp;#34;suggestItemNg&amp;#34;
    LayoutListMarker (anonymous) 0x19a65d2184b0
    LayoutBlockFlow 0x19a65d218cc8      SPAN class=&amp;#34;item&amp;#34;
      LayoutText 0x19a65d241528 #text &amp;#34;AAA&amp;#34;  &lt;/pre&gt;


&lt;p&gt;&lt;b&gt;正しくない&lt;/b&gt;レイアウトツリー(&lt;code&gt;suggestItemNg&lt;/code&gt;の&lt;code&gt;LayoutListMarker&lt;/code&gt;が外出しされてしまっている):&lt;/p&gt;

&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;LayoutListItem 0x19a65d224650   LI
  LayoutListMarker (anonymous) 0x19a65d219168
  LayoutBlockFlow 0x19a65d219290        SPAN class=&amp;#34;suggestItemOk2&amp;#34;
    LayoutBlockFlow 0x19a65d2193b8      SPAN class=&amp;#34;item&amp;#34;
      LayoutText 0x19a65d240ee8 #text &amp;#34;CCC&amp;#34;
LayoutListItem 0x19a65d224790   LI
  LayoutBlockFlow (anonymous) 0x19a65d218a78
    LayoutListMarker (anonymous) 0x19a65d219608
  LayoutBlockFlow 0x19a65d219e20        SPAN class=&amp;#34;suggestItemNg&amp;#34;
    LayoutBlockFlow 0x19a65d219cf8      SPAN class=&amp;#34;item&amp;#34;
      LayoutText 0x19a65d241910 #text &amp;#34;AAA&amp;#34;
&lt;/pre&gt;


&lt;p&gt;正しくないレイアウトツリー中で、アドレスが&lt;code&gt;0x19a65d218a78&lt;/code&gt;の&lt;code&gt;LayoutBlockFlow&lt;/code&gt;が余計に生成されています。これによって余計な論理的な行が追加され、意図せず高さがおかしくなってしまうというからくりのようでした。&lt;/p&gt;

&lt;p&gt;ここまでくればもう峠を越していて、あとはこの差異をとことん調べ込んでいけばよくなります。&lt;/p&gt;

&lt;p&gt;今まではまったくの五里霧中で、どこにバグがあるのか分からず怪しそうなところをとにかく広く浅く探す必要がありました。胸をなでおろせた瞬間でした。&lt;/p&gt;

&lt;h2&gt;コミットの特定&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;関連の実装が肝になっているようだったので、&lt;code&gt;LayoutListItem&lt;/code&gt;のソースコードを入念に見ました。調べた結果、回帰バグを混入させた&lt;a href=&quot;https://chromium.googlesource.com/chromium/src.git/+/fd1e60f0bee4b6b25d898f4f4f859aa38d1a9643%5E%21/#F2&quot;&gt;コミット&lt;/a&gt;を特定することができ、それを&lt;code&gt;git revert&lt;/code&gt;してビルドし直したらバグが発生しなくなりました！
いろいろな切り口で調べたのですが、結果的には&lt;code&gt;git annotate&lt;/code&gt;が決め手でした。比較的浅い回帰バグには&lt;code&gt;git annotate&lt;/code&gt;は有効です。&lt;/p&gt;

&lt;p&gt;変更内容としては非常に小さいです。ちなみにこの変更を見てみると、もともとはまた別のレイアウトのバグを直そうとしていたようです。&lt;/p&gt;

&lt;pre class=&quot;code lang-diff&quot; data-lang=&quot;diff&quot; data-unlink&gt;&lt;span class=&quot;synType&quot;&gt;diff --git a/third_party/WebKit/Source/core/layout/LayoutListItem.cpp b/third_party/WebKit/Source/core/layout/LayoutListItem.cpp&lt;/span&gt;
index 6c98974..4dbf2a7 100644
&lt;span class=&quot;synType&quot;&gt;--- a/third_party/WebKit/Source/core/layout/LayoutListItem.cpp&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;+++ b/third_party/WebKit/Source/core/layout/LayoutListItem.cpp&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;@@ -257,6 +257,11 @@&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt; static LayoutObject* getParentOfFirstLineBox(LayoutBlockFlow* curr,&lt;/span&gt;
     if (currChild == marker)
       continue;

&lt;span class=&quot;synIdentifier&quot;&gt;+    // Shouldn&#39;t add marker into Overflow box, instead, add marker&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;+    // into listitem&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;+    if (currChild-&amp;gt;hasOverflowClip())&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;+      break;&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;+&lt;/span&gt;
     if (currChild-&amp;gt;isInline() &amp;amp;&amp;amp;
         (!currChild-&amp;gt;isLayoutInline() ||
          curr-&amp;gt;generatesLineBoxesForInlineChild(currChild)))
&lt;/pre&gt;


&lt;h2&gt;いざ修正！(は叶わず…)&lt;/h2&gt;

&lt;p&gt;直そう！と思って一旦保留していたら、先を越され、その間にupstreamで修正されてしまいました。非常に残念です。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://bugs.chromium.org/p/chromium/issues/detail?id=626293&quot;&gt;今回回帰バグを紛れ込ませてしまったChromiumのBTS上のIssue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://bugs.chromium.org/p/chromium/issues/detail?id=747695&quot;&gt;その回帰バグを修正したChromiumのBTS上のIssue&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;修正に必要なコードはたったの一行でした。もともとが2行を追加しただけで回帰バグが発生したのですから、その2行のどちらかを直せば回帰バグは直るというわけです。&lt;/p&gt;

&lt;pre class=&quot;code lang-diff&quot; data-lang=&quot;diff&quot; data-unlink&gt;&lt;span class=&quot;synType&quot;&gt;diff --git a/third_party/WebKit/Source/core/layout/LayoutListItem.cpp b/third_party/WebKit/Source/core/layout/LayoutListItem.cpp&lt;/span&gt;
index 18e98a78..893ee6e 100644
&lt;span class=&quot;synType&quot;&gt;--- a/third_party/WebKit/Source/core/layout/LayoutListItem.cpp&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;+++ b/third_party/WebKit/Source/core/layout/LayoutListItem.cpp&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;@@ -259,7 +259,7 @@&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt; static LayoutObject* GetParentOfFirstLineBox(LayoutBlockFlow* curr,&lt;/span&gt;
 
     // Shouldn&#39;t add marker into Overflow box, instead, add marker
     // into listitem
&lt;span class=&quot;synSpecial&quot;&gt;-    if (curr_child-&amp;gt;HasOverflowClip())&lt;/span&gt;
&lt;span class=&quot;synIdentifier&quot;&gt;+    if (curr-&amp;gt;HasOverflowClip())&lt;/span&gt;
       break;
 
     if (curr_child-&amp;gt;IsInline() &amp;amp;&amp;amp;
&lt;/pre&gt;


&lt;h2&gt;コードリーディング&lt;/h2&gt;

&lt;p&gt;今回の一連の修正で問題なのは、&lt;code&gt;ListMarker&lt;/code&gt;をLayout Treeに配置する場所です。
回帰バグの発生前後に関わらず、大前提として&lt;b&gt;&lt;code&gt;LayoutBlockFlow(class=suggeestItemNg)&lt;/code&gt;の子として&lt;code&gt;ListMarker&lt;/code&gt;を追加する&lt;/b&gt;必要があります。しかし、その前提が1つ目の修正で崩れてしまいました。回帰バグにより&lt;code&gt;LayoutListItem(&amp;lt;li&amp;gt;)&lt;/code&gt;の子として追加するように意図せず実装が変わってしまいました。&lt;/p&gt;

&lt;p&gt;その原因を少し説明します。&lt;/p&gt;

&lt;p&gt;まず、1つ目の修正で本当に直したかったことは、&lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;に&lt;code&gt;overflow: hidden&lt;/code&gt;な子要素があるとき、その子として&lt;code&gt;ListMarker&lt;/code&gt;を追加するとclipされ、表示されないという問題でした。&lt;/p&gt;

&lt;p&gt;その場合は&lt;code&gt;ListItem&lt;/code&gt;の子として&lt;code&gt;ListMarker&lt;/code&gt;を入れる必要があります。なので1つ目の修正ではそういうロジックを&lt;code&gt;GetParentOfFirstLineBox()&lt;/code&gt;に新規に追加しました。&lt;/p&gt;

&lt;p&gt;具体的には、特定条件時に&lt;code&gt;GetParentOfFirstLineBox()&lt;/code&gt;からは&lt;code&gt;break&lt;/code&gt;経由で&lt;code&gt;nullptr&lt;/code&gt;を返し、呼び元である&lt;code&gt;UpdateMarkerLocation()&lt;/code&gt;が&lt;code&gt;ListItem&lt;/code&gt;の子として&lt;code&gt;ListMarker&lt;/code&gt;を追加するというものです。しかし、その判定条件が正しくなく回帰バグが発生してしまいました。&lt;/p&gt;

&lt;p&gt;ちなみに、この処理の副作用として改行が必然的に発生します(これがCSS的に正しいかは微妙です)。これは1つ目の修正としては許容するようですが、我々のミニマルテストケースでは許容されません。ミニマルテストケースの正しいレイアウトの挙動は&lt;code&gt;LayoutBlockFlow(class=suggeestItemNg)&lt;/code&gt;の子として&lt;code&gt;ListMarker&lt;/code&gt;を追加することです。&lt;/p&gt;

&lt;p&gt;追加した判定条件中で&lt;code&gt;HasOverflowClip()&lt;/code&gt;が判定すべき対象は&lt;code&gt;curr&lt;/code&gt;(つまりは&lt;code&gt;LayoutBlockFlow(class=suggeestItemNg)&lt;/code&gt;)であり&lt;code&gt;curr_child&lt;/code&gt;ではありません。まさに2つ目の修正ではそうなっています。
というのも、&lt;code&gt;curr_child&lt;/code&gt;をどうこうというよりもまずは&lt;code&gt;curr&lt;/code&gt;が&lt;code&gt;HasOverflowClip()&lt;/code&gt;でないならば、&lt;code&gt;curr&lt;/code&gt;は&lt;code&gt;ListMarker&lt;/code&gt;の親として適切なので、&lt;code&gt;curr&lt;/code&gt;に&lt;code&gt;ListMarker&lt;/code&gt;を追加すべきだからです。&lt;/p&gt;

&lt;p&gt;上のミニマルテストケースは&lt;code&gt;&amp;lt;span class=&quot;suggeestItemNg&quot;&amp;gt;&lt;/code&gt;の子として&lt;code&gt;&amp;lt;span class=&quot;item&quot;&amp;gt;&lt;/code&gt;がいます。正しくない条件では、&lt;b&gt;&lt;code&gt;overflow: hidden&lt;/code&gt;な&lt;/b&gt;&lt;code&gt;&amp;lt;span class=&quot;item&quot;&amp;gt;&lt;/code&gt;が&lt;code&gt;&amp;lt;span class=&quot;suggeestItemNg&quot;&amp;gt;&lt;/code&gt;の子要素となっているために、判定結果が誤って真になり、&lt;code&gt;ListMarker&lt;/code&gt;が&lt;code&gt;ListItem&lt;/code&gt;の子として追加されてしまいました。繰り返しますが、本来は&lt;code&gt;overflow: hidden&lt;/code&gt;でない&lt;code&gt;LayoutBlockFlow(class=suggeestItemNg)&lt;/code&gt;の子として追加すべきです。&lt;/p&gt;

&lt;p&gt;結果、不要な&lt;code&gt;LayoutBlockFlow&lt;/code&gt;ができたことで論理改行が発生し、最終的には高さが意図せず高くなってしまうというレイアウト崩れが発生しました。&lt;/p&gt;

&lt;h2&gt;感想&lt;/h2&gt;

&lt;p&gt;参加したメンバーの感想です。&lt;/p&gt;

&lt;p&gt;小野寺: 複数人でレイアウトロジックの動きを追うのは難しかったです。当社のSPEEDA開発グループではペアプロを積極採用しているのでペアプロの応用実践として何かいい解決案を考えてみたいと思いました。&lt;/p&gt;

&lt;p&gt;北内: レンダリングエンジンのソースコードを追うのは骨の折れる作業でしたが、複数人で協力しながら作業したおかげで根気よく進めることができました。また、Appleと共同で開発していたWebKitからフォークしてBlinkに移行したことにともない、メンバ関数の名前をlower-camelcaseからupper-camelcaseに変更するといった変更履歴を見ることができたのも興味深かったです。&lt;/p&gt;

&lt;p&gt;鈴木: Chromeがマルチプロセスで動いているからかデバッガでうまくプロセスにattachできなかったため、git grepとデバッグプリントを利用した最終的かつ原始的な手法でバグを調査しましたが、結果的に、これは思いの外有効な策となりました。また、複数人でバグ調査を行う場合、様々な視点・観点を得られ、またメンタル的にもメリットがあるので、機会があればおすすめしたいです。&lt;/p&gt;

&lt;p&gt;久保: SREチームでインフラエンジニアとして普段業務をしているため、Chromeのバグ改修は自分には非常にハードルが高く、先輩方についていくだけで必死でしたが、Chromeのような超大なソースのバグの原因を特定する際に、どのようにあたりをつけていくのかについて少し掴めたように思います。今後のSREチームとしての業務に活かせると思いました（Uzabaseのinfraチームは今年の7月よりinfraチームから&lt;a href=&quot;https://landing.google.com/sre/&quot;&gt;SRE&lt;/a&gt;チームに変わり、4Q(10月)以降本格的にSREチームとしてサービス改善にコミットし、バグの改修やレスポンス改善などこれまでのインフラレイヤーにとどまらない業務範囲になります）。&lt;/p&gt;

&lt;h2&gt;まとめ&lt;/h2&gt;

&lt;p&gt;今回はソースコードレベルまでの調査を業務で行いました。当社では今後もOSSにも積極的に取り組んでいきたいと思います。Chrome内のソースコードが原因の修正までは特定できたのはよかったのですが、別件の案件が入り、Chrome hackingを一旦保留にしていたら、upstreamでその間に修正されてしまい惜しかったです(本来は自分たちでバグレポートを立てて、テストケース込みでパッチを提出しようとしていたのですが……)。&lt;/p&gt;

&lt;p&gt;長くなりましたが、最後にまとめでこの記事を終わりたいと思います。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;天下のGoogleのしかもChromeでさえも回帰バグが紛れ込んでしまうことがある。&lt;/li&gt;
&lt;li&gt;オープンソースだと簡単なバグは自分たちで調査＆修正はやろうと思えばできて、みんなでOSSに貢献できる。&lt;/li&gt;
&lt;li&gt;弊社では、時にはミドルウェアへのソースコード調査＆解決も厭わない情熱あふれる問題解決大好きエンジニアを募集しています。&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.wantedly.com%2Fprojects%2F114230&quot; title=&quot;急成長の新サービスでSUPERなエンジニアになりたい人WANTED！ by 株式会社ユーザベース&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://www.wantedly.com/projects/114230&quot;&gt;www.wantedly.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.wantedly.com%2Fprojects%2F136928&quot; title=&quot;日本最大級のベンチャー情報プラットフォームの開発エンジニア募集！！ by 株式会社ユーザベース&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://www.wantedly.com/projects/136928&quot;&gt;www.wantedly.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.wantedly.com%2Fprojects%2F45821&quot; title=&quot;海外で世界一の経済情報プラットフォームを作りたいエンジニア募集！ by 株式会社ユーザベース&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://www.wantedly.com/projects/45821&quot;&gt;www.wantedly.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
</description>          <pubDate>Wed, 11 Oct 2017 13:03:52 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8599973812293694236</guid>
          
          <enclosure url="https://cdn-ak.f.st-hatena.com/images/fotolife/r/ryoqun/20170901/20170901013155.png" type="image/png" length="0" />
        </item>
      
    
      
      
        <item>
          <title>Gauge Test Automation Toolとアジャイル開発</title>
          <link>http://tech.uzabase.com/entry/2017/09/26/191009</link>          <description>&lt;p&gt;こんにちはSPEEDAのQAチームの工藤です。&lt;br/&gt;
最近ではテスト自動化周りのツールが数多く存在していますが、英語でのみ提供されていて日本で多くの人に知られていないサービスも多いと思います。&lt;br/&gt;
そんな中、&lt;b&gt;Gauge&lt;/b&gt;という自動化のツールがイケてるという情報を発見したので実際に調べてみました。&lt;/p&gt;

&lt;h1&gt;はじめに&lt;/h1&gt;

&lt;p&gt;GaugeとはThoughtWorks社が開発しているオープンソースのテスト自動化ツールです（2017年7月現在でベータ版）。&lt;br/&gt;
もっと具体的に言うと様々なロールのメンバーが自動テストのスクリプトを理解できるようにするためのspecificationツール（恐らく立ち位置的にはCucumber/Gherkinの代替）になります。&lt;br/&gt;
ざっくりGaugeの良いところを挙げると下記になります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Selenium Webdriverと一緒に使える&lt;/li&gt;
&lt;li&gt;マークダウン形式で記述できる&lt;/li&gt;
&lt;li&gt;ビジネス言語でテスト仕様を記述できる（実行可能な仕様書の概念をサポート）&lt;/li&gt;
&lt;li&gt;多言語、マルチプラットフォームをサポート&lt;/li&gt;
&lt;li&gt;外部データソースからテストデータを読み込める&lt;/li&gt;
&lt;li&gt;拡張可能（自分でpluginを開発できる）&lt;/li&gt;
&lt;li&gt;IDEのサポートが充実している&lt;/li&gt;
&lt;/ul&gt;


&lt;h1&gt;Gaugeで使う用語&lt;/h1&gt;

&lt;p&gt;下記がGaugeで使用する基本的な用語（概念）です。&lt;br/&gt;
使い始めるのに最低限必要そうなものをピックアップしているので、当然他にもあります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Specifications(spec)&lt;/li&gt;
&lt;li&gt;Scenarios&lt;/li&gt;
&lt;li&gt;Steps&lt;/li&gt;
&lt;li&gt;Tags&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;もう少し詳しく説明していきます。&lt;/p&gt;

&lt;h4&gt;Specification(spec)&lt;/h4&gt;

&lt;p&gt;テスト対象アプリケーションの特定の機能の仕様を説明しています。&lt;/p&gt;

&lt;h4&gt;Scenarios&lt;/h4&gt;

&lt;p&gt;各Scenarioは、特定の仕様の1つのフローを表しています。仕様には少なくとも1つのScenarioが含まれている必要があります。&lt;/p&gt;

&lt;h4&gt;Steps&lt;/h4&gt;

&lt;p&gt;仕様を実行可能なコンポーネントに分けたものがStepになります。マークダウン形式のunordered list items（bulleted points）として記述されます。&lt;br/&gt;
（大きくContext Steps、Tear Down Steps、Scenarioやconcepts内のStepsに分けられますが、今回はそこらへんの説明は割愛します）。&lt;/p&gt;

&lt;h4&gt;Tags&lt;/h4&gt;

&lt;p&gt;TagはspecやScenarioを関連付けするために使用します。タグを用いてspecやScenarioをフィルタリングすることができ、後々便利になります。&lt;/p&gt;

&lt;h1&gt;Gaugeのインストール&lt;/h1&gt;

&lt;p&gt;下記ページからダウンロードできます。インストール方法も簡単で、下記ページに書いてある通りに進めていけば5分もかからずにGauge自体はインストールできます。&lt;br/&gt;
&lt;a href=&quot;https://getgauge.io/get-started.html&quot;&gt;https://getgauge.io/get-started.html&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;サンプルコードを見てみる&lt;/h1&gt;

&lt;p&gt;下記ページから自分の好みの言語のSampleコードのGithubリンクへ飛ぶことができます。&lt;br/&gt;
&lt;a href=&quot;https://docs.getgauge.io/examples.html&quot;&gt;https://docs.getgauge.io/examples.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;私はWeb app using SeleniumのJavaのSampleコードを選択しました。&lt;br/&gt;
&lt;a href=&quot;https://github.com/getgauge/gauge-example-java&quot;&gt;https://github.com/getgauge/gauge-example-java&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;下記がSpecificationのファイルになります。&lt;br/&gt;
上記で説明した用語はこんな形で使われます。&lt;/p&gt;

&lt;p&gt;user.spec（自然言語でテストケースを記述していくファイル）&lt;/p&gt;

&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;Signup   //Specification
======

Register a customer  //Scenario
-------------------
tags: user, signup, high, final, smoke  //Tags

* Sign up a new customer                  //Step1
* On the customer page                    //Step2
* Just registered customer is listed      //Step3
&lt;/pre&gt;


&lt;p&gt;上記のSpecファイルはIDEでタブ切り替えでHTML Previewを閲覧できます。Specファイルがそのまま仕様書として使えます。
（自分の場合はIntelliJを使いました。IDE側でプラグインをインストールしてやる必要があります）　　
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/k/kudogen/20170718/20170718122930.png&quot; alt=&quot;f:id:kudogen:20170718122930p:plain&quot; title=&quot;f:id:kudogen:20170718122930p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;下記がSeleniumのテストコードになります。
各Stepに対してのテストコードが@Stepという形で実装されているのが分かります。&lt;br/&gt;
UserSpec.java&lt;/p&gt;

&lt;pre class=&quot;code lang-java&quot; data-lang=&quot;java&quot; data-unlink&gt;&lt;span class=&quot;synType&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;class&lt;/span&gt; UserSpec {
    &lt;span class=&quot;synType&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;final&lt;/span&gt; WebDriver driver;

    &lt;span class=&quot;synType&quot;&gt;public&lt;/span&gt; UserSpec() {
        &lt;span class=&quot;synType&quot;&gt;this&lt;/span&gt;.driver = DriverFactory.getDriver();
    }

    &lt;span class=&quot;synType&quot;&gt;public&lt;/span&gt; String localPart() {
        &lt;span class=&quot;synComment&quot;&gt;// Creating a random local part of an email address also used as username&lt;/span&gt;
        &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; UUID.randomUUID().toString();
    }

    &lt;span class=&quot;synPreProc&quot;&gt;@Step&lt;/span&gt;(&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;On signup page&amp;quot;&lt;/span&gt;)    &lt;span class=&quot;synComment&quot;&gt;//Stepsの実装部分&lt;/span&gt;
    &lt;span class=&quot;synType&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;void&lt;/span&gt; navigateToSignUpPage() {
        driver.get(SignUpPage.SignUpUrl);
    }
&lt;/pre&gt;


&lt;h1&gt;レポート機能&lt;/h1&gt;

&lt;p&gt;プラグインをインストールしてやるだけで、テスト流す度にHTMLのテストレポートを吐き出してくれます（下記画像参照）&lt;br/&gt;
実行したテストをSpecificationやTagで検索できて、Spec毎、Scenario毎、Step毎にどれくらい実行時間がかかったかも簡単にわかります。&lt;br/&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/k/kudogen/20170718/20170718123453.png&quot; alt=&quot;f:id:kudogen:20170718123453p:plain&quot; title=&quot;f:id:kudogen:20170718123453p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h1&gt;今回カバーしていない機能&lt;/h1&gt;

&lt;p&gt;これまでに紹介したのはあくまでも超基本的なTerminologyです。
他にも下記のようなものがあるのですが、今回は触れられていません。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Concepts&lt;/li&gt;
&lt;li&gt;Parameters&lt;/li&gt;
&lt;li&gt;Stepの種類（Contexts, Tear Down Steps）&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;またかなり役立ちそうな下記機能もありますが、今回はカバーしていません。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Data driven execution&lt;/li&gt;
&lt;li&gt;Parallel Execution&lt;/li&gt;
&lt;/ul&gt;


&lt;h1&gt;まとめ&lt;/h1&gt;

&lt;p&gt;弊社ではテストケース＝仕様書という考え方から、ほぼすべてのプロジェクトでUATを書いています。&lt;br/&gt;
元々上記のような取り組みをしていたのですが、もっといいやり方がないか探していたところに見つけたのがGaugeでした。&lt;br/&gt;
Gaugeは実行可能なドキュメントという概念(&quot;the concept of executable documentation&quot;)をサポートしています。&lt;br/&gt;
また自動テストのケースを誰でも読めるようにするという考え方も弊社の開発チームが今まで取り組んできていたことですが、Gaugeを使えばよりスマートに実現できそうです。&lt;br/&gt;
今後は様々なプロジェクトでGaugeを導入していこうと考えています。&lt;/p&gt;

&lt;p&gt;次回は今回カバーできなかったGaugeのAdvancedな機能を中心に取り上げたブログ記事を執筆予定です。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;株式会社ユーザベースでは、より良い開発プロセスを共に作り上げていきたいエンジニアを&lt;a href=&quot;https://www.uzabase.com/recruit/occupation/&quot;&gt;大募集中&lt;/a&gt;です！&lt;/p&gt;
</description>          <pubDate>Tue, 26 Sep 2017 19:10:09 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8599973812280671827</guid>
          
          <enclosure url="https://cdn-ak.f.st-hatena.com/images/fotolife/k/kudogen/20170718/20170718122930.png" type="image/png" length="0" />
        </item>
      
    
      
      
        <item>
          <title>TCP Fast Open</title>
          <link>http://tech.uzabase.com/entry/2017/09/20/174010</link>          <description>&lt;p&gt;はじめまして。プロダクト開発チームの&lt;a href=&quot;https://github.com/ryoqun&quot;&gt;小野寺 (ryoqun)&lt;/a&gt;です。&lt;/p&gt;

&lt;p&gt;今回は最近少しずつ浸透し始めてきた「&lt;a href=&quot;https://en.wikipedia.org/wiki/TCP_Fast_Open&quot;&gt;TCP Fast Open&lt;/a&gt;(以下、Fast Open)」という最新技術についてTCP/IPのおさらいを踏まえながら紹介したいと思います。ちなみに、この技術はTCPを高速化するもので、Google、Facebook、Appleなどでも本番投入され初めているものの、まだ国内では浸透していなくだいぶ先取りな紹介となります。&lt;/p&gt;

&lt;p&gt;Fast Openという技術は比較的枯れたTCPに対してプロトコルレベルで変更を加える比較的インパクトが大きいと勝手に思っている技術です。
最近は低レイヤーの技術はアプリケーション・サービス開発エンジニアだとあまり意識しないとは思いますが、基礎は大事なので
最新動向を掴むと共に、TCP/IPの良い復習ということで少しの間ですがお付き合い下さい。&lt;/p&gt;

&lt;h2&gt;Fast Openとは？&lt;/h2&gt;

&lt;p&gt;一言でいうとTCPのレイテンシーを改善する新しい拡張技術です。具体的には接続確立時(= Open)のレイテンシーを軽減(= Fast)します(よってFast Openという名前の由来となっています)。正確には、TCPの&lt;a href=&quot;https://en.wikipedia.org/wiki/Transmission_Control_Protocol#Connection_establishment&quot;&gt;Three-way handshake&lt;/a&gt;を省略することで1 &lt;a href=&quot;https://en.wikipedia.org/wiki/Round-trip-time&quot;&gt;RTT&lt;/a&gt;分のレイテンシーを削減できます。&lt;/p&gt;

&lt;p&gt;Three-way handshakeを明示的に省略する必要性から、クライアント側とサーバー側の両方がFast Openに対応して初めて有効になります。&lt;/p&gt;

&lt;p&gt;注意点としては、僅かに接続確立時の信頼性が犠牲となることです。これについては後述します。また、各ホストへの初回接続時には使えません。理由は、セキュリティのため認証情報(Cookie)が必要になるためです。これはTCPの&lt;a href=&quot;https://en.wikipedia.org/wiki/SYN_flood&quot;&gt;SYN flooding&lt;/a&gt;攻撃に似た危険性を軽減する対策余地をプロトコル上に残すためです。&lt;/p&gt;

&lt;h2&gt;Three-way handshakeとFast Open&lt;/h2&gt;

&lt;p&gt;本来ならばTCPだとThree-way handshakeが必要になります。つまりは接続確立時に実際の通信ができるまでに、まずクライアント側からSYNフラグが立ったペイロードが無い小さいパケットを送り、サーバー側からSYN+ACKフラグが立ったペイロードが無い小さいパケットを受け取らなければなりません。これがまさしく1 RTT分のレイテンシーに相当するわけです。&lt;/p&gt;

&lt;p&gt;他方でFast Openが有効な場合、接続確立時にいきなりSYNフラグを立てた上で、ペイロードを乗せることができます。例えば、HTTPリクエストが&lt;a href=&quot;https://en.wikipedia.org/wiki/Maximum_segment_size&quot;&gt;TCPのMSS&lt;/a&gt;以下の場合は、0 RTTで&lt;a href=&quot;https://nginx.org/&quot;&gt;nginx&lt;/a&gt;などのHTTPサーバーはリクエストの内容をアプリケーションプロセスに渡すことが実現可能です。ただ、現在だとHTTPというよりかはHTTPS(=TLS)が主流です。その場合はTLS handshakeを即座に開始できるというわけです。なお、Fast Openと&lt;a href=&quot;https://en.wikipedia.org/wiki/Transport_Layer_Security#TLS_1.3_.28draft.29&quot;&gt;TLS 1.3&lt;/a&gt;を組み合わせるとTLSを含めて0-RTTを実現できるようになるようです。&lt;/p&gt;

&lt;h2&gt;デモ&lt;/h2&gt;

&lt;p&gt;百聞は一見にしかずということで、まずは実際の動きを見てみましょう。&lt;/p&gt;

&lt;p&gt;Fast Openが有効になっているサイトから、Fast Openが有効になっているブラウザで&lt;a href=&quot;https://upload.wikimedia.org/wikipedia/commons/0/0a/A4_lands_on_melbourne.jpg&quot;&gt;ファイル&lt;/a&gt;を&lt;a href=&quot;https://www.chromium.org/&quot;&gt;Chromium&lt;/a&gt;でダウンロードしてみました。その時の&lt;a href=&quot;https://developers.google.com/web/tools/chrome-devtools/network-performance/reference#timing&quot;&gt;ChromiumのDeveloper toolsのNetworkのtiming&lt;/a&gt;と&lt;a href=&quot;https://www.wireshark.org/&quot;&gt;Wireshark&lt;/a&gt;で状態を確認してみました。ちなみにテストに使ったサービスはWikimediaですが、Fast Openが有効なサービスにはGoogleなどもありますが、日本国内からのアクセス時にレイテンシーが発生しFast Openの効果がわかりやすくなるようにWikimediaを選んでいます。&lt;/p&gt;

&lt;h3&gt;ChromiumのDeveloper tools&lt;/h3&gt;

&lt;p&gt;Fast Openが無効と有効になっている時の違いを比べてみました。&lt;/p&gt;

&lt;p&gt;無効時:&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/r/ryoqun/20170803/20170803105742.png&quot; alt=&quot;f:id:ryoqun:20170803105742p:plain&quot; title=&quot;f:id:ryoqun:20170803105742p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;有効時:&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/r/ryoqun/20170803/20170803105730.png&quot; alt=&quot;f:id:ryoqun:20170803105730p:plain&quot; title=&quot;f:id:ryoqun:20170803105730p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;赤の矢印(&lt;span style=&quot;color: #ff0000&quot;&gt;↑&lt;/span&gt;)のところに着目するとわかるように、Initial connection(= TCPのThree-way handshakeのこと)がFast Open有効時は必要なくなっていて、SSLのhandshakeが前倒しになって開始されているのがよくわかります。ただ、SSLのhandshakeにかかった時間や実際のデータの転送にかかった時間はそれほど変わっていません。結果としては、Initial connection分の時間(レイテンシー)だけが綺麗に全体のレスポンス時間から減っています。&lt;/p&gt;

&lt;h3&gt;Wireshark&lt;/h3&gt;

&lt;p&gt;Fast Openが無効と有効になっている時の違いを比べてみました。&lt;/p&gt;

&lt;p&gt;無効時:&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/r/ryoqun/20170803/20170803111734.png&quot; alt=&quot;f:id:ryoqun:20170803111734p:plain&quot; title=&quot;f:id:ryoqun:20170803111734p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;有効時:&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/r/ryoqun/20170803/20170803111746.png&quot; alt=&quot;f:id:ryoqun:20170803111746p:plain&quot; title=&quot;f:id:ryoqun:20170803111746p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;赤枠(&lt;span style=&quot;color: #ff0000&quot;&gt;□&lt;/span&gt;)のところに着目するとわかるように、Fast Open無効時は、TCPのThree-way handshakeをちゃんとやっています。しかしFast Open有効時は、Three-way handshakeをスキップしていきなりペイロード(Client Hello; TLS handshakeの最初のパケット)があるパケットを送っているのがわかります。結果、パケットのLengthが大きくなっています。なお、このスクリーンショットからはわからないのですが、この最初のパケットにはSYNフラッグがきちんと立っています。その後のやり取りの流れは無効時と変わりありません。&lt;/p&gt;

&lt;h2&gt;長所と短所&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;○ 接続確立時のRTTが減る！！！！(これは前述の通りですね)&lt;/li&gt;
&lt;li&gt;△ 接続確立後のデータ通信のレイテンシーは向上しない(Fast Openは接続確立時だけの話です)&lt;/li&gt;
&lt;li&gt;✕ アプリケーション層での冪等性が必要(これについては後述します)&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;短所： アプリケーション層での冪等性が必要&lt;/h2&gt;

&lt;p&gt;これが、この記事の冒頭で書いたFast Openを有効にすることによって犠牲にされた信頼性となります。しかしながら、この懸念を考慮する必要はインターネットから到達可能なWebサービスにおいてはほとんどありません。より正確にいうと、そのような前提の場合はブラウザの多重Submit問題と同じ問題であり、ネットワーク起因やユーザー操作起因の違いはあれど、Fast Open抜きにしても必ず考慮する必要があるからです。しかし、TLSを使っていなかったり、あるいは、イントラネット内で完結するWebサービス、またはTCP本来の高信頼性を要求する通信にてFast Openを有効にする場合には懸念となります。&lt;/p&gt;

&lt;p&gt;そのFast Openを有効にした際の信頼性の問題というのは、1つのTCP上のアプリケーションリクエストがIP通信網の品質の問題により、2つになりえるという理論的な問題となります。そのためアプリケーション層において、リクエストが2つになっても問題無いという冪等性が必要になります。&lt;/p&gt;

&lt;p&gt;その問題の原因を説明する前にまずは、前提となる背景を説明します。TCPの役割というのは、信頼性が担保されないIP通信上に、信頼できる双方向通信路を実現するためのプロトコルです。Three-way handshakeはその信頼性の担保のために接続確立時に必要となります。当時のTCPの設計に問題があったわけでもなく、現時点に至るまでの技術的発展があったわけでもなく、昔も今も、レイテンシーと信頼性のトレードオフの結果、本来のTCPは信頼性を重視するためにはThree-way handshakeを必要としています。反面、IP通信は、設計思想として、耐障害性、冗長性を重視し、ごく稀なパケットロスやパケット重複は許容しています。&lt;/p&gt;

&lt;p&gt;というわけで、Fast Openを有効にした上で、Three-way handshakeが省かれ、パケット重複が万が一発生した場合、サーバーにとってはあたかもTCP接続確立が2つ来たかのように見えるので、2回リクエスト処理をしてしまうということになるわけです。&lt;/p&gt;

&lt;h2&gt;普及状況&lt;/h2&gt;

&lt;p&gt;繰り返しになりますが、Fast Openはクライアント側とサーバー側がどちらも対応して初めて使えるようになります。具体的にいうと、TCP/IPスタックは多くの場合、OSが実装しているので、OSがFast Openを実装し、それが有効になっている事と、ミドルウェアやアプリケーションが対応している事が必要になります。&lt;/p&gt;

&lt;p&gt;クライアント側とサーバー側に分けて、2017年9月時点での普及状況について説明します。&lt;/p&gt;

&lt;h3&gt;サーバー&lt;/h3&gt;

&lt;p&gt;Google, Wikipedia, CloudFront, Facebookで有効になっているようです。Fast Openはどちらかというと一般的なWebサービスでは効果が出にくく、CDNや広告配信等の1ショットのHTTPリクエストのトラフィックが大量に発生する場合に効果的です。日本サイトは筆者が簡単に確認する範囲では見つけられませんでした。&lt;/p&gt;

&lt;h3&gt;クライアント&lt;/h3&gt;

&lt;p&gt;Webブラウザはそれぞれ対応が始まっています。筆者は&lt;a href=&quot;https://www.ubuntu.com/&quot;&gt;Ubuntu 16.04/LTS&lt;/a&gt;の&lt;a href=&quot;https://packages.ubuntu.com/xenial/chromium-browser&quot;&gt;Chromium&lt;/a&gt;で動作確認をしています。
OS的にも、iOS、Android、Windowsでそれぞれ動きがあるようです。&lt;/p&gt;

&lt;h3&gt;ツール/ミドルウェア&lt;/h3&gt;

&lt;p&gt;ちらほらとサポートが始まっています。網羅的に調べたわけではありませんが、&lt;a href=&quot;http://netty.io/news/2015/09/30/4-0-32-Final.html&quot;&gt;netty&lt;/a&gt;、&lt;a href=&quot;https://bugs.ruby-lang.org/projects/ruby-trunk/repository/revisions/42865&quot;&gt;Ruby&lt;/a&gt;、&lt;a href=&quot;https://daniel.haxx.se/blog/2016/04/29/curl-7-49-0-goodies-coming/&quot;&gt;curl&lt;/a&gt;などで対応情報を見つけることができます。&lt;/p&gt;

&lt;h2&gt;他の技術との関連&lt;/h2&gt;

&lt;p&gt;最後に、Fast Openがそれぞれ他の技術とどのような関連を持つのかを見てみて、Fast Openの理解を多角的に深めていきたいと思います。&lt;/p&gt;

&lt;h3&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Network_address_translation&quot;&gt;NAT&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;NATの実装によっては、Fast Openとの相性が良くない場合があります。これは当然で、NATはその原理上TCP接続の状態遷移をトラッキングしなければならないのですが、NATの実装が厳しすぎると、Fast OpenによってThree-way handshakeが省かれれば十分に正しくトラッキングできなくなる場合はあります。&lt;/p&gt;

&lt;h3&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/HTTP_persistent_connection&quot;&gt;HTTP keep-alive&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;HTTP通信におけるTCPの接続確立時のレイテンシーを軽減するという目的の上では、Fast OpenもHTTP keep-aliveも同じ立ち位置です。HTTP keep-aliveによってだいぶレイテンシーは改善されます。なので通常のブラウジングでは、keep-aliveに比べてFast Openというのはそれほど如実に効果があるわけではありません。ただ、Fast Openの策定背景としては、&lt;a href=&quot;https://tools.ietf.org/html/rfc7413#section-6.3.3&quot;&gt;HTTP keep-aliveはモバイル回線網にてあまり機能していない&lt;/a&gt;という指摘もあります。&lt;/p&gt;

&lt;h3&gt;スマートフォン向けのHTTP APIのエンドポイント&lt;/h3&gt;

&lt;p&gt;アプリがkeep-aliveしていないならば効果はあります。ただし、まずはkeep-aliveを対応したほうがいいのは言うまでもありません。&lt;/p&gt;

&lt;h3&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Last_mile&quot;&gt;ラストワンマイル回線網(FTTHと4G)&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;宅地のラストワンマイル回線網というと今で言えば日本国内で言えば、FTTHが圧倒的なシェアになっています。FTTHで通信ホストが国内の場合はそもそものレイテンシーは数msなのでFast Openの効果はほとんどありません。ADSLならば多少は効果はあります。しかし、ラストワンマイルが何にしろ、海外ホストへのアクセスの場合には効果が望めます。&lt;/p&gt;

&lt;p&gt;モバイルのラストワンマイル回線網というと今で言えば4G回線が全盛となっています。こちらの場合は国内ホスト、海外ホストに限らず一定のレイテンシー向上が望めます。&lt;/p&gt;

&lt;h3&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/HTTP_cookie#Other_uses&quot;&gt;Supercookie&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Fast Openの際に使われるCookieの転用例としては、Supercookieが挙げられます。セキュリティ上、DOS攻撃対策としてCookieが必要なわけですが、別のセキュリティ観点では、匿名性が犠牲となっています。特に&lt;a href=&quot;https://en.wikipedia.org/wiki/HTTP_ETag#Tracking_using_ETags&quot;&gt;E-tag&lt;/a&gt;、&lt;a href=&quot;https://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security#Privacy_issues&quot;&gt;HSTS&lt;/a&gt;同様、passiveでドメインをまたいだ(=クロスドメイン)トラッキングが実現できてしまいます。今回新たにFast Openがトラッキング手段として加わったわけですが、他の既存の代替手段も存在するのも含め、残念ながらトラッキングを現在において完全に抑制することは非常に困難となっています。&lt;/p&gt;

&lt;h3&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/HTTP/2&quot;&gt;HTTP/2&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;HTTP/2になってもTCPベースなので引き続きFast Openは意味があります。しかし&lt;a href=&quot;https://en.wikipedia.org/wiki/QUIC&quot;&gt;QUIC&lt;/a&gt;に対してはこちらはUDPベースなので関係なくなります。&lt;/p&gt;

&lt;h2&gt;参考情報&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://tools.ietf.org/html/rfc7413&quot;&gt;仕様(比較的手頃な文量でまとまっていて読みやすい)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://devstreaming.apple.com/videos/wwdc/2015/719ui2k57m/719/719_your_app_and_next_generation_networks.pdf&quot;&gt;WWDC 15での言及(冪等性についてわかりやすい図があります)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://insouciant.org/tech/some-quick-thoughts-on-tcp-fast-open-and-chromium/&quot;&gt;Chromiumの開発者の考察&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blogs.windows.com/msedgedev/2016/06/15/building-a-faster-and-more-secure-web-with-tcp-fast-open-tls-false-start-and-tls-1-3/&quot;&gt;Microsoftの0-RTT TLSと絡めながらの言及&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;まとめ&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;レイテンシーが速くなります。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://tools.ietf.org/html/rfc675#section-4.3.2&quot;&gt;半世紀近く変わらなかったTCP(のThree-way handshake)&lt;/a&gt;が地味に変わるかもしれません。&lt;/li&gt;
&lt;/ul&gt;


&lt;hr /&gt;

&lt;p&gt;株式会社ユーザベースでは、ローレベル含め技術が大好きなエンジニアを&lt;a href=&quot;https://www.uzabase.com/recruit/occupation/&quot;&gt;大募集中&lt;/a&gt;です！&lt;/p&gt;
</description>          <pubDate>Wed, 20 Sep 2017 17:40:10 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8599973812285136297</guid>
          
          <enclosure url="https://cdn-ak.f.st-hatena.com/images/fotolife/r/ryoqun/20170803/20170803105742.png" type="image/png" length="0" />
        </item>
      
    
      
      
        <item>
          <title>マルチホストでのDocker Container間通信 第3回: Kubernetesのネットワーク(CNI, kube-proxy, kube-dns)</title>
          <link>http://tech.uzabase.com/entry/2017/09/12/164756</link>          <description>&lt;p&gt;こんにちは。SPEEDA開発チームの鈴木です。&lt;/p&gt;

&lt;p&gt;これまでマルチホストでのContainer間通信について、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Dockerのネットワークの基礎(&lt;a href=&quot;http://tech.uzabase.com/entry/2017/08/07/172411&quot;&gt;前々回&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;マルチホストでのContainer間通信を実現する手段の一つとしてのOverlayNetwork(&lt;a href=&quot;http://tech.uzabase.com/entry/2017/08/23/175813&quot;&gt;前回&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;といった話をしてきましたが、3回目となる今回はこれまでの内容を踏まえた上でKubernetesのネットワークについてお話します。内容としては大きく次の2つになります。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;どうやってマルチホストでのContainer間通信を実現しているか&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Service名でPodと通信できるようするための仕組み&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;では早速1つ目の話をはじめましょう。Kubernetesを利用する場合、基本的には複数のノード上にKubernetesクラスタを構築することになります。
（&lt;a href=&quot;https://github.com/kubernetes/minikube&quot;&gt;minikube&lt;/a&gt;を使って単一ノードからなるKubernetesクラスタを構築するような例外はあります）&lt;br/&gt;
つまり何らかの方法でホストをまたいでContainer間通信を行うわけですが、そのための方法は3つあります。&lt;/p&gt;

&lt;h1&gt;マルチホストでContainer間通信を行う3つの方法&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;自前でOverlayNetworkを構築し、それをKubernetesと連携させる&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CNI(Container Networking Interface)を使う&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;kubenetを使う&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;それではこれから上記3つについて少し詳しく説明していきます。&lt;/p&gt;

&lt;h1&gt;1.自前でOverlayNetworkを構築してKubernetesと連携させる&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;http://tech.uzabase.com/entry/2017/08/23/175813&quot;&gt;前回&lt;/a&gt;説明した &lt;a href=&quot;https://github.com/coreos/flannel&quot;&gt;flannel&lt;/a&gt; のようなツールを用いてOverlayNetworkを構築する方法です。&lt;br/&gt;
私が2016年にCoreOSクラスタ上でKubernetesクラスタをマニュアルで構築したとき、CoreOSの公式ドキュメントに記載されていた方法がこれです(CoreOSがContainer Linuxに改名される前の話です)。&lt;br/&gt;
ちなみにCoreOSの場合はflannelを用います(flannelはCoreOS社が開発しています)。&lt;br/&gt;
この場合、CoreOSのcloud-configにflannelの設定とflannelに合わせたDockerの設定が必要になります。&lt;br/&gt;
当然すべてのノードに対して設定が必要になるのでなかなか面倒です。&lt;/p&gt;

&lt;h1&gt;2.CNI(Container Network Interface)を使う&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/containernetworking/cni&quot;&gt;CNI&lt;/a&gt;は、&lt;a href=&quot;https://www.cncf.io/&quot;&gt;Cloud Native Computing Foundation&lt;/a&gt;※のプロジェクトで、&lt;br/&gt;
Container内のNetwork Interfaceを構成するためのプラグインを開発するための仕様とライブラリなどから構成されています。&lt;br/&gt;
ネットワーク層をプラガブルにしたいという考えは、多くのContainer RuntimeとOrchestration Toolが共通して持っている考えのため、重複を避けるために定義されました。&lt;/p&gt;

&lt;p&gt;※Cloud Native Computing Foundationは、Kubernetesの開発主体です。
DockerやCoreOS、Red Hat、Google、IBM、Mesosphere、シスコ、インテルなどが主導して2015年7月に発足しました。&lt;/p&gt;

&lt;p&gt;KubernetesはこのCNIプラグインを利用することができます。
ちなみにDocker自体もCNIとは別に&lt;a href=&quot;http://docs.docker.jp/engine/extend/plugins_network.html&quot;&gt;ネットワークプラグイン&lt;/a&gt;を利用できる仕組みを持っています。&lt;/p&gt;

&lt;h3&gt;CNIを利用できるContainer Runtime&lt;/h3&gt;

&lt;p&gt;公式ページによると現在(2017年9月)CNIを利用できるContainer Runtimeは以下のようなものがあるようです。&lt;br/&gt;
Kubernetesだけではなく、MesosなんかもCNIを利用できるみたいですね。&lt;/p&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://coreos.com/blog/rkt-cni-networking.html&quot;&gt;rkt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://kurma.io/&quot;&gt;Kurma&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://kubernetes.io/docs/admin/network-plugins/&quot;&gt;Kubernetes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/openshift/origin/blob/master/docs/openshift_networking_requirements.md&quot;&gt;OpenShift&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/cloudfoundry-incubator/cf-networking-release&quot;&gt;Cloud Foundry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/apache/mesos/blob/master/docs/cni.md&quot;&gt;Mesos&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;hr /&gt;

&lt;h3&gt;3rd Party Plugins&lt;/h3&gt;

&lt;p&gt;以下はCNIの仕様に則って作成されたCNIプラグインです(2017年9月現在)。&lt;br/&gt;
注意点として、上述したようにCNIはKubernetesのためだけのインタフェースではないので、Kubernetes用ではないプラグインもあることを挙げておきます。&lt;/p&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/projectcalico/cni-plugin&quot;&gt;Project Calico&lt;/a&gt; - L3の仮想ネットワーク&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/weaveworks/weave&quot;&gt;Weave&lt;/a&gt; - 仮想ネットワーク&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/contiv/netplugin&quot;&gt;Contiv Networking&lt;/a&gt; - 仮想ネットワーク + 柔軟なネットワークポリシー制御を提供&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/hustcat/sriov-cni&quot;&gt;SR-IOV&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/cilium/cilium&quot;&gt;Cilium&lt;/a&gt; - Container用 BPF &amp;amp; XDP&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/infobloxopen/cni-infoblox&quot;&gt;Infoblox&lt;/a&gt; - ContainerのIPアドレスを管理するサービス(IPAM)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Intel-Corp/multus-cni&quot;&gt;Multus&lt;/a&gt; - Kubernetesのマルチプラグインとして動作。複数のプラグインのグループ化(他のプラグインをdelegateして呼び出すらしい)。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/romana/kube&quot;&gt;Romana&lt;/a&gt; - KubernetesのためのL3の仮想ネットワーク + ネットワークポリシー制御&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Huawei-PaaS/CNI-Genie&quot;&gt;CNI-Genie&lt;/a&gt; - Kubernetesのマルチプラグインとして動作。一つのContainerに複数のネットワークインタフェースを割り当て、インタフェースごとにCNIプラグインを割り当てられる。例えばeth0はCalico、eth1はFlannel、eth2はWeaveなど。つまりContainerが複数のネットワークにまたがることができる。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/nuagenetworks/nuage-cni&quot;&gt;Nuage CNI&lt;/a&gt; - Kubernetesのための仮想ネットワーク + ネットワークポリシー制御&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/cloudfoundry-incubator/silk&quot;&gt;Silk&lt;/a&gt; - Cloud Foundryのためのプラグイン。flannelに触発されたらしい。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/John-Lin/linen-cni&quot;&gt;Linen&lt;/a&gt; - Open vSwitchでOverlayNetworkを構築するプラグイン&lt;/li&gt;
&lt;/ul&gt;


&lt;hr /&gt;

&lt;p&gt;これらを見ると、CalicoやWeaveといった単体でContainerの仮想ネットワークを構築できるツールがCNIプラグインとしても提供されていることがわかります。&lt;br/&gt;
プラグインの要件を満たすように既存の機能をうまく使っているのでしょうね。&lt;br/&gt;
余談ですが、flannelもそうですが、Calico, Weave, Silk, Linenというように「生地」に関連した名前のものが多いですね。&lt;/p&gt;

&lt;p&gt;Kubernetesから利用するのは当然Calico, Weave, Contivといった仮想ネットワークのためのCNIプラグインになります。&lt;/p&gt;

&lt;h3&gt;CNIプラグインの動作&lt;/h3&gt;

&lt;p&gt;続いてCNIプラグインはどう動作するのか、具体的にどんなものなのかをご理解いただくために、少々ソースコードを読みながら解説します。&lt;/p&gt;

&lt;h4&gt;CNIプラグインのソースコード&lt;/h4&gt;

&lt;p&gt;CNIプロジェクトは、CNIプラグインを簡単に開発できるようにスケルトンを用意しています。&lt;br/&gt;
プラグインの動作は、このスケルトンと実際にスケルトンを使って作られたプラグインの両方を見ると理解できると思います。&lt;br/&gt;
では順番に見ていきましょう。まずスケルトンからです。軽く眺めて次にいきましょう。&lt;br/&gt;
(注：抜粋です。コードすべてではありません。またあくまでこれは今現在のバージョンのコードです。)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/containernetworking/cni/blob/HEAD/pkg/skel/skel.go&quot;&gt;cni/pkg/skel/skel.go&lt;/a&gt;&lt;/p&gt;

&lt;pre class=&quot;code lang-go&quot; data-lang=&quot;go&quot; data-unlink&gt;&lt;span class=&quot;synStatement&quot;&gt;type&lt;/span&gt; CmdArgs &lt;span class=&quot;synStatement&quot;&gt;struct&lt;/span&gt; {
    ContainerID &lt;span class=&quot;synType&quot;&gt;string&lt;/span&gt;
    Netns       &lt;span class=&quot;synType&quot;&gt;string&lt;/span&gt;
    IfName      &lt;span class=&quot;synType&quot;&gt;string&lt;/span&gt;
    Args        &lt;span class=&quot;synType&quot;&gt;string&lt;/span&gt;
    Path        &lt;span class=&quot;synType&quot;&gt;string&lt;/span&gt;
    StdinData   []&lt;span class=&quot;synType&quot;&gt;byte&lt;/span&gt;
}

&lt;span class=&quot;synStatement&quot;&gt;type&lt;/span&gt; dispatcher &lt;span class=&quot;synStatement&quot;&gt;struct&lt;/span&gt; {
    Getenv &lt;span class=&quot;synType&quot;&gt;func&lt;/span&gt;(&lt;span class=&quot;synType&quot;&gt;string&lt;/span&gt;) &lt;span class=&quot;synType&quot;&gt;string&lt;/span&gt;
    Stdin  &lt;span class=&quot;synType&quot;&gt;io.Reader&lt;/span&gt;
    Stdout &lt;span class=&quot;synType&quot;&gt;io.Writer&lt;/span&gt;
    Stderr &lt;span class=&quot;synType&quot;&gt;io.Writer&lt;/span&gt;

    ConfVersionDecoder version.ConfigDecoder
    VersionReconciler  version.Reconciler
}

&lt;span class=&quot;synStatement&quot;&gt;func&lt;/span&gt; PluginMain(cmdAdd, cmdDel &lt;span class=&quot;synType&quot;&gt;func&lt;/span&gt;(_ *CmdArgs) &lt;span class=&quot;synType&quot;&gt;error&lt;/span&gt;,&lt;span class=&quot;synError&quot;&gt; &lt;/span&gt;
  versionInfo version.PluginInfo) {
    &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; e := PluginMainWithError(cmdAdd, cmdDel, versionInfo); e != &lt;span class=&quot;synStatement&quot;&gt;nil&lt;/span&gt; {
        &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; err := e.Print(); err != &lt;span class=&quot;synStatement&quot;&gt;nil&lt;/span&gt; {
            log.Print(&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;Error writing error JSON to stdout: &amp;quot;&lt;/span&gt;, err)
        }
        os.Exit(&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;)
    }
}

&lt;span class=&quot;synStatement&quot;&gt;func&lt;/span&gt; PluginMainWithError(cmdAdd, cmdDel &lt;span class=&quot;synType&quot;&gt;func&lt;/span&gt;(_ *CmdArgs) &lt;span class=&quot;synType&quot;&gt;error&lt;/span&gt;,&lt;span class=&quot;synError&quot;&gt; &lt;/span&gt;
  versionInfo version.PluginInfo) *types.Error {
    &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; (&amp;amp;dispatcher{
        Getenv: os.Getenv,
        Stdin:  os.Stdin,
        Stdout: os.Stdout,
        Stderr: os.Stderr,
    }).pluginMain(cmdAdd, cmdDel, versionInfo)
}

&lt;span class=&quot;synStatement&quot;&gt;func&lt;/span&gt; (t *dispatcher) pluginMain(cmdAdd, cmdDel &lt;span class=&quot;synType&quot;&gt;func&lt;/span&gt;(_ *CmdArgs) &lt;span class=&quot;synType&quot;&gt;error&lt;/span&gt;,&lt;span class=&quot;synError&quot;&gt; &lt;/span&gt;
  versionInfo version.PluginInfo) *types.Error {
    cmd, cmdArgs, err := t.getCmdArgsFromEnv()
    &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;synStatement&quot;&gt;nil&lt;/span&gt; {
        &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; createTypedError(err.Error())
    }

    &lt;span class=&quot;synStatement&quot;&gt;switch&lt;/span&gt; cmd {
    &lt;span class=&quot;synStatement&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;ADD&amp;quot;&lt;/span&gt;:
        err = t.checkVersionAndCall(cmdArgs, versionInfo, cmdAdd)
    &lt;span class=&quot;synStatement&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;DEL&amp;quot;&lt;/span&gt;:
        err = t.checkVersionAndCall(cmdArgs, versionInfo, cmdDel)
    &lt;span class=&quot;synStatement&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;VERSION&amp;quot;&lt;/span&gt;:
        err = versionInfo.Encode(t.Stdout)
    &lt;span class=&quot;synStatement&quot;&gt;default&lt;/span&gt;:
        &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; createTypedError(&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;unknown CNI_COMMAND: %v&amp;quot;&lt;/span&gt;, cmd)
    }

    &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;synStatement&quot;&gt;nil&lt;/span&gt; {
        &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; e, ok := err.(*types.Error); ok {
            &lt;span class=&quot;synComment&quot;&gt;// don&#39;t wrap Error in Error&lt;/span&gt;
            &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; e
        }
        &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; createTypedError(err.Error())
    }
    &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;nil&lt;/span&gt;
}
&lt;/pre&gt;


&lt;p&gt;はい、続いてはスケルトンを利用した実際のプラグインです。&lt;br/&gt;
これはCNIプロジェクトがサンプルとして用意している単純なプラグインです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/containernetworking/plugins/blob/master/plugins/main/loopback/loopback.go&quot;&gt;plugins/plugins/main/loopback/loopback.go&lt;/a&gt;&lt;/p&gt;

&lt;pre class=&quot;code lang-go&quot; data-lang=&quot;go&quot; data-unlink&gt;&lt;span class=&quot;synStatement&quot;&gt;func&lt;/span&gt; main() {
    skel.PluginMain(cmdAdd, cmdDel, version.All)
}

&lt;span class=&quot;synStatement&quot;&gt;func&lt;/span&gt; cmdAdd(args *skel.CmdArgs) &lt;span class=&quot;synType&quot;&gt;error&lt;/span&gt; {
    args.IfName = &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;lo&amp;quot;&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;// ignore config, this only works for loopback&lt;/span&gt;
    err := ns.WithNetNSPath(args.Netns, &lt;span class=&quot;synType&quot;&gt;func&lt;/span&gt;(_ ns.NetNS) &lt;span class=&quot;synType&quot;&gt;error&lt;/span&gt; {
        link, err := netlink.LinkByName(args.IfName)
        &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;synStatement&quot;&gt;nil&lt;/span&gt; {
            &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; err &lt;span class=&quot;synComment&quot;&gt;// not tested&lt;/span&gt;
        }

        err = netlink.LinkSetUp(link)
        &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;synStatement&quot;&gt;nil&lt;/span&gt; {
            &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; err &lt;span class=&quot;synComment&quot;&gt;// not tested&lt;/span&gt;
        }

        &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;nil&lt;/span&gt;
    })
    &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;synStatement&quot;&gt;nil&lt;/span&gt; {
        &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; err &lt;span class=&quot;synComment&quot;&gt;// not tested&lt;/span&gt;
    }

    result := current.Result{}
    &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; result.Print()
}

&lt;span class=&quot;synStatement&quot;&gt;func&lt;/span&gt; cmdDel(args *skel.CmdArgs) &lt;span class=&quot;synType&quot;&gt;error&lt;/span&gt; {
    args.IfName = &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;lo&amp;quot;&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;// ignore config, this only works for loopback&lt;/span&gt;
    err := ns.WithNetNSPath(args.Netns, &lt;span class=&quot;synType&quot;&gt;func&lt;/span&gt;(ns.NetNS) &lt;span class=&quot;synType&quot;&gt;error&lt;/span&gt; {
        link, err := netlink.LinkByName(args.IfName)
        &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;synStatement&quot;&gt;nil&lt;/span&gt; {
            &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; err &lt;span class=&quot;synComment&quot;&gt;// not tested&lt;/span&gt;
        }

        err = netlink.LinkSetDown(link)
        &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;synStatement&quot;&gt;nil&lt;/span&gt; {
            &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; err &lt;span class=&quot;synComment&quot;&gt;// not tested&lt;/span&gt;
        }

        &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;nil&lt;/span&gt;
    })
    &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;synStatement&quot;&gt;nil&lt;/span&gt; {
        &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; err &lt;span class=&quot;synComment&quot;&gt;// not tested&lt;/span&gt;
    }

    &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;nil&lt;/span&gt;
}
&lt;/pre&gt;


&lt;h4&gt;CNIプラグインのソースコード解説&lt;/h4&gt;

&lt;p&gt;それではいよいよ解説に入ります。このサンプルのmain関数を見てください。CmdArgsを引数にとる関数2つを、スケルトンのPluginMain関数に渡しています。&lt;/p&gt;

&lt;pre class=&quot;code lang-go&quot; data-lang=&quot;go&quot; data-unlink&gt;&lt;span class=&quot;synStatement&quot;&gt;func&lt;/span&gt; main() {
    skel.PluginMain(cmdAdd, cmdDel, version.All)
}
&lt;/pre&gt;


&lt;p&gt;この&lt;code&gt;cmdAdd&lt;/code&gt;と&lt;code&gt;cmdDel&lt;/code&gt;はContainerが追加・削除されたタイミングで(CNIプラグインを利用するプログラム)から呼び出される関数です。&lt;br/&gt;
引数の&lt;code&gt;CmdArgs&lt;/code&gt;は、スケルトンを見ると次のようになっています。&lt;/p&gt;

&lt;pre class=&quot;code lang-go&quot; data-lang=&quot;go&quot; data-unlink&gt;&lt;span class=&quot;synStatement&quot;&gt;type&lt;/span&gt; CmdArgs &lt;span class=&quot;synStatement&quot;&gt;struct&lt;/span&gt; {
    ContainerID &lt;span class=&quot;synType&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;// ContainerのID&lt;/span&gt;
    Netns       &lt;span class=&quot;synType&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;// ネットワーク名前空間名&lt;/span&gt;
    IfName      &lt;span class=&quot;synType&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;// インタフェース名&lt;/span&gt;
    Args        &lt;span class=&quot;synType&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;// プラグイン実行時の引数&lt;/span&gt;
    Path        &lt;span class=&quot;synType&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;// CNIプラグインを検索するパスのリスト(パスは:で区切る)&lt;/span&gt;
    StdinData   []&lt;span class=&quot;synType&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;// 標準入力の値&lt;/span&gt;
}
&lt;/pre&gt;


&lt;p&gt;つまり、プラグインはContainerの追加・削除を契機として、上記構造体の情報を元に任意の処理を行います。&lt;br/&gt;
ちなみにこのサンプルはContainerの追加時にループバックインタフェースをContainerのネットワーク名前空間内に作成し、Containerの削除時にループバックインタフェースをネットワーク名前空間から削除しています。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt; &lt;code&gt;CmdArgs&lt;/code&gt;について補足 &lt;/strong&gt;&lt;br/&gt;
main関数では&lt;code&gt;cmdAdd&lt;/code&gt;,&lt;code&gt;cmdDel&lt;/code&gt;の両方を渡しているが、addとdelのどちらを使うかどう決定されるのでしょう。
これはスケルトンのコードを見ればわかるのですが、&lt;code&gt;CNI_COMMAND&lt;/code&gt;という環境変数の値により決定されます。&lt;br/&gt;
値が&lt;code&gt;ADD&lt;/code&gt;の場合&lt;code&gt;cmdAdd&lt;/code&gt;が呼び出され、値が&lt;code&gt;DEL&lt;/code&gt;の場合&lt;code&gt;cmdDel&lt;/code&gt;が呼び出されます。&lt;br/&gt;
また&lt;code&gt;cmdAdd&lt;/code&gt;,&lt;code&gt;cmdDel&lt;/code&gt;に渡ってくる`CmdArgsの値はどのようにセットされているのでしょうか。&lt;br/&gt;
これも環境変数が使われていて、単純に以下の環境変数の値が構造体の対応する変数にセットされています。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left;&quot;&gt;環境変数&lt;/th&gt;
&lt;th style=&quot;text-align:left;&quot;&gt;CmdArgsの変数&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left;&quot;&gt;CNI_CONTAINERID&lt;/td&gt;
&lt;td style=&quot;text-align:left;&quot;&gt;ContainerID&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left;&quot;&gt;CNI_NETNS&lt;/td&gt;
&lt;td style=&quot;text-align:left;&quot;&gt;Netns&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left;&quot;&gt;CNI_IFNAME&lt;/td&gt;
&lt;td style=&quot;text-align:left;&quot;&gt;IfName&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left;&quot;&gt;CNI_ARGS&lt;/td&gt;
&lt;td style=&quot;text-align:left;&quot;&gt;Args&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left;&quot;&gt;CNI_PATH&lt;/td&gt;
&lt;td style=&quot;text-align:left;&quot;&gt;Path&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;p&gt;つまりCNIプラグインの処理を呼び出すプログラムは、予めこれらの環境変数をセットしておく必要があります。&lt;/p&gt;

&lt;p&gt;ここまで簡単にコードを見てきましたが、どうでしょう。結構シンプルな仕組みではないでしょうか。&lt;/p&gt;

&lt;h3&gt;KubernetesでCNIを使うには&lt;/h3&gt;

&lt;p&gt;KubernetesでCNIを使う場合は、&lt;a href=&quot;https://kubernetes.io/docs/concepts/cluster-administration/network-plugins/#cni&quot;&gt;公式ドキュメント&lt;/a&gt;に書いてありますが、&lt;br/&gt;
&lt;code&gt;kubelet&lt;/code&gt; の引数に &lt;code&gt;--network-plugin=cni&lt;/code&gt; の指定と、&lt;br/&gt;
CNIの設定を配置するディレクトリ&lt;code&gt;--cni-conf-dir&lt;/code&gt;(defaultは &lt;code&gt;/etc/cni/net.d&lt;/code&gt;)の指定が必要になります。&lt;br/&gt;
またCNIプラグイン自体は&lt;code&gt;--cni-bin-dir&lt;/code&gt;（defaultは&lt;code&gt;/opt/cni/bin&lt;/code&gt;）に存在する必要があります。&lt;/p&gt;

&lt;p&gt;例えばCNIプラグインとして、Weaveを使用する場合、このような感じになります。&lt;/p&gt;

&lt;pre class=&quot;code lang-json&quot; data-lang=&quot;json&quot; data-unlink&gt;$ &lt;span class=&quot;synError&quot;&gt;view&lt;/span&gt; /&lt;span class=&quot;synError&quot;&gt;etc&lt;/span&gt;/&lt;span class=&quot;synError&quot;&gt;cni&lt;/span&gt;/&lt;span class=&quot;synError&quot;&gt;net&lt;/span&gt;.&lt;span class=&quot;synError&quot;&gt;d&lt;/span&gt;/10-&lt;span class=&quot;synError&quot;&gt;weave&lt;/span&gt;.&lt;span class=&quot;synError&quot;&gt;conf&lt;/span&gt;
&lt;span class=&quot;synSpecial&quot;&gt;{&lt;/span&gt;
    &amp;quot;&lt;span class=&quot;synStatement&quot;&gt;name&lt;/span&gt;&amp;quot;: &amp;quot;&lt;span class=&quot;synConstant&quot;&gt;weave&lt;/span&gt;&amp;quot;,
    &amp;quot;&lt;span class=&quot;synStatement&quot;&gt;type&lt;/span&gt;&amp;quot;: &amp;quot;&lt;span class=&quot;synConstant&quot;&gt;weave-net&lt;/span&gt;&amp;quot;,
    &amp;quot;&lt;span class=&quot;synStatement&quot;&gt;hairpinMode&lt;/span&gt;&amp;quot;: &lt;span class=&quot;synConstant&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;synSpecial&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;




&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;$ ls -lat /opt/cni/bin/weave*
lrwxrwxrwx 1 root root       18 Aug 10 14:51 weave-ipam -&amp;gt; weave-plugin-1.9.7*
lrwxrwxrwx 1 root root       18 Aug 10 14:51 weave-net -&amp;gt; weave-plugin-1.9.7*
-rwxr-xr-x 1 root root  9446280 Jun  7 02:37 weave-plugin-1.9.7*&lt;/pre&gt;


&lt;h3&gt;CNIの仕様について更に詳しく&lt;/h3&gt;

&lt;p&gt;CNIの仕様について更に詳しく知りたい場合は、公式の&lt;a href=&quot;https://github.com/containernetworking/cni/blob/master/SPEC.md#example-configurations&quot;&gt;こちら&lt;/a&gt;をご覧ください。&lt;br/&gt;
CNIの設定ファイルについての説明なども書いてあります。&lt;/p&gt;

&lt;h1&gt;3.kubenetを使う&lt;/h1&gt;

&lt;p&gt;これはGKEでKubernetesクラスタを構築した場合に利用されている方法です。&lt;br/&gt;
kubenetが使用されていることは、GKEのクラスタに接続して &lt;code&gt;ps ax | grep kubelet&lt;/code&gt;などとして&lt;code&gt;kubelet&lt;/code&gt;コマンドの引数を見ることで分かります。&lt;/p&gt;

&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;$ ps ax | &lt;span class=&quot;synStatement&quot;&gt;grep&lt;/span&gt; kubelet
 &lt;span class=&quot;synConstant&quot;&gt;3461&lt;/span&gt; ?        Sl   &lt;span class=&quot;synConstant&quot;&gt;1218&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;07&lt;/span&gt; /usr/&lt;span class=&quot;synStatement&quot;&gt;local&lt;/span&gt;/bin/kubelet
 &lt;span class=&quot;synSpecial&quot;&gt;--api-servers=https://xx.xxx.xxx.xxx&lt;/span&gt;
 &lt;span class=&quot;synSpecial&quot;&gt;--enable-debugging-handlers=true&lt;/span&gt;
 &lt;span class=&quot;synSpecial&quot;&gt;--cloud-provider=gce&lt;/span&gt;
 &lt;span class=&quot;synSpecial&quot;&gt;--pod-manifest-path=/etc/kubernetes/manifests&lt;/span&gt;
 &lt;span class=&quot;synSpecial&quot;&gt;--allow-privileged=True&lt;/span&gt;
 &lt;span class=&quot;synSpecial&quot;&gt;--v=2&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;--cluster-dns=10.11.240.10&lt;/span&gt;
 &lt;span class=&quot;synSpecial&quot;&gt;--cluster-domain=cluster.local&lt;/span&gt;
 &lt;span class=&quot;synSpecial&quot;&gt;--cgroup-root=/&lt;/span&gt;
 &lt;span class=&quot;synSpecial&quot;&gt;--system-cgroups=/system&lt;/span&gt;
 &lt;span class=&quot;synSpecial&quot;&gt;--network-plugin=kubenet&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# ←ここ&lt;/span&gt;
 &lt;span class=&quot;synSpecial&quot;&gt;--runtime-cgroups=/docker-daemon&lt;/span&gt;
 &lt;span class=&quot;synSpecial&quot;&gt;--kubelet-cgroups=/kubelet&lt;/span&gt;
 &lt;span class=&quot;synSpecial&quot;&gt;--node-labels=beta.kubernetes.io/fluentd-ds-ready=true,cloud.google.com/gkenodepool=default-pool&lt;/span&gt; 
 &lt;span class=&quot;synSpecial&quot;&gt;--babysit-daemons=true&lt;/span&gt; 
 &lt;span class=&quot;synSpecial&quot;&gt;--eviction-hard=memory.available&amp;lt;100Mi,nodefs.available&amp;lt;10%,nodefs.inodesFree&amp;lt;5%&lt;/span&gt; 
 &lt;span class=&quot;synSpecial&quot;&gt;--anonymous-auth=false&lt;/span&gt; 
 &lt;span class=&quot;synSpecial&quot;&gt;--authorization-mode=Webhook&lt;/span&gt; 
 &lt;span class=&quot;synSpecial&quot;&gt;--client-ca-file=/etc/kubernetes/pki/ca-certificates.crt&lt;/span&gt; 
 &lt;span class=&quot;synSpecial&quot;&gt;--feature-gates=ExperimentalCriticalPodAnnotation=true&lt;/span&gt; 
 &lt;span class=&quot;synSpecial&quot;&gt;--experimental-allocatable-ignore-eviction&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;&lt;code&gt;--network-plugin=kubenet&lt;/code&gt;という引数が与えられていますね。&lt;br/&gt;
ちなみにCNIを使う場合は&lt;code&gt;--network-plugin=cni&lt;/code&gt;という指定でした。&lt;/p&gt;

&lt;p&gt;kubenetを使用する場合、cbr0という名前のブリッジが作成され、cbr0に接続されたpod用のvethペアも作成されます。&lt;br/&gt;
更に言うとkubenetを使用する場合、実はCNIプラグインが使用されているようです(恐らくブリッジへの接続などで)。&lt;br/&gt;
例えばGKEの場合、クラスタの&lt;code&gt;/opt/cni/bin&lt;/code&gt;配下を見てみると、以下のようなプラグインが配置されています。&lt;/p&gt;

&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;/opt/cni/bin$ ls -l
-rwxr-xr-x 1 root root 4026452 Mar 22 20:04 bridge
-rwxr-xr-x 1 root root 2901956 Mar 22 20:03 cnitool
-rwxr-xr-x 1 root root 9636499 Mar 22 20:04 dhcp
-rwxr-xr-x 1 root root 2910884 Mar 22 20:03 flannel
-rwxr-xr-x 1 root root 3102946 Mar 22 20:04 host-local
-rwxr-xr-x 1 root root 3609358 Mar 22 20:04 ipvlan
-rwxr-xr-x 1 root root 3170507 Mar 22 20:04 loopback
-rwxr-xr-x 1 root root 3640336 Mar 22 20:04 macvlan
-rwxr-xr-x 1 root root 2733314 Mar 22 20:04 noop
-rwxr-xr-x 1 root root 4000236 Mar 22 20:04 ptp
&lt;/pre&gt;


&lt;h4&gt;まとめ&lt;/h4&gt;

&lt;p&gt;これまでマルチホストでのContainer間通信を実現するための3つの方法を説明してきたわけですが、自前でやるにしろ、CNIプラグインやkubenetを利用するにせよ、Kubernetes本体の機能はほとんど使われていないことがわかったかと思います。&lt;/p&gt;

&lt;h2&gt;マルチホストでContainer間通信ができるだけでは解決しない問題&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://tech.uzabase.com/entry/2017/08/23/175813&quot;&gt;前回の記事&lt;/a&gt;で私は「Overlay Networkを構築するだけでは、Containerが起動するホストが動的に変わるようなケースには対応できません。」というようなことを書きました。これはどういうことを言っているのか説明しましょう。&lt;/p&gt;

&lt;p&gt;まず、KubernetesのようなオーケストレーションツールでContainerを起動する場合、基本的にはDeployするホストをユーザーが直接指定することはありません。Kubernetesがホストの状況(負荷とか空き容量とか)を見て、適切なホストにDeployしてくれるからです。そう、つまりContainerがどこにDeployされるかは予めわからないのです。&lt;br/&gt;
もちろんDeploy後であれば、DeployされたホストのIPを知ることができます。しかしContainer間で連携を行う場合、Deployされるまで連携するContainerのIPが分からないのは不便きわまりないです。この問題は、当然、&lt;u&gt;ホストをまたいでContainer同士が通信できても解決しません。&lt;/u&gt;&lt;/p&gt;

&lt;p&gt;この問題を解決するには、&lt;u&gt;どのホストにContainerがDeployされてもContainerにアクセスする側が気にしなくていいような仕組みが別に必要&lt;/u&gt;になります。&lt;br/&gt;
Kubernetesでは&lt;code&gt;Service&lt;/code&gt;がそのための仕組みを提供しています。&lt;/p&gt;

&lt;h2&gt;Service&lt;/h2&gt;

&lt;p&gt;Kubernetesをお使いの方はご存知の通り、&lt;code&gt;Service&lt;/code&gt;はいわゆるロードバランサーで、名前をつけてPod(Kubernetesのリソースの一つでContainerを管理する)と紐付けておくことで、Service経由でPodとやりとりができるようになります。Podがスケールされて複数のホストに存在する場合は、ロードバランシングしてくれたりもします(Kubernetes Cluster上のPodからのみ名前解決できる)。&lt;/p&gt;

&lt;p&gt;もう少し具体的に説明しましょう。まず、Serviceを生成するとServiceには自動的にIPが割り当てられます。&lt;br/&gt;
そしてこのIP(とServiceで指定したPort)を介してServiceに紐づくPodとやりとりすることができます。そのため、どのホストにPodがDeployされているか気にする必要がなくなります。&lt;/p&gt;

&lt;p&gt;ちなみにこのIPは仮想的なIPで、紐づく物理的あるいは仮想的なNICはどこにも存在しません。&lt;br/&gt;
またこのIPはKubernetes Cluster上のPodからのみやりとりできます。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/k/kenji-suzuki/20170903/20170903221229.png&quot; alt=&quot;f:id:kenji-suzuki:20170903221229p:plain&quot; title=&quot;f:id:kenji-suzuki:20170903221229p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;しかし何故Podを直接名前解決できるようにせず、Serviceを挟んでいるのでしょうか。&lt;br/&gt;
Podのスケールアウトに対応するためでしょうか。でもこれはDNSラウンドロビンで対応できそうですね。&lt;br/&gt;
では、仮にPodを直接名前解決できたとしたらどうでしょう。そして、その名前解決の結果がキャッシュされ、キャッシュが有効なうちに何らかの理由でPodがフェールオーバーされて、これまでとは別のホストで起動されたらどうなるでしょうか。困ったことになりますね。このあたりのことは公式の&lt;a href=&quot;https://kubernetes.io/docs/concepts/services-networking/service/#why-not-use-round-robin-dns&quot;&gt;ここ&lt;/a&gt;で言及されています。&lt;/p&gt;

&lt;p&gt;さて、ただただServiceの機能について説明するだけでは面白くないので、今回は最後にもう少し突っ込んだ話をしたいと思います。&lt;/p&gt;

&lt;h2&gt;Serviceの機能はどのように実現されているか&lt;/h2&gt;

&lt;p&gt;今回は機能を次の2つに絞って「誰」が「どのように」実現しているかを説明します。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;名前解決&lt;/li&gt;
&lt;li&gt;ルーティング&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;ルーティングというのは、ServiceのIP（とPort）にアクセスされたら対応するPodのIP（とPort）にフォワードするという意味で書きました。&lt;/p&gt;

&lt;h3&gt;担当者は誰だ？&lt;/h3&gt;

&lt;p&gt;まず、こちらをご覧ください。これはKubernetesのアーキテクチャ図で、これを見るとKubernetesが様々な登場人物（Component）から成るツールだということがわかります。「誰」がという表現をしたのはこのためです。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/k/kenji-suzuki/20170903/20170903184036.png&quot; alt=&quot;f:id:kenji-suzuki:20170903184036p:plain&quot; title=&quot;f:id:kenji-suzuki:20170903184036p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;今回の話でいうと、名前解決の部分を担当しているのが&lt;code&gt;kube-dns&lt;/code&gt;（上図にはいませんが）で、ルーティングの部分を担当しているのが&lt;code&gt;kube-proxy&lt;/code&gt;です。&lt;br/&gt;
では、「どのように」それを実現しているのでしょうか。&lt;/p&gt;

&lt;h3&gt;彼らは一体何をやっているのか？&lt;/h3&gt;

&lt;p&gt;彼らがやっていることを端的に表すと「ServiceやEndpointリソースを監視して、リソースの状況に合わせたアクションを起こす」ということをやっています（今回はEndpointリソースには言及しません）。&lt;/p&gt;

&lt;p&gt;もう少し具体的に説明しましょう。  &lt;br/&gt;
Kubernetesの&lt;code&gt;kube-apiserver&lt;/code&gt;は、自身が管理している各種リソース(ServiceやNode、Pod、Secretなど）について、問い合わせる口を持っています。&lt;br/&gt;
そして問い合わせを行った結果、以前の問い合わせの結果との差分から、リソースの「追加」「削除」「更新」といったリソースの変化を検知しイベント通知を行うためのライブラリが用意されています。このライブラリは汎用的に作られていて、「追加」「削除」「更新」のイベント通知を受けた際に処理を行うイベントハンドラを簡単に設定できるようになっています。&lt;/p&gt;

&lt;p&gt;kube-dnsやkube-proxyはサーバとして起動され、常駐しながら上記の仕組みを利用してServiceリソースを監視し、状況に応じた処理を行っています。&lt;/p&gt;

&lt;p&gt;実際のソースコードを見てみましょう。
次はkube-dnsのパッケージのコードです。&lt;br/&gt;
&lt;a href=&quot;https://github.com/kubernetes/dns/blob/35fcf7c9220f12e07d27bbca0b5de6687820ee7d/pkg/dns/dns.go&quot;&gt;dns.go&lt;/a&gt;&lt;/p&gt;

&lt;pre class=&quot;code lang-go&quot; data-lang=&quot;go&quot; data-unlink&gt;&lt;span class=&quot;synStatement&quot;&gt;func&lt;/span&gt; (kd *KubeDNS) setServicesStore() {
    &lt;span class=&quot;synComment&quot;&gt;// Returns a cache.ListWatch that gets all changes to services.&lt;/span&gt;
    kd.servicesStore, kd.serviceController = kcache.NewInformer(
        kcache.NewListWatchFromClient(
            kd.kubeClient.Core().RESTClient(),
            &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;services&amp;quot;&lt;/span&gt;,
            v1.NamespaceAll,
            fields.Everything()),
        &amp;amp;v1.Service{},
        resyncPeriod,
        kcache.ResourceEventHandlerFuncs{
            AddFunc:    kd.newService,
            DeleteFunc: kd.removeService,
            UpdateFunc: kd.updateService,
        },
    )
}

&lt;span class=&quot;synStatement&quot;&gt;func&lt;/span&gt; (kd *KubeDNS) newService(obj &lt;span class=&quot;synStatement&quot;&gt;interface&lt;/span&gt;{}) {
    &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; service, ok := assertIsService(obj); ok {
        glog.V(&lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;).Infof(&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;New service: %v&amp;quot;&lt;/span&gt;, service.Name)
        glog.V(&lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt;).Infof(&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;Service details: %v&amp;quot;&lt;/span&gt;, service)

        &lt;span class=&quot;synComment&quot;&gt;// ExternalName services are a special kind that return CNAME records&lt;/span&gt;
        &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; service.Spec.Type == v1.ServiceTypeExternalName {
            kd.newExternalNameService(service)
            &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt;
        }
        &lt;span class=&quot;synComment&quot;&gt;// if ClusterIP is not set, a DNS entry should not be created&lt;/span&gt;
        &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; !v1.IsServiceIPSet(service) {
            &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; err := kd.newHeadlessService(service); err != &lt;span class=&quot;synStatement&quot;&gt;nil&lt;/span&gt; {
                glog.Errorf(&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;Could not create new headless service %v: %v&amp;quot;&lt;/span&gt;, service.Name, err)
            }
            &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt;
        }
        &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;len&lt;/span&gt;(service.Spec.Ports) == &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt; {
            glog.Warningf(&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;Service with no ports, this should not have happened: %v&amp;quot;&lt;/span&gt;,
                service)
        }
        kd.newPortalService(service)
    }
}
&lt;/pre&gt;


&lt;p&gt;ServiceInformerというのが、Serviceリソースの状態を監視し、通知を行ってくれる構造体になります。&lt;br/&gt;
このInformerにハンドラを登録している部分が、AddFuncやUpdateFuncなどと書かれている部分です。&lt;/p&gt;

&lt;p&gt;続いてkube-proxyのパッケージのコードを見てみましょう。こちらも同じような感じで、Informerにハンドラが登録されています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/kubernetes/kubernetes/blob/master/pkg/proxy/config/config.go&quot;&gt;config.go&lt;/a&gt;&lt;/p&gt;

&lt;pre class=&quot;code lang-go&quot; data-lang=&quot;go&quot; data-unlink&gt;&lt;span class=&quot;synStatement&quot;&gt;func&lt;/span&gt; NewServiceConfig(serviceInformer coreinformers.ServiceInformer, resyncPeriod time.Duration) *ServiceConfig {
    serviceInformer.Informer().AddEventHandlerWithResyncPeriod(
        cache.ResourceEventHandlerFuncs{
            AddFunc:    result.handleAddService,
            UpdateFunc: result.handleUpdateService,
            DeleteFunc: result.handleDeleteService,
        },
        resyncPeriod,
    )
}

&lt;span class=&quot;synStatement&quot;&gt;func&lt;/span&gt; (c *ServiceConfig) handleAddService(obj &lt;span class=&quot;synStatement&quot;&gt;interface&lt;/span&gt;{}) {
    service, ok := obj.(*api.Service)
    &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; !ok {
        utilruntime.HandleError(fmt.Errorf(&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;unexpected object type: %v&amp;quot;&lt;/span&gt;, obj))
        &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt;
    }
    &lt;span class=&quot;synStatement&quot;&gt;for&lt;/span&gt; i := &lt;span class=&quot;synStatement&quot;&gt;range&lt;/span&gt; c.eventHandlers {
        glog.V(&lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt;).Infof(&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;Calling handler.OnServiceAdd&amp;quot;&lt;/span&gt;)
        c.eventHandlers[i].OnServiceAdd(service)
    }
}
&lt;/pre&gt;


&lt;h4&gt;kube-dnsのイベントハンドラは何をしているか&lt;/h4&gt;

&lt;p&gt;まずkube-dnsの&lt;a href=&quot;https://github.com/kubernetes/dns/blob/35fcf7c9220f12e07d27bbca0b5de6687820ee7d/cmd/kube-dns/app/server.go&quot;&gt;server&lt;/a&gt;の起動部分を見ると分かるのですが、&lt;a href=&quot;https://github.com/skynetservices/skydns&quot;&gt;SkyDNS&lt;/a&gt;というDNSサービスを起動しています。&lt;/p&gt;

&lt;pre class=&quot;code lang-go&quot; data-lang=&quot;go&quot; data-unlink&gt;&lt;span class=&quot;synStatement&quot;&gt;func&lt;/span&gt; (server *KubeDNSServer) Run() {
    pflag.VisitAll(&lt;span class=&quot;synType&quot;&gt;func&lt;/span&gt;(flag *pflag.Flag) {
        glog.V(&lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;).Infof(&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;FLAG: --%s=%q&amp;quot;&lt;/span&gt;, flag.Name, flag.Value)
    })
    setupSignalHandlers()
    server.startSkyDNSServer() &lt;span class=&quot;synComment&quot;&gt;// ここ&lt;/span&gt;
    server.kd.Start()
    server.setupHandlers()

    glog.V(&lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;).Infof(&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;Status HTTP port %v&amp;quot;&lt;/span&gt;, server.healthzPort)
    &lt;span class=&quot;synStatement&quot;&gt;if&lt;/span&gt; server.nameServers != &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; {
        glog.V(&lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;).Infof(&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;Upstream nameservers: %s&amp;quot;&lt;/span&gt;, server.nameServers)
    }
    glog.Fatal(http.ListenAndServe(fmt.Sprintf(&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;:%d&amp;quot;&lt;/span&gt;, server.healthzPort), &lt;span class=&quot;synStatement&quot;&gt;nil&lt;/span&gt;))
}
&lt;/pre&gt;


&lt;p&gt;SkyDNSのサーバーには、問い合わせを受けたときに呼び出される「DNSレコードを返す処理」を渡せるようになっており、その部分のみkube-dnsが実装しています。&lt;br/&gt;
そしてそのレコードの登録処理が、Serviceの変更の通知を受け取ったときに呼び出される処理なのです。&lt;br/&gt;
これによりKubernetes Cluster内で名前解決が可能になります。&lt;/p&gt;

&lt;h4&gt;kube-proxyのイベントハンドラは何をしているか&lt;/h4&gt;

&lt;p&gt;まず先に言ってしまうと、ServiceからPodへのルーティングは、iptablesによって行われています。&lt;br/&gt;
iptablesの内容を表示させてみると次のようになっています（説明に必要なものだけ抜粋しています）。これはkubernetes-dashboardのルーティングなのですが、Serviceの 10.110.169.150:80 が Pod の 10.42.0.0:9090 にフォワードされていることが分かると思います。&lt;/p&gt;

&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;-A KUBE-SEP-4 -s 10.42.0.0/32     -m comment --comment &amp;#34;kube-system/kubernetes-dashboard:&amp;#34;        -j KUBE-MARK-MASQ
-A KUBE-SEP-4 -p tcp              -m comment --comment &amp;#34;kube-system/kubernetes-dashboard:&amp;#34; -m tcp -j DNAT --to-destination 10.42.0.0:9090

-A KUBE-SERVICES -d 10.110.169.150/32 -p tcp -m comment --comment &amp;#34;kube-system/kubernetes-dashboard: cluster IP&amp;#34; -m tcp --dport 80 -j KUBE-SVC-DASH

-A KUBE-SVC-DASH    -m comment --comment &amp;#34;kube-system/kubernetes-dashboard:&amp;#34; -j KUBE-SEP-4&lt;/pre&gt;


&lt;p&gt;ちなみにこのdashboardをスケールアウトさせてみると&lt;br/&gt;
&lt;code&gt;$ kubectl scale deploy kubernetes-dashboard -n kube-system --replicas=3&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;このようになります。&lt;/p&gt;

&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;-A KUBE-SEP-3 -s 10.44.0.1/32 -m comment --comment &amp;#34;kube-system/kubernetes-dashboard:&amp;#34; -j KUBE-MARK-MASQ
-A KUBE-SEP-3 -p tcp -m comment --comment &amp;#34;kube-system/kubernetes-dashboard:&amp;#34; -m tcp -j DNAT --to-destination 10.44.0.1:9090
-A KUBE-SEP-1 -s 10.42.0.0/32 -m comment --comment &amp;#34;kube-system/kubernetes-dashboard:&amp;#34; -j KUBE-MARK-MASQ
-A KUBE-SEP-1 -p tcp -m comment --comment &amp;#34;kube-system/kubernetes-dashboard:&amp;#34; -m tcp -j DNAT --to-destination 10.42.0.0:9090
-A KUBE-SEP-2 -s 10.42.0.1/32 -m comment --comment &amp;#34;kube-system/kubernetes-dashboard:&amp;#34; -j KUBE-MARK-MASQ
-A KUBE-SEP-2 -p tcp -m comment --comment &amp;#34;kube-system/kubernetes-dashboard:&amp;#34; -m tcp -j DNAT --to-destination 10.42.0.1:9090

# -m statisitc でランダムに宛先を変えている
# 1/3の確率で KUBE-SEP-1
-A KUBE-SVC-XGLOHA7QRQ3V22RZ -m comment --comment &amp;#34;kube-system/kubernetes-dashboard:&amp;#34; -m statistic --mode random --probability 0.33332999982 -j KUBE-SEP-1
# 1/2の確率で KUBE-SEP-2
-A KUBE-SVC-XGLOHA7QRQ3V22RZ -m comment --comment &amp;#34;kube-system/kubernetes-dashboard:&amp;#34; -m statistic --mode random --probability 0.50000000000 -j KUBE-SEP-2
# 残りは KUBE-SEP-3
-A KUBE-SVC-XGLOHA7QRQ3V22RZ -m comment --comment &amp;#34;kube-system/kubernetes-dashboard:&amp;#34; -j KUBE-SEP-3&lt;/pre&gt;


&lt;p&gt;もう分かったかと思いますが、kube-proxyのイベントハンドラがやっているのは、このiptablesの動的な更新です。
これは上記のkube-proxyのコードを追っていくと分かります(興味がありましたら&lt;a href=&quot;https://github.com/kubernetes/kubernetes/blob/master/pkg/proxy/iptables/proxier.go&quot;&gt;proxier.go&lt;/a&gt;のsyncProxyRulesのあたりをご覧ください)。&lt;/p&gt;

&lt;h3&gt;まとめ&lt;/h3&gt;

&lt;p&gt;kube-dnsとkube-proxyがServiceを監視しており、Serviceが作成されたとき、kube-dnsによりDNSレコードが登録され名前解決が可能になり、そしてkube-proxyによりiptablesを使ったルーティングが設定されることが分かったかと思います。&lt;/p&gt;

&lt;p&gt;図にするとこのような流れになるでしょうか。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/k/kenji-suzuki/20170906/20170906013723.png&quot; alt=&quot;f:id:kenji-suzuki:20170906013723p:plain&quot; title=&quot;f:id:kenji-suzuki:20170906013723p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;br/&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/k/kenji-suzuki/20170906/20170906015645.png&quot; alt=&quot;f:id:kenji-suzuki:20170906015645p:plain&quot; title=&quot;f:id:kenji-suzuki:20170906015645p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;br/&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/k/kenji-suzuki/20170906/20170906013926.png&quot; alt=&quot;f:id:kenji-suzuki:20170906013926p:plain&quot; title=&quot;f:id:kenji-suzuki:20170906013926p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;br/&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/k/kenji-suzuki/20170906/20170906014014.png&quot; alt=&quot;f:id:kenji-suzuki:20170906014014p:plain&quot; title=&quot;f:id:kenji-suzuki:20170906014014p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;br/&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/k/kenji-suzuki/20170906/20170906014153.png&quot; alt=&quot;f:id:kenji-suzuki:20170906014153p:plain&quot; title=&quot;f:id:kenji-suzuki:20170906014153p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;さて、大分長くなりましたがKubernetesのネットワーク話はいかがだったでしょうか。&lt;br/&gt;
様々な仕組みは用意しつつ、巧みに自前での実装を回避しているという印象を私は受けました。&lt;br/&gt;
Kubernetesは調べていくと感心させられることが多いですね。&lt;/p&gt;

&lt;h4&gt;シリーズ&lt;/h4&gt;

&lt;p&gt;第1回: &lt;a href=&quot;http://tech.uzabase.com/entry/2017/08/07/172411&quot;&gt;マルチホストでのDocker Container間通信 第1回: Dockerネットワークの基礎&lt;/a&gt;&lt;br/&gt;
第2回: &lt;a href=&quot;http://tech.uzabase.com/entry/2017/08/23/175813&quot;&gt;マルチホストでのDocker Container間通信 第2回: Port Forwarding と Overlay Network&lt;/a&gt;&lt;br/&gt;
第3回: マルチホストでのDocker Container間通信 第3回: Kubernetesのネットワーク(CNI, kube-proxy, kube-dns) (当記事)&lt;/p&gt;
</description>          <pubDate>Tue, 12 Sep 2017 16:47:56 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8599973812287412050</guid>
          
          <enclosure url="https://cdn-ak.f.st-hatena.com/images/fotolife/k/kenji-suzuki/20170903/20170903221229.png" type="image/png" length="0" />
        </item>
      
    
      
      
        <item>
          <title>マルチホストでのDocker Container間通信 第2回 Port Forwarding と Overlay Network</title>
          <link>http://tech.uzabase.com/entry/2017/08/23/175813</link>          <description>&lt;p&gt;こんにちは。SPEEDA開発チームの鈴木です。&lt;br/&gt;
&lt;a href=&quot;http://tech.uzabase.com/entry/2017/08/07/172411&quot;&gt;前回&lt;/a&gt;はマルチホストでのDocker Container間通信の説明の前段として、Dockerのネットワークが次のようになっているという話をしました。
　&lt;br/&gt;
　&lt;br/&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/k/kenji-suzuki/20170710/20170710131809.png&quot; alt=&quot;f:id:kenji-suzuki:20170710131809p:plain&quot; title=&quot;f:id:kenji-suzuki:20170710131809p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;今回はいよいよ、マルチホストでどうやってDocker Container同士の通信を実現するのかを説明していきます。&lt;/p&gt;

&lt;h1&gt;はじめに&lt;/h1&gt;

&lt;p&gt;マルチホスト間でのDocker Container通信とは、次のようにホストをまたいでDocker Container同士が通信することを指します。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/k/kenji-suzuki/20170707/20170707164743.png&quot; alt=&quot;f:id:kenji-suzuki:20170707164743p:plain&quot; title=&quot;f:id:kenji-suzuki:20170707164743p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;図で見ると大分単純ですし、前提条件次第では実際簡単に実現できるのですが、Containerのオーケストレーションを前提におくと色々な仕組みが必要なことがわかってきます。&lt;/p&gt;

&lt;h2&gt;DockerによるContainerのマルチホスト間通信&lt;/h2&gt;

&lt;p&gt;例としてA,B,C,Dという4つのDocker Containerを、複数のホストに配置するとこのようになります（Host XとYは同じネットワークに属することとします）。&lt;br/&gt;
※以降の説明には不要なため、vethの記載は省略します。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/k/kenji-suzuki/20170714/20170714142929.png&quot; alt=&quot;f:id:kenji-suzuki:20170714142929p:plain&quot; title=&quot;f:id:kenji-suzuki:20170714142929p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;これをネットワーク的な視点で見ると、次のような感じです。
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/k/kenji-suzuki/20170714/20170714184336.png&quot; alt=&quot;f:id:kenji-suzuki:20170714184336p:plain&quot; title=&quot;f:id:kenji-suzuki:20170714184336p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Container AとContainer Bは当然通信できます。&lt;br/&gt;
また、Container AからHost Yまでも問題なく通信できます。
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/k/kenji-suzuki/20170714/20170714184907.png&quot; alt=&quot;f:id:kenji-suzuki:20170714184907p:plain&quot; title=&quot;f:id:kenji-suzuki:20170714184907p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;しかし、Container Cとは通信できません。なぜならContainer AとContainer Cは異なるPrivate Network上に存在するからです。
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/k/kenji-suzuki/20170714/20170714185209.png&quot; alt=&quot;f:id:kenji-suzuki:20170714185209p:plain&quot; title=&quot;f:id:kenji-suzuki:20170714185209p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;この問題を解決して、異なるホストのContainerと通信できるようにする方法はいくつかあります。&lt;br/&gt;
その1つがDockerのPort Forwarding機能です。&lt;/p&gt;

&lt;h3&gt;Port Forwarding&lt;/h3&gt;

&lt;p&gt;Port Forwarding機能を使うとContainerの外部からContainerにアクセスできるようになります。&lt;/p&gt;

&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# Host Yの8080番ポートにアクセスしたら、Container Cの80番ポートにForwardする&lt;/span&gt;
host-y: $ docker run &lt;span class=&quot;synSpecial&quot;&gt;--name&lt;/span&gt; container-c &lt;span class=&quot;synSpecial&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;-p&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;8080&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;80&lt;/span&gt; nginx
&lt;/pre&gt;


&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/k/kenji-suzuki/20170714/20170714190341.png&quot; alt=&quot;f:id:kenji-suzuki:20170714190341p:plain&quot; title=&quot;f:id:kenji-suzuki:20170714190341p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;iptablesの設定内容を見ると、&lt;code&gt;docker run&lt;/code&gt;で指定したようにPort Forwardingが行われる設定がされていることがわかります。&lt;/p&gt;

&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;host-y:/$ sudo iptables-save 
*nat
&lt;span class=&quot;synComment&quot;&gt;# 略&lt;/span&gt;
-A DOCKER ! &lt;span class=&quot;synSpecial&quot;&gt;-i&lt;/span&gt; docker0 &lt;span class=&quot;synSpecial&quot;&gt;-p&lt;/span&gt; tcp &lt;span class=&quot;synSpecial&quot;&gt;-m&lt;/span&gt; tcp &lt;span class=&quot;synSpecial&quot;&gt;--dport&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;8080&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;-j&lt;/span&gt; DNAT &lt;span class=&quot;synSpecial&quot;&gt;--to-destination&lt;/span&gt; 172.17.0.2:&lt;span class=&quot;synConstant&quot;&gt;80&lt;/span&gt;
COMMIT
&lt;span class=&quot;synComment&quot;&gt;# 略&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;この通信方法は&lt;strong&gt;「接続元のContainerが接続先のContainerのホストのIPを知っている」&lt;/strong&gt;という条件のもとに成り立っています。つまりContainerが起動するホストが動的に変わるようなケースには対応できません。&lt;br/&gt;
逆に言えばホストが固定されていて、今後も変わらないならばこれで十分です。&lt;/p&gt;

&lt;h3&gt;Overlay Network&lt;/h3&gt;

&lt;p&gt;Overlay Networkとは、あるNetworkの上に別のNetworkを構築する技術です。&lt;br/&gt;
異なるホストのContainer同士が通信できない原因はContainerが異なるネットワークに属していることにありました。&lt;br/&gt;
「じゃあOverlay Network構築して同じネットワークに属するようにしてしまえばいいじゃん」というのがこの方法です。
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/k/kenji-suzuki/20170714/20170714200720.png&quot; alt=&quot;f:id:kenji-suzuki:20170714200720p:plain&quot; title=&quot;f:id:kenji-suzuki:20170714200720p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Overlay Networkを使用する場合、Containerは同じネットワークに属していることになるので、異なるホストのContainerと直接通信することができるようになります。&lt;br/&gt;
続いてOverlay Networkの構築方法をいくつかご紹介します。&lt;/p&gt;

&lt;h4&gt;1. &lt;a href=&quot;https://docs.docker.com/engine/swarm/&quot;&gt;Docker Swarm mode&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Dockerのオーケストレーション機能であるSwarm modeでContainerのマルチホスト間通信を実現している方法が、まさにこのOverlay Networkを利用する方法です。&lt;br/&gt;
Swarm modeでクラスタを構築した後、Docker用のネットワーク一覧を表示する&lt;code&gt;docker network ls&lt;/code&gt;コマンドを実行してみると、Overlay Networkが構築されていることがわかります。&lt;/p&gt;

&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;$ docker network ls
NETWORK ID          NAME                DRIVER              SCOPE
d95e8109f33a        bridge              bridge              local
e5430ed50f3d        docker_gwbridge     bridge              local
6f6c8c7f698d        host                host                local
1q38yeph9dnj        ingress             overlay             swarm
2bae9ccfec69        none                null                local&lt;/pre&gt;


&lt;p&gt;以前のSwarmではService Discoveryとしてconsul, etcd, zookeeperなどの分散KVSが必要でしたが、Swamr modeの登場以降は不要になっています（Dockerに組み込まれたようです）。&lt;/p&gt;

&lt;h4&gt;2. 分散KVSと&lt;code&gt;docker network create -d overlay&lt;/code&gt;コマンドを使って自前で構築&lt;/h4&gt;

&lt;p&gt;Swarm modeがやってくれているようなことを自前でやります。いまはSwarm modeがあるので、この方法が使われることはあまりないでしょう。&lt;/p&gt;

&lt;h4&gt;3. &lt;a href=&quot;https://github.com/coreos/flannel&quot;&gt;flannel&lt;/a&gt;のようなOverlay Network構築ツールを使う&lt;/h4&gt;

&lt;p&gt;flannelは公式ページの冒頭に「Flannel is a simple and easy to configure layer 3 network fabric designed for Kubernetes.」とあるように、元々Kubernetes向けに作られたものです。&lt;br/&gt;
flannelを使用する場合、次のイメージのように各ホストにflanneldとetcdをインストールします。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/k/kenji-suzuki/20170717/20170717220751.png&quot; alt=&quot;f:id:kenji-suzuki:20170717220751p:plain&quot; title=&quot;f:id:kenji-suzuki:20170717220751p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;flannelの主な役割は2つです。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;etcdを使ってNetwork情報を共有することで、docker0に重複しないSubNetを割り当てる。&lt;br/&gt;
(割り当て済みのSubNetのアドレス帯を共有しているので重複を避けられる）&lt;/li&gt;
&lt;li&gt;各ホストに仮想NIC&lt;code&gt;flannel0&lt;/code&gt;を作成。Container間でpacketを送受信する際、docker0と接続されたflannel0がVXLANでpacketのカプセル化・非カプセル化を行う。&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;VXLANでカプセル化されたpacketは次のような構造をしています。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/k/kenji-suzuki/20170718/20170718012341.png&quot; alt=&quot;f:id:kenji-suzuki:20170718012341p:plain&quot; title=&quot;f:id:kenji-suzuki:20170718012341p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;元のpacket(Inner MAC Address 〜 payloadまで)の送信先IPはContainer CのIPですが、Container Cは仮想的には同じNetworkに属しているものの物理的には別のNetworkに属しておりルーティングできないので、上記図でルータ的役割を果たしているHost Yのeth0を宛先とする別のHeader(Outer MAC Address 〜 VXLAN Headerまで)を付加しています。このようにあるプロトコルを別のプロトコルで包むことをカプセル化といいます。&lt;/p&gt;

&lt;p&gt;packetを受信した側は、付加されたHeaderの情報（VXLAN Headerの情報など）から受信したpacketがVXLANのpacketであることが判別できるので、包んでいるプロトコルを剥がして本来送信したかった宛先に送ることができます。
例えばHost XのContainer AからHost YのContainer Cにpacketを送信すると次のようにpacketが送信されていきます。NICの右側が、そのNICのpacketをキャプチャしたものです（簡略化しています）。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/k/kenji-suzuki/20170726/20170726032055.png&quot; alt=&quot;f:id:kenji-suzuki:20170726032055p:plain&quot; title=&quot;f:id:kenji-suzuki:20170726032055p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/k/kenji-suzuki/20170726/20170726032225.png&quot; alt=&quot;f:id:kenji-suzuki:20170726032225p:plain&quot; title=&quot;f:id:kenji-suzuki:20170726032225p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h4&gt;Overlay Networkだけで解決できないこと&lt;/h4&gt;

&lt;p&gt;Port Forwardingと同様に、Containerが起動するホストが動的に変わるようなケースには対応できません。&lt;br/&gt;
同じネットワークに属してはいますが、同じホストに存在するわけではないので、dockerのlink機能やdocker-composeを使っての名前解決ができないからです。&lt;br/&gt;
Docker swarmやKubernetesなどはこの問題を解決するための仕組みをもっています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://tech.uzabase.com/entry/2017/09/12/164756&quot;&gt;次回&lt;/a&gt;は、KubernetesにおけるContainerのマルチホスト間通信と合わせてこのあたりのことを書きたいと思います。&lt;/p&gt;

&lt;h4&gt;シリーズ&lt;/h4&gt;

&lt;p&gt;第1回: &lt;a href=&quot;http://tech.uzabase.com/entry/2017/08/07/172411&quot;&gt;マルチホストでのDocker Container間通信 第1回: Dockerネットワークの基礎&lt;/a&gt;&lt;br/&gt;
第2回: マルチホストでのDocker Container間通信 第2回: Port Forwarding と Overlay Network (当記事)&lt;br/&gt;
第3回: &lt;a href=&quot;http://tech.uzabase.com/entry/2017/09/12/164756&quot;&gt;マルチホストでのDocker Container間通信 第3回: Kubernetesのネットワーク(CNI, kube-proxy, kube-dns)&lt;/a&gt;&lt;/p&gt;
</description>          <pubDate>Wed, 23 Aug 2017 17:58:13 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8599973812279548363</guid>
          
          <enclosure url="https://cdn-ak.f.st-hatena.com/images/fotolife/k/kenji-suzuki/20170710/20170710131809.png" type="image/png" length="0" />
        </item>
      
    
      
      
        <item>
          <title>マルチホストでのDocker Container間通信 第1回: Dockerネットワークの基礎</title>
          <link>http://tech.uzabase.com/entry/2017/08/07/172411</link>          <description>&lt;p&gt;こんにちは。SPEEDA開発チームの鈴木です。&lt;br/&gt;
調べてみるとなかなか興味深い技術であるマルチホストでのDocker Conainer間通信。&lt;br/&gt;
これをどのように実現しているのか説明したいと思います。
が、その前に今回の投稿では、まず基礎知識的な話としてDockerのネットワークについて順を追って説明をします。&lt;/p&gt;

&lt;h1&gt;Dockerのネットワーク&lt;/h1&gt;

&lt;h2&gt;docker0&lt;/h2&gt;

&lt;p&gt;Dockerをインストールしたあと、&lt;code&gt;ifconfig&lt;/code&gt;や&lt;code&gt;ip addr show&lt;/code&gt;すると&lt;code&gt;docker0&lt;/code&gt;なるものが表示されるようになるので、気になっていた人もいるかと思います。&lt;br/&gt;
これは一体何者なのでしょうか。&lt;/p&gt;

&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;[kenji@arch ~]$ ifconfig
docker0: flags=4099&amp;lt;UP,BROADCAST,MULTICAST&amp;gt;  mtu 1500
        inet 172.17.0.1  netmask 255.255.0.0  broadcast 0.0.0.0
        ether 02:42:fb:28:ee:2d  txqueuelen 0  (Ethernet)
        RX packets 0  bytes 0 (0.0 B)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 0  bytes 0 (0.0 B)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

&lt;/pre&gt;


&lt;p&gt;　&lt;br/&gt;
この&lt;code&gt;docker0&lt;/code&gt;はDockerによって自動的に作成された仮想ブリッジで、Docker Container同士をつなぐためのものです。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/k/kenji-suzuki/20170707/20170707184308.png&quot; alt=&quot;f:id:kenji-suzuki:20170707184308p:plain&quot; title=&quot;f:id:kenji-suzuki:20170707184308p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;docker0に接続されているネットワーク・インタフェース&lt;/h2&gt;

&lt;p&gt;何かしらDocker Containerを起動した状態で、ブリッジを管理する&lt;code&gt;brctl&lt;/code&gt;コマンドを実行してみると次のように&lt;code&gt;docker0&lt;/code&gt;に接続されているネットワーク・インタフェースが表示されます。
(&lt;code&gt;brctl&lt;/code&gt;は&lt;code&gt;bridge-utils&lt;/code&gt;パッケージに含まれています）&lt;/p&gt;

&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;[kenji@arch ~]$ brctl show
bridge name     bridge id               STP enabled     interfaces
docker0         8000.0242fb28ee2d       no              veth269de4e
                                                        veth87e3222
                                                        vethbcff718&lt;/pre&gt;


&lt;p&gt;そしてこれがインタフェースを&lt;code&gt;grep veth&lt;/code&gt;してみた結果です。たしかにこのネットワーク・インタフェースは存在するようですね。&lt;/p&gt;

&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;[kenji@arch ~]$ ip addr show | grep veth
9: vethbcff718@if8: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc noqueue master docker0 state UP group default 
11: veth269de4e@if10: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc noqueue master docker0 state UP group default 
15: veth87e3222@if14: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc noqueue master docker0 state UP group default &lt;/pre&gt;


&lt;p&gt;　&lt;br/&gt;
ちなみにDocker Containerをすべて落としてみるとこうなります。&lt;code&gt;docker0&lt;/code&gt;には何も接続されていないようですね。&lt;/p&gt;

&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;[kenji@arch ~]$ brctl show
bridge name bridge id       STP enabled interfaces
docker0     8000.0242fb28ee2d   no  &lt;/pre&gt;


&lt;p&gt;さきほど存在したネットワーク・インタフェースもいなくなっています。&lt;/p&gt;

&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;[kenji@arch ~]$ ifconfig | grep veth
[kenji@arch ~]$ 
&lt;/pre&gt;


&lt;p&gt;　&lt;br/&gt;
なるほど。じゃあこのvethXXXがDocker Containerのネットワーク・インタフェースなのか、というとちょっと違うのですが、正確なところを説明する前にそもそもvethって何なのかを説明します。&lt;/p&gt;

&lt;h2&gt;veth&lt;/h2&gt;

&lt;p&gt;vethは &lt;strong&gt;v&lt;/strong&gt;irtual&lt;strong&gt;eth&lt;/strong&gt;ernet device、つまり仮想的なネットワーク・インタフェースです。&lt;br/&gt;
vethは常にペアで作成され、このペア間で通信が行えます。&lt;br/&gt;
(vethペアの片割れをveth peerといいます)&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/k/kenji-suzuki/20170707/20170707192057.png&quot; alt=&quot;f:id:kenji-suzuki:20170707192057p:plain&quot; title=&quot;f:id:kenji-suzuki:20170707192057p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;　&lt;br/&gt;
vethペアは次のようなコマンドで作成できます。&lt;/p&gt;

&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;[kenji@arch ~]$ sudo ip link add name veth1 type veth peer name veth1-peer&lt;/pre&gt;


&lt;p&gt;&lt;code&gt;ip link show&lt;/code&gt;で確認してみると、vethのペアが作成されていることが分かります。&lt;/p&gt;

&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;[kenji@arch ~]$ ip link show | grep veth
18: veth1-peer@veth1: &amp;lt;BROADCAST,MULTICAST,M-DOWN&amp;gt; mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000
19: veth1@veth1-peer: &amp;lt;BROADCAST,MULTICAST,M-DOWN&amp;gt; mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000&lt;/pre&gt;


&lt;p&gt;　&lt;br/&gt;
さて、ここで一つの疑問が生じます。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;「Docker Containerを起動したときに作成されるvethって一つじゃね？」&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Containerの起動後にネットワーク・インタフェースを表示してみると、たしかにそう見えます。&lt;/p&gt;

&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;[kenji@arch ~]$ docker ps --format &amp;#34;table {{.ID}} {{.Names}}&amp;#34;
CONTAINER ID NAMES
b71e096208c2 kong
7add408c9775 kong-database

# Containerが2つなので4つvethが表示されるはず？
[kenji@arch ~]$ ip link show | grep veth
17: vethb96b887@if16: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc noqueue master docker0 state UP mode DEFAULT group default 
21: veth9c7e462@if20: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc noqueue master docker0 state UP mode DEFAULT group default &lt;/pre&gt;


&lt;p&gt;　&lt;br/&gt;
この疑問に答えるキーワードが&lt;strong&gt;ネットワーク名前空間&lt;/strong&gt;です。&lt;/p&gt;

&lt;h2&gt;ネットワーク名前空間&lt;/h2&gt;

&lt;p&gt;Dockerのことを勉強すると必ずといっていいほど説明されていますが、Linuxはカーネルが扱う様々なリソースをある単位でまとめて分離する仕組みを持っています。
この仕組みを&lt;a href=&quot;https://linuxjm.osdn.jp/html/LDP_man-pages/man7/namespaces.7.html&quot;&gt;名前空間&lt;/a&gt;といいます。
分離されたリソースはその名前空間に属するプロセス以外からは直接見えなくなります。&lt;/p&gt;

&lt;p&gt;例えばunshareコマンドでUTS名前空間を新たに作成した場合、その名前空間を作成した側と別のホスト名を持つことができます。&lt;/p&gt;

&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# 1. 名前空間のエントリを表示&lt;/span&gt;
kenji@test1:~$ sudo &lt;span class=&quot;synStatement&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;-l&lt;/span&gt; /proc/*/ns | &lt;span class=&quot;synStatement&quot;&gt;grep&lt;/span&gt; uts | awk &lt;span class=&quot;synStatement&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;{print $11}&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&#39;&lt;/span&gt; | &lt;span class=&quot;synStatement&quot;&gt;sort&lt;/span&gt; | uniq
uts:&lt;span class=&quot;synStatement&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;4026531838&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# 2. UTS名前空間を新たに作成し、その名前空間でbashを実行&lt;/span&gt;
kenji@test1:~$ sudo unshare &lt;span class=&quot;synSpecial&quot;&gt;-u&lt;/span&gt; /bin/bash
root@test1:~# 

&lt;span class=&quot;synComment&quot;&gt;# 1,2 とは別のシェルで名前空間のエントリを表示すると一つ増えてることが分かる&lt;/span&gt;
kenji@test1:~$ sudo &lt;span class=&quot;synStatement&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;-l&lt;/span&gt; /proc/*/ns | &lt;span class=&quot;synStatement&quot;&gt;grep&lt;/span&gt; uts | awk &lt;span class=&quot;synStatement&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;{print $11}&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&#39;&lt;/span&gt; | &lt;span class=&quot;synStatement&quot;&gt;sort&lt;/span&gt; | uniq
uts:&lt;span class=&quot;synStatement&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;4026531838&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;]&lt;/span&gt;
uts:&lt;span class=&quot;synStatement&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;4026532203&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# 1,2 のシェルでホスト名を変更&lt;/span&gt;
root@test1:~# hostname updated-host
root@test1:~# hostname
updated-host

&lt;span class=&quot;synComment&quot;&gt;# 1,2 とは別のシェルでホスト名を表示すると、こちらには上記の変更が反映されないことが分かる&lt;/span&gt;
kenji@test1:~$ hostname
test1
&lt;/pre&gt;


&lt;p&gt;　&lt;/p&gt;

&lt;p&gt;この名前空間には色々種類があるのですが、ネットワークに対する名前空間が&lt;strong&gt;ネットワーク名前空間&lt;/strong&gt;です。&lt;br/&gt;
そして前述のvethペアの片割れは、作成したネットワーク名前空間に移動させることができるのです。&lt;br/&gt;
つまりvethペアによってネットワーク名前空間同士を仮想的なケーブルでつなぐことができます。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/k/kenji-suzuki/20170709/20170709234136.png&quot; alt=&quot;f:id:kenji-suzuki:20170709234136p:plain&quot; title=&quot;f:id:kenji-suzuki:20170709234136p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;移動させたvethは移動元からは見えなくなります。これがDocker Containerのvethの片割れが見えなかった理由です。&lt;br/&gt;
ここまでを踏まえるとDockerのネットワークが次のようになっていることが理解できるでしょう。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/k/kenji-suzuki/20170710/20170710000413.png&quot; alt=&quot;f:id:kenji-suzuki:20170710000413p:plain&quot; title=&quot;f:id:kenji-suzuki:20170710000413p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;更に付け加えると、veth(peer)はDocker Container内ではeth0として見えるようになっています。
またDockerによりveth(peer)にIPアドレスが割り当てられます。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/k/kenji-suzuki/20170710/20170710132020.png&quot; alt=&quot;f:id:kenji-suzuki:20170710132020p:plain&quot; title=&quot;f:id:kenji-suzuki:20170710132020p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;Docker Containerのネットワーク名前空間を参照する&lt;/h2&gt;

&lt;p&gt;ネットワーク名前空間の一覧は&lt;code&gt;ip netns&lt;/code&gt;コマンドで参照でき、&lt;code&gt;ip netns exec ネットワーク名前空間名&lt;/code&gt;コマンドを使うと指定したネットワーク名前空間で任意のコマンドが実行できるのですが、Docker Containerのネットワーク名前空間はDockerにより隠蔽されています。&lt;br/&gt;
しかし以下2つの情報を知っていれば、強引に参照することができます。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Docker Containerのネットワーク名前空間は&lt;code&gt;/proc/Docker ContainerのPID/ns/net&lt;/code&gt;に割り当てられる。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ip netns&lt;/code&gt;コマンドで表示されるネットワーク名前空間は、&lt;code&gt;/var/run/netns&lt;/code&gt;ディレクトリ配下のものである。&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;どういうことかというと、Docker ContainerのPIDを調べてネットワーク名前空間を見つけて、/var/run/netnsへのリンクを貼るのです。&lt;br/&gt;
試してみたいけど面倒くさいという方のためにシェルを用意してあります(&lt;a href=&quot;https://github.com/pujoheadsoft/docker-netns&quot;&gt;github&lt;/a&gt;)。&lt;br/&gt;
プログラムの性質上、実行にroot権限が必要になるので、気になるようでしたら内容をご確認ください。&lt;/p&gt;

&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;git clone https://github.com/pujoheadsoft/docker-netns.git
&lt;span class=&quot;synStatement&quot;&gt;cd&lt;/span&gt; docker-netns
&lt;span class=&quot;synStatement&quot;&gt;chmod&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;+x&lt;/span&gt; docker-netns.sh 

&lt;span class=&quot;synComment&quot;&gt;# 実行例&lt;/span&gt;
~/docker-netns$ sudo ./docker-netns.sh visible
container&lt;span class=&quot;synStatement&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;s network namespace to visible, you can show container&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&#39;&lt;/span&gt;s nemespace by &lt;span class=&quot;synStatement&quot;&gt;[&lt;/span&gt;ip netns&lt;span class=&quot;synStatement&quot;&gt;]&lt;/span&gt; command.
kenji@master:~/docker-netns$ ip netns
bfe34b8a7972
2ec174520fda

&lt;span class=&quot;synComment&quot;&gt;# vethとvethに対応するContainerを表示&lt;/span&gt;
kenji@test1:~/docker-netns$ sudo ./docker-netns.sh showveth
VETH                 CONTAINER ID         NAMES                         
veth2753b2f          51f82f5e9712         /mywordpress_wordpress_1      
vetha334043          4939c68f1740         /mywordpress_db_1  

&lt;span class=&quot;synComment&quot;&gt;# ContainerのIPを表示(リソースはcontainer側のものですが、コマンドはホスト側のものを使えるので、IPを表示するコマンドがないContainerでもIPを表示できます)&lt;/span&gt;
kenji@test1:~/docker-netns$ sudo ./docker-netns.sh showip
CONTAINER ID    IP                                       NAMES
51f82f5e9712    inet 172.18.0.3/&lt;span class=&quot;synConstant&quot;&gt;16&lt;/span&gt; scope global eth0     /mywordpress_wordpress_1
4939c68f1740    inet 172.18.0.2/&lt;span class=&quot;synConstant&quot;&gt;16&lt;/span&gt; scope global eth0     /mywordpress_db_1
&lt;/pre&gt;


&lt;h3&gt;ルーティング&lt;/h3&gt;

&lt;p&gt;Dockerにより、Docker Containerから外部のネットワークに接続できるようIPマスカレードが行われるようなルーティングになっています。&lt;br/&gt;
これはIPテーブルを参照してみると分かります。&lt;/p&gt;

&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;&lt;span class=&quot;synStatement&quot;&gt;[&lt;/span&gt;kenji@arch ~&lt;span class=&quot;synStatement&quot;&gt;]&lt;/span&gt;$ ip addr show | &lt;span class=&quot;synStatement&quot;&gt;grep&lt;/span&gt; docker
&lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;: docker0: &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;NO-CARRIER,BROADCAST,MULTICAST,UP&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt; mtu &lt;span class=&quot;synConstant&quot;&gt;1500&lt;/span&gt; qdisc noqueue state DOWN group default 
    inet 172.17.0.1/&lt;span class=&quot;synConstant&quot;&gt;16&lt;/span&gt; scope global docker0

&lt;span class=&quot;synComment&quot;&gt;# iptablesの情報を参照&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;[&lt;/span&gt;kenji@arch ~&lt;span class=&quot;synStatement&quot;&gt;]&lt;/span&gt;$ sudo iptables-save 
&lt;span class=&quot;synComment&quot;&gt;# Generated by iptables-save v1.6.1 on Mon Jul 10 01:15:10 2017&lt;/span&gt;
*nat
&lt;span class=&quot;synComment&quot;&gt;# --中略--&lt;/span&gt;
-A PREROUTING &lt;span class=&quot;synSpecial&quot;&gt;-m&lt;/span&gt; addrtype &lt;span class=&quot;synSpecial&quot;&gt;--dst-type&lt;/span&gt; LOCAL &lt;span class=&quot;synSpecial&quot;&gt;-j&lt;/span&gt; DOCKER
-A OUTPUT ! &lt;span class=&quot;synSpecial&quot;&gt;-d&lt;/span&gt; 127.0.0.0/&lt;span class=&quot;synConstant&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;-m&lt;/span&gt; addrtype &lt;span class=&quot;synSpecial&quot;&gt;--dst-type&lt;/span&gt; LOCAL &lt;span class=&quot;synSpecial&quot;&gt;-j&lt;/span&gt; DOCKER

&lt;span class=&quot;synComment&quot;&gt;# これがIPマスカレードの部分。Dockerのネットワーク(172.17.0.0/16)かつ、&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# docker0以外のインタフェースからパケットが出力された場合IPマスカレードする&lt;/span&gt;
-A POSTROUTING &lt;span class=&quot;synSpecial&quot;&gt;-s&lt;/span&gt; 172.17.0.0/&lt;span class=&quot;synConstant&quot;&gt;16&lt;/span&gt; ! &lt;span class=&quot;synSpecial&quot;&gt;-o&lt;/span&gt; docker0 &lt;span class=&quot;synSpecial&quot;&gt;-j&lt;/span&gt; MASQUERADE
-A DOCKER &lt;span class=&quot;synSpecial&quot;&gt;-i&lt;/span&gt; docker0 &lt;span class=&quot;synSpecial&quot;&gt;-j&lt;/span&gt; RETURN

COMMIT
&lt;span class=&quot;synComment&quot;&gt;# --中略--&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;これまでの図に加えると、このような感じになりますね。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/k/kenji-suzuki/20170710/20170710131809.png&quot; alt=&quot;f:id:kenji-suzuki:20170710131809p:plain&quot; title=&quot;f:id:kenji-suzuki:20170710131809p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;以上がDockerのネットワークの説明になります。&lt;br/&gt;
Docker Composeを使った場合、bridgeやルーティングはまたこれとは少し違ったものになるのですが、そこは割愛します。&lt;br/&gt;
&lt;a href=&quot;http://tech.uzabase.com/entry/2017/08/23/175813&quot;&gt;次回&lt;/a&gt;は、いよいよマルチホストでのDocker Container間通信の話をします。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;株式会社ユーザベースでは、DockerやDocker関連技術に興味のあるエンジニアを&lt;a href=&quot;https://www.uzabase.com/recruit/occupation/&quot;&gt;大募集中&lt;/a&gt;です！&lt;/p&gt;

&lt;h4&gt;シリーズ&lt;/h4&gt;

&lt;p&gt;第1回: マルチホストでのDocker Container間通信 第1回: Dockerネットワークの基礎 (当記事)&lt;br/&gt;
第2回: &lt;a href=&quot;http://tech.uzabase.com/entry/2017/08/23/175813&quot;&gt;マルチホストでのDocker Container間通信 第2回: Port Forwarding と Overlay Network&lt;/a&gt;&lt;br/&gt;
第3回: &lt;a href=&quot;http://tech.uzabase.com/entry/2017/09/12/164756&quot;&gt;マルチホストでのDocker Container間通信 第3回: Kubernetesのネットワーク(CNI, kube-proxy, kube-dns)&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;iframe frameborder=&#39;0&#39; height=&#39;305px&#39; name=&#39;wantedly_project_widget_114494&#39; scrolling=&#39;no&#39; src=&#39;https://www.wantedly.com/projects/114494/widget&#39; style=&#39;border: none; max-width: 100%; min-width: 240px; width: 540px;&#39;&gt;&lt;/iframe&gt;


&lt;iframe frameborder=&#39;0&#39; height=&#39;305px&#39; name=&#39;wantedly_project_widget_91396&#39; scrolling=&#39;no&#39; src=&#39;https://www.wantedly.com/projects/91396/widget&#39; style=&#39;border: none; max-width: 100%; min-width: 240px; width: 540px;&#39;&gt;&lt;/iframe&gt;


&lt;iframe frameborder=&#39;0&#39; height=&#39;305px&#39; name=&#39;wantedly_project_widget_59258&#39; scrolling=&#39;no&#39; src=&#39;https://www.wantedly.com/projects/59258/widget&#39; style=&#39;border: none; max-width: 100%; min-width: 240px; width: 540px;&#39;&gt;&lt;/iframe&gt;


&lt;iframe frameborder=&#39;0&#39; height=&#39;305px&#39; name=&#39;wantedly_project_widget_48032&#39; scrolling=&#39;no&#39; src=&#39;https://www.wantedly.com/projects/48032/widget&#39; style=&#39;border: none; max-width: 100%; min-width: 240px; width: 540px;&#39;&gt;&lt;/iframe&gt;


&lt;iframe frameborder=&#39;0&#39; height=&#39;305px&#39; name=&#39;wantedly_project_widget_45821&#39; scrolling=&#39;no&#39; src=&#39;https://www.wantedly.com/projects/45821/widget&#39; style=&#39;border: none; max-width: 100%; min-width: 240px; width: 540px;&#39;&gt;&lt;/iframe&gt;

</description>          <pubDate>Mon, 07 Aug 2017 17:24:11 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8599973812277685273</guid>
          
          <enclosure url="https://cdn-ak.f.st-hatena.com/images/fotolife/k/kenji-suzuki/20170707/20170707164743.png" type="image/png" length="0" />
        </item>
      
    
      
      
        <item>
          <title>スタートアップ広報が新規上場するときに気をつけておきたいこと</title>
          <link>http://tech.uzabase.com/entry/2016/12/08/172316</link>          <description>&lt;div&gt;こんにちは、ユーザベースで広報とIRを担当している山田です。2016年10月21日、株式会社ユーザベースは東京証券取引所マザーズに上場しました。&lt;/div&gt;
&lt;div&gt; &lt;/div&gt;
&lt;div&gt;&lt;iframe style=&quot;border: none; overflow: hidden;&quot; src=&quot;https://www.facebook.com/plugins/post.php?href=https%3A%2F%2Fwww.facebook.com%2Fuzabase%2Fposts%2F1264328823599210&amp;amp;width=500&quot; width=&quot;500&quot; height=&quot;539&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;div&gt; &lt;/div&gt;
&lt;div&gt;上場できたのもこれまで支えていただいた皆さまのおかげです……といった形式ばったことは最小限に留めておいて、上場にあたって広報ノウハウがあまり公開されていなくて本気で困ったので、Tech Blogの場を借りて、今後増えてくると思われる上場準備中の企業の広報担当者さんたち向けに&lt;strong&gt;「スタートアップが新規上場（IPO）する際に広報として気をつけておきたいこと」&lt;/strong&gt;をまとめたいと思います。&lt;/div&gt;
&lt;div&gt; &lt;/div&gt;
&lt;div&gt;なおユーザベースのバックオフィスチームには公認会計士の資格を持つメンバーが、ファームを作れるぐらいの人数いるという幸運もあったため、本記事では財務や会計的な側面には触れません。&lt;/div&gt;
&lt;div&gt; &lt;/div&gt;
&lt;h3&gt;上場前&lt;/h3&gt;
&lt;div&gt; &lt;/div&gt;
&lt;div&gt;上場前にできることはそれほどありません。上場承認後に必要になる作業を想像して、それへの情報収集と対策を粛々と進めていきます。&lt;/div&gt;
&lt;div&gt; &lt;/div&gt;
&lt;div&gt;ユーザベースの場合は以下の作業に主にリソースを割きました。&lt;/div&gt;
&lt;div&gt; &lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;目論見書カラーページの制作&lt;/li&gt;
&lt;li&gt;IRページの制作&lt;/li&gt;
&lt;li&gt;上場当日セレモニーの演出&lt;/li&gt;
&lt;li&gt;上場後最初となる決算説明会の準備&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt; &lt;/div&gt;
&lt;div&gt;特に目論見書とIRページについては、上場承認後に投資家との接点になる最重要ポイントです。「私たちが何者であるか」を知っていただいて、会社の何を評価して、株式を保有してほしいかというメッセージが伝わるものにしなければなりません。&lt;/div&gt;
&lt;div&gt; &lt;/div&gt;
&lt;div&gt;会社によって何を知ってほしいかという軸は異なりますが、私たちが伝えたいメッセージは&lt;strong&gt;「経済情報で、世界をかえる」&lt;/strong&gt;というミッションです。このミッションとコーポレートカラーである赤、そして大事にしている&lt;strong&gt;「7つのルール」&lt;/strong&gt;を前面に推し出すことにしました。​&lt;/div&gt;
&lt;div&gt; &lt;/div&gt;
&lt;div&gt;
&lt;p&gt;&lt;img class=&quot;hatena-fotolife&quot; title=&quot;f:id:kiyohero:20161207132340p:plain&quot; src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/k/kiyohero/20161207/20161207132340.png&quot; alt=&quot;f:id:kiyohero:20161207132340p:plain&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;hatena-fotolife&quot; title=&quot;f:id:kiyohero:20161207132352p:plain&quot; src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/k/kiyohero/20161207/20161207132352.png&quot; alt=&quot;f:id:kiyohero:20161207132352p:plain&quot; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;「何を知ってほしいか」は会社によってそれぞれだと思うので、経営陣も交えてしっかり議論した上で、方針を決めるのが良いと思います。&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h3&gt;上場承認〜上場当日&lt;/h3&gt;
&lt;div&gt; &lt;/div&gt;
&lt;div&gt;上場承認が下りたら、いよいよ上場に向けたスパートのはじまりです。顧客、社員、投資家など様々なステークホルダーに適切に情報を届ける必要があります。&lt;/div&gt;
&lt;div&gt; &lt;/div&gt;
&lt;div&gt;まず承認を受けたら、公式情報としてすぐにプレスリリースを出します。ネット上での最速情報としてTDnetのPDFがありますが、テキストベースのフォーマットで自社の情報を発信した方がシェアされやすいと思います。&lt;/div&gt;
&lt;div&gt; &lt;/div&gt;
&lt;div&gt;
&lt;p&gt;&lt;iframe class=&quot;embed-card embed-webcard&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot; title=&quot;東京証券取引所マザーズ市場への新規上場承認に関するお知らせ - 株式会社ユーザベース&quot; src=&quot;//hatenablog-parts.com/embed?url=http%3A%2F%2Fwww.uzabase.com%2Fpress%2Flisting-aproval%2F&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;http://www.uzabase.com/press/listing-aproval/&quot;&gt;www.uzabase.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt; &lt;/div&gt;
&lt;div&gt;上場当日ももちろんプレスリリースを出した方が良いです。上場当日はセレモニー等の準備でばたばたしていますが、場が開く9時より前には公開できていると良いと思います。&lt;/div&gt;
&lt;div&gt; &lt;/div&gt;
&lt;div&gt;
&lt;p&gt;&lt;iframe class=&quot;embed-card embed-webcard&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot; title=&quot;東京証券取引所マザーズ市場上場のお知らせ&quot; src=&quot;//hatenablog-parts.com/embed?url=http%3A%2F%2Fwww.uzabase.com%2Fpress%2Flisting-information%2F&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;http://www.uzabase.com/press/listing-information/&quot;&gt;www.uzabase.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt; &lt;/div&gt;
&lt;div&gt;また同日に、コーポレートサイトのIRページも公開します。（上場日前には公開してはいけません。）&lt;/div&gt;
&lt;div&gt; &lt;/div&gt;
&lt;div&gt;だいたいのコンテンツは有報などから自動で取得されますが、「株主の皆さまへ」といったコンテンツは自社で用意する必要があります。投資家・株主の方々は事業内容や業績のほかに、社長や従業員のキャラクターも重要視されるので、肩肘張ったものではなくて「らしさ」が出るものが良いと思います。ユーザベースの場合は創業メンバー3人からの『3つの約束』として公開しています。&lt;/div&gt;
&lt;div&gt; &lt;/div&gt;
&lt;div&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;strong&gt;株主・投資家の皆様へ 3つの約束&lt;/strong&gt;&lt;/div&gt;
&lt;div&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;「経済情報で、世界をかえる」このビジョンの達成に向けて忠実に行動します。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;良い時も悪い時も、正直に話します。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;有言実行を積み重ねる事で、信頼を獲得していきます。&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;&lt;iframe class=&quot;embed-card embed-webcard&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot; title=&quot;株主・投資家の皆様へ&quot; src=&quot;//hatenablog-parts.com/embed?url=http%3A%2F%2Fwww.uzabase.com%2Fir%2Ftopmessage%2F&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;http://www.uzabase.com/ir/topmessage/&quot;&gt;www.uzabase.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt; &lt;/div&gt;
&lt;div&gt;「社員の顔が見えることが重要」というのは、プロピッカーでもあるレオス・キャピタルワークス 藤野英人さんの記事を参考にしました。この分析については自分の感覚とも合致していてすごく納得感がありました。現在進めているコーポレートサイトリニューアルでも、もっと社員の人となりが見えるものにしていく予定です。&lt;/div&gt;
&lt;div&gt; &lt;/div&gt;
&lt;div&gt;
&lt;p&gt;&lt;iframe class=&quot;embed-card embed-webcard&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot; title=&quot;藤野英人さん「投資家は社員の『顔』が見える企業の株を買いたい」 | 広報会議 2014年11月号&quot; src=&quot;//hatenablog-parts.com/embed?url=http%3A%2F%2Fmag.sendenkaigi.com%2Fkouhou%2F201411%2Foffice-pr%2F003567.php&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;http://mag.sendenkaigi.com/kouhou/201411/office-pr/003567.php&quot;&gt;mag.sendenkaigi.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt; &lt;/div&gt;
&lt;div&gt;ちなみに承認発表日は想定以上のトラフィックが来たため、一時的にサイトにアクセスいただけない状態が発生してしまいました。大変嬉しい悲鳴ではありますが、同時にとても恥ずかしいことでもあるので、サイトがダウンする可能性は最大限排除しておきましょう。&lt;/div&gt;
&lt;div&gt; &lt;/div&gt;
&lt;h3&gt;上場後&lt;/h3&gt;
&lt;div&gt; &lt;/div&gt;
&lt;div&gt;上場後はより広報的な技量が求められます。上場に伴って増えるメディアや投資家からの面談依頼、兜倶楽部とのお付き合い、適時開示を含めた投資家とのコミュニケーション等々……。&lt;/div&gt;
&lt;div&gt; &lt;/div&gt;
&lt;div&gt;変わらずにあるのは「どうコミュニケーションすれば自社のファンになってくれるのか」という視点です。ユーザベースは少し変わったかたちのIRとして、NewsPicksを使った個人投資家向けIR活動を開始しています。&lt;/div&gt;
&lt;div&gt; &lt;/div&gt;
&lt;div&gt;
&lt;p&gt;&lt;iframe class=&quot;embed-card embed-webcard&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot; title=&quot;【ユーザベース】最新決算と僕たちのすべて&quot; src=&quot;//hatenablog-parts.com/embed?url=https%3A%2F%2Fnewspicks.com%2Fnews%2F1853866%3Fref%3Duser_9317&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://newspicks.com/news/1853866?ref=user_9317&quot;&gt;newspicks.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;&lt;iframe class=&quot;embed-card embed-webcard&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot; title=&quot;ユーザベース、個人投資家の皆さまに向けたスマホ時代のIRを開始&quot; src=&quot;//hatenablog-parts.com/embed?url=http%3A%2F%2Fwww.uzabase.com%2Fpress%2Fuzabse-ir-privateinvestors%2F&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;http://www.uzabase.com/press/uzabse-ir-privateinvestors/&quot;&gt;www.uzabase.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;&lt;iframe class=&quot;embed-card embed-webcard&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot; title=&quot;【採録】「BtoBとBtoCを持っているのが強み」 ユーザベース個人投資家説明会リポート 前編&quot; src=&quot;//hatenablog-parts.com/embed?url=https%3A%2F%2Fnewspicks.com%2Fnews%2F1932305%3Fref%3Duser_291503&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://newspicks.com/news/1932305?ref=user_291503&quot;&gt;newspicks.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;&lt;iframe class=&quot;embed-card embed-webcard&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot; title=&quot;【採録】「メディアは上場すべきか」「株主優待にNewsPicks有料オプションを」などに回答 ユーザベース個人投資家説明会 後編&quot; src=&quot;//hatenablog-parts.com/embed?url=https%3A%2F%2Fnewspicks.com%2Fnews%2F1932352%3Fref%3Duser_291503&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://newspicks.com/news/1932352?ref=user_291503&quot;&gt;newspicks.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt; &lt;/div&gt;
&lt;div&gt;上場というのは会社が変化する極めて大事なタイミングですが、これを活かして「より強い会社をつくる」きっかけにできると良いなと、上場を経て感じました。この記事がこれから上場される皆さまの参考になれば幸いです。&lt;/div&gt;
&lt;div&gt; &lt;/div&gt;
&lt;p&gt;（この記事は『&lt;a href=&quot;http://www.adventar.org/calendars/1929&quot;&gt;広報マーケティング Advent Calendar 2016 - Adventar&lt;/a&gt;』の8日目の記事です。広報・マーケティング界隈の方のご参加をお待ちしています！） &lt;/p&gt;</description>          <pubDate>Thu, 08 Dec 2016 17:23:16 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/10328749687197977231</guid>
          
          <enclosure url="http://cdn-ak.f.st-hatena.com/images/fotolife/k/kiyohero/20161208/20161208172654.png?1481185638" type="" length="0" />
        </item>
      
    
      
      
        <item>
          <title>CI環境 に関する Tips を共有する勉強会「Web Tech Tokyo #2」を開催しました</title>
          <link>http://tech.uzabase.com/entry/2016/12/05/101546</link>          <description>&lt;p&gt;こんにちは。ニューズピックスの大川です。2016年11月14日に、Web系エンジニア同士でTipsを共有しあう交流会 「Web Tech Tokyo」の第2回目をユーザベースで開催しました。&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;//hatenablog-parts.com/embed?url=https%3A%2F%2Fweb-tech-tokyo.connpass.com%2Fevent%2F43773%2F&quot; title=&quot;Web Tech Tokyo #2（CI環境 Tips 共有会） (2016/11/14 19:30〜)&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://web-tech-tokyo.connpass.com/event/43773/&quot;&gt;web-tech-tokyo.connpass.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;このイベントでは、参加者全員がWeb系の開発Tipsを発表し、楽しく議論します。&lt;/p&gt;

&lt;p&gt;第2回目は &lt;b&gt;CI環境 をテーマ&lt;/b&gt;に、日頃困っていることや成果を出したことについて発表し、交流する場にしました。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/h/horobetsu613/20161128/20161128162435.jpg&quot; alt=&quot;f:id:horobetsu613:20161128162435j:plain&quot; title=&quot;f:id:horobetsu613:20161128162435j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;
&lt;span style=&quot;font-size: 80%&quot;&gt;フリードリンクと軽食を楽しみつつ、和気あいあいと進行します&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://tech.uzabase.com/entry/2016/10/28/133638&quot;&gt;Web Tech Tkyo #1&lt;/a&gt;では12名の方に発表していただき、内容がとてもボリュームのある回でした。&lt;/p&gt;

&lt;p&gt;今回はもう少し人数を減らして募集枠を6名とし、「&lt;b&gt;Jenkinsで自動的に画面キャプチャする方法&lt;/b&gt;」「&lt;b&gt;テスト文化のない組織にテストを導入した話&lt;/b&gt;」など実践的なお話しを発表していただきました。&lt;/p&gt;

&lt;p&gt;どの方も熱心に CI環境 に取り組まれているので、かなり収穫が多く密度の高い勉強会になったと思います。シェアいただいたスライドも下記に投稿しておりますので是非ご覧ください。ざっくばらんに話す中で、様々なおもしろい情報を交換するため、その場にいた方が間違いなくおもしろいです！&lt;/p&gt;

&lt;p&gt;第3回目は2017年の年明けに開催を予定しております。テーマはまだ決めていませんが、「&lt;b&gt;ユーザー行動ログ解析の実際&lt;/b&gt;」や「&lt;b&gt;どの Javascript Framework を選ぶか&lt;/b&gt;」のようなテーマで行おうかと考えております。&lt;/p&gt;

&lt;p&gt;4〜6名程度の発表者枠に、数名の聴講枠を追加するつもりです。次回もconnpassのページで告知しますので、ご興味のある方は是非ご参加くださいませ！&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;//hatenablog-parts.com/embed?url=https%3A%2F%2Fweb-tech-tokyo.connpass.com%2F&quot; title=&quot;Web Tech Tokyo&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://web-tech-tokyo.connpass.com/&quot;&gt;web-tech-tokyo.connpass.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;h5&gt;公開スライド&lt;/h5&gt;

&lt;p&gt;&lt;iframe allowfullscreen=&quot;true&quot; allowtransparency=&quot;true&quot; frameborder=&quot;0&quot; height=&quot;463&quot; id=&quot;talk_frame_370405&quot; mozallowfullscreen=&quot;true&quot; src=&quot;//speakerdeck.com/player/fb1579ae2f814609a3183ce52d26fe80&quot; style=&quot;border:0; padding:0; margin:0; background:transparent;&quot; webkitallowfullscreen=&quot;true&quot; width=&quot;710&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://speakerdeck.com/feb0223/jenkinsdewebhua-mian-kiyaputiya&quot;&gt;speakerdeck.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe allowfullscreen=&quot;true&quot; allowtransparency=&quot;true&quot; frameborder=&quot;0&quot; height=&quot;463&quot; id=&quot;talk_frame_369510&quot; mozallowfullscreen=&quot;true&quot; src=&quot;//speakerdeck.com/player/e2f66649a9094d7ea7506d2c8fd98cd8&quot; style=&quot;border:0; padding:0; margin:0; background:transparent;&quot; webkitallowfullscreen=&quot;true&quot; width=&quot;710&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://speakerdeck.com/leko/rekasinakai-fa-xian-chang-niutworu-reteciwodao-ru-sitahua&quot;&gt;speakerdeck.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;https://www.slideshare.net/slideshow/embed_code/key/iDvLLUMnVrhafF&quot; width=&quot;427&quot; height=&quot;356&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; style=&quot;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&quot; allowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&quot;margin-bottom:5px&quot;&gt; &lt;strong&gt; &lt;a href=&quot;https://www.slideshare.net/toshihumianan/gcpci&quot; title=&quot;GCPでCI環境を構築する&quot; target=&quot;_blank&quot;&gt;GCPでCI環境を構築する&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://www.slideshare.net/toshihumianan&quot;&gt;Toshihumi Anan&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;http://www.slideshare.net/toshihumianan/gcpci&quot;&gt;www.slideshare.net&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
</description>          <pubDate>Mon, 05 Dec 2016 10:15:46 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/10328749687196383456</guid>
          
          <enclosure url="https://cdn-ak.f.st-hatena.com/images/fotolife/h/horobetsu613/20161128/20161128162435.jpg" type="image/jpeg" length="0" />
        </item>
      
    
      
      
        <item>
          <title>Docker に関する Tips を共有する勉強会「Web Tech Tokyo #1」を開催しました</title>
          <link>http://tech.uzabase.com/entry/2016/10/28/133638</link>          <description>&lt;p&gt;こんにちは。ニューズピックスの大川です。先日、&lt;b&gt;WebTechTokyo&lt;/b&gt;というイベントの第1回目をユーザベースオフィスで開催しました。&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;//hatenablog-parts.com/embed?url=http%3A%2F%2Fweb-tech-tokyo.connpass.com%2Fevent%2F40548%2F&quot; title=&quot;Web Tech Tokyo #1（Docker Tips 共有会） (2016/10/12 19:30〜)&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;http://web-tech-tokyo.connpass.com/event/40548/&quot;&gt;web-tech-tokyo.connpass.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;このイベントでは、参加者全員がWeb系の開発Tipsを発表し、楽しく議論します。&lt;/p&gt;

&lt;p&gt;第1回目は Docker をテーマに、日頃困っていることや成果を出したことについて発表し、議論し合う場にしました。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/h/horobetsu613/20161027/20161027102203.jpg&quot; alt=&quot;f:id:horobetsu613:20161027102203j:plain&quot; title=&quot;f:id:horobetsu613:20161027102203j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;
&lt;span style=&quot;font-size: 80%&quot;&gt;会場の様子&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;全員に発表してもらうのは初の試みだったので、ハードルが高すぎて人が集まらないのではないかと不安でしたが、とてもありがたいことに12名の方に参加していただきました！&lt;/p&gt;

&lt;p&gt;イベントの開催については何回も経験がありますが、全員が無遅刻無欠席という素晴らしい状況は初めてでした。時間を無駄にすることもなく、熱量をもって発表・議論できたことがとても嬉しかったです。&lt;/p&gt;

&lt;p&gt;みなさんにたくさんの資料を共有いただきましたので、この記事の最後で是非ご覧ください。&lt;/p&gt;

&lt;p&gt;他にも、残念ながら非公開ですが、「host machine も registry も jenkins も相次いで disk full になった話」「フロントエンドのエンジニアがひとりで環境構築するまでの話」などなど、たくさんの楽しい発表をしていただきました。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/h/horobetsu613/20161027/20161027104632.jpg&quot; alt=&quot;f:id:horobetsu613:20161027104632j:plain&quot; title=&quot;f:id:horobetsu613:20161027104632j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;
&lt;span style=&quot;font-size: 80%&quot;&gt;ビールと軽食をつまみつつ、穏やかな雰囲気で進行しました&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;今回の反省点としては、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;みなさん、あまりお酒を飲まないのでソフトドリンクを充実させた方が良かった&lt;/li&gt;
&lt;li&gt;ピザ・軽食が少し足りなかった&lt;/li&gt;
&lt;li&gt;議論（交流）する時間をもっと取りたかった&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;などがあったなと思っておりますので、これは次回必ず改善します！&lt;/p&gt;

&lt;p&gt;&lt;b&gt;第2回は 11/14（月）&lt;/b&gt; を予定しております。&lt;b&gt;テーマは、「CI環境」&lt;/b&gt;です。&lt;/p&gt;

&lt;p&gt;すこし範囲が大きいテーマですが、「ビルド」「デプロイ」「テスト」などの自動化に関して、みなさんがどうしているか、何に困っているか、どういうツールを導入しているか、などなどを発表・議論していけたらと思っています。&lt;/p&gt;

&lt;p&gt;connpassのページで告知しますので、ご興味のある方は是非ご参加ください！&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;//hatenablog-parts.com/embed?url=http%3A%2F%2Fweb-tech-tokyo.connpass.com%2F&quot; title=&quot;Web Tech Tokyo&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;http://web-tech-tokyo.connpass.com/&quot;&gt;web-tech-tokyo.connpass.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;h5&gt;公開された資料&lt;/h5&gt;

&lt;p&gt;&lt;iframe allowfullscreen=&quot;true&quot; allowtransparency=&quot;true&quot; frameborder=&quot;0&quot; height=&quot;463&quot; id=&quot;talk_frame_363274&quot; mozallowfullscreen=&quot;true&quot; src=&quot;//speakerdeck.com/player/15b4797783ce4e1b8823400cf0cd776c&quot; style=&quot;border:0; padding:0; margin:0; background:transparent;&quot; webkitallowfullscreen=&quot;true&quot; width=&quot;710&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://speakerdeck.com/kotatsu360/docker-with-packer&quot;&gt;speakerdeck.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe allowfullscreen=&quot;true&quot; allowtransparency=&quot;true&quot; frameborder=&quot;0&quot; height=&quot;596&quot; id=&quot;talk_frame_363199&quot; mozallowfullscreen=&quot;true&quot; src=&quot;//speakerdeck.com/player/5492fd03398548edb3ed0466c9665bb3&quot; style=&quot;border:0; padding:0; margin:0; background:transparent;&quot; webkitallowfullscreen=&quot;true&quot; width=&quot;710&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://speakerdeck.com/y13i/alpine-linux-falsesusume&quot;&gt;speakerdeck.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe allowfullscreen=&quot;true&quot; allowtransparency=&quot;true&quot; frameborder=&quot;0&quot; height=&quot;596&quot; id=&quot;talk_frame_363267&quot; mozallowfullscreen=&quot;true&quot; src=&quot;//speakerdeck.com/player/f381e1707b224583b39239cf152736c2&quot; style=&quot;border:0; padding:0; margin:0; background:transparent;&quot; webkitallowfullscreen=&quot;true&quot; width=&quot;710&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://speakerdeck.com/himaoka/sysdigshi-ouze-kontenaziyanakutemo&quot;&gt;speakerdeck.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe allowfullscreen=&quot;true&quot; allowtransparency=&quot;true&quot; frameborder=&quot;0&quot; height=&quot;463&quot; id=&quot;talk_frame_363211&quot; mozallowfullscreen=&quot;true&quot; src=&quot;//speakerdeck.com/player/99f5a025bdb546449c14cf4ae0c4f6ad&quot; style=&quot;border:0; padding:0; margin:0; background:transparent;&quot; webkitallowfullscreen=&quot;true&quot; width=&quot;710&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://speakerdeck.com/dtan4/web-tech-tokyo-number-1&quot;&gt;speakerdeck.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe allowfullscreen=&quot;true&quot; allowtransparency=&quot;true&quot; frameborder=&quot;0&quot; height=&quot;463&quot; id=&quot;talk_frame_363130&quot; mozallowfullscreen=&quot;true&quot; src=&quot;//speakerdeck.com/player/e86eec55af364e4181be00f9881e802d&quot; style=&quot;border:0; padding:0; margin:0; background:transparent;&quot; webkitallowfullscreen=&quot;true&quot; width=&quot;710&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://speakerdeck.com/hoshinotsuyoshi/hatutichu-li-tehakowoshi-uhua&quot;&gt;speakerdeck.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
</description>          <pubDate>Fri, 28 Oct 2016 13:36:38 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/10328749687191490863</guid>
          
          <enclosure url="https://cdn-ak.f.st-hatena.com/images/fotolife/h/horobetsu613/20161027/20161027102203.jpg" type="image/jpeg" length="0" />
        </item>
      
    
      
      
        <item>
          <title>エンジニア向けMeetupイベントレポート　第4回：『大規模サービスを支えるインフラ』</title>
          <link>http://tech.uzabase.com/entry/2016/07/21/102954</link>          <description>&lt;p&gt;こんにちは！SPEEDA Techチームの清水です。&lt;br&gt;
&lt;br&gt;
毎月開催してきたユーザベース Meetupも、ついに第4回を数えました。&lt;br&gt;
回を重ねていくうちにノウハウも溜まってきております。&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;開催内容：『大規模サービスを支えるインフラ』&lt;/h3&gt;

&lt;p&gt;&lt;iframe src=&quot;//hatenablog-parts.com/embed?url=http%3A%2F%2Fuzabase-meetup.connpass.com%2Fevent%2F33709%2F&quot; title=&quot;UZABASE Meetup#4 〜大規模サービスを支えるインフラ〜 (2016/07/07 19:30〜)&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;http://uzabase-meetup.connpass.com/event/33709/&quot;&gt;uzabase-meetup.connpass.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;今回はNewsPicks CTOの杉浦が司会を務めました。
ぜ、ぜんぜん滑ってなんてないんだからね！
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/k/kaonash/20160719/20160719094340.jpg&quot; alt=&quot;f:id:kaonash:20160719094340j:plain&quot; title=&quot;f:id:kaonash:20160719094340j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;さて、第3回に引き続き、今回も外部からスペシャルゲストをお招きいたしました。&lt;br&gt;
ファッションアプリiQONを開発するVASILYさんのインフラエンジニアを担当している光野さんにご登壇いただきました。&lt;br&gt;
実はVASILYさんは、ユーザベースが入っているビルの下の階にオフィスを構えているというご近所さん。そのご縁もあって時折エンジニア同士の交流をしており、今回も登壇をお願いいたしました。
&lt;br&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/k/kaonash/20160719/20160719094402.jpg&quot; alt=&quot;f:id:kaonash:20160719094402j:plain&quot; title=&quot;f:id:kaonash:20160719094402j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;内容はPackerやChefを活用して開発環境と本番環境を同じVMイメージから一括作成するというもの。自動化素晴らしい。&lt;br&gt;
&lt;iframe allowfullscreen=&quot;true&quot; allowtransparency=&quot;true&quot; frameborder=&quot;0&quot; height=&quot;463&quot; id=&quot;talk_frame_350631&quot; mozallowfullscreen=&quot;true&quot; src=&quot;//speakerdeck.com/player/3f0048e00cb2495ab5920b139bd6547a&quot; style=&quot;border:0; padding:0; margin:0; background:transparent;&quot; webkitallowfullscreen=&quot;true&quot; width=&quot;710&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://speakerdeck.com/kotatsu360/create-prod-and-dev-vm-image-atst-by-packer&quot;&gt;speakerdeck.com&lt;/a&gt;&lt;/cite&gt;
以前、Vasilyさんの他の社員の方のプレゼンを見た時にも感じましたが、みなさんプレゼンがうまい！
&lt;br&gt;
ユーザベースも魅力的なプレゼンが出来るように頑張らねばと刺激をいただきました。&lt;br&gt;
&lt;br&gt;
ユーザベースからも、それぞれSPEEDAとNewsPicksでインフラを担当しているエンジニアが登壇いたしました。&lt;br&gt;
SPEEDAはオンプレ、NewsPicksはAWSを使用しているため、お互い異なるノウハウや悩みがあり、どのように課題を解消しているのかについて発表をしてもらいました。&lt;br&gt;&lt;/p&gt;

&lt;iframe src=&quot;//www.slideshare.net/slideshow/embed_code/key/fPX8utv3Y1LNWc&quot; width=&quot;595&quot; height=&quot;485&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; style=&quot;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&quot; allowfullscreen&gt; &lt;/iframe&gt;


&lt;iframe src=&quot;//www.slideshare.net/slideshow/embed_code/key/kw1X4Ypmukv3xe&quot; width=&quot;595&quot; height=&quot;485&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; style=&quot;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&quot; allowfullscreen&gt; &lt;/iframe&gt;


&lt;p&gt;そしてお決まりのビールとピザで懇親会がスタート！&lt;br&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/k/kaonash/20160719/20160719094416.jpg&quot; alt=&quot;f:id:kaonash:20160719094416j:plain&quot; title=&quot;f:id:kaonash:20160719094416j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;
懇親会では、いつも様々なバックグラウンドをもつ方と交流を深めることができ、大変有意義な時間となっており、今回も非常に実りある時間となりました。&lt;/p&gt;

&lt;h3&gt;今後の予定&lt;/h3&gt;

&lt;p&gt;ユーザベースでは定期的にMeetupイベントを開催しています。&lt;br&gt;
次回は調整中ですが、8月下旬に開催をする予定です。&lt;br&gt;
詳細が決まり次第connpassで募集を開始いたしますので、まだ参加をしたことがない方やリピーターの方も、ぜひ遊びに来てください！&lt;/p&gt;
</description>          <pubDate>Thu, 21 Jul 2016 10:29:54 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/6653812171406238951</guid>
          
          <enclosure url="https://cdn-ak.f.st-hatena.com/images/fotolife/k/kaonash/20160719/20160719094340.jpg" type="image/jpeg" length="0" />
        </item>
      
    
      
      
        <item>
          <title>子育てと仕事を両立できる、ユーザベースでの働き方とは</title>
          <link>http://tech.uzabase.com/entry/2016/07/19/121312</link>          <description>&lt;p&gt;こんにちは、インフラチームの小林です。&lt;/p&gt;

&lt;p&gt;僕は、仕事と子育てを両立させながら働くエンジニアです。本当に両立できるのか、今回はユーザベースでの働き方についてご紹介します。&lt;/p&gt;

&lt;p&gt;我が家は夫婦共働きで、5歳と2歳の娘がいます。&lt;/p&gt;

&lt;p&gt;妻は今年の4月に復職が決まり、次女にも保育園に通ってもらうことになりました。保育園探しは大変で、やっと決まって安心したのもつかの間、1日目から長時間あずかってもらえるわけではないということに気付きました。&lt;/p&gt;

&lt;p&gt;保育園に通うことを慣れてもらうための、「慣らし保育」というものがあったのです。&lt;/p&gt;

&lt;p&gt;この期間中、次女のお迎え時間はお昼過ぎ。近くに親族もいないし、妻は復職します。さあどうしよう。悩んだ末、「僕が在宅勤務をする」という選択肢を選びました。育児・家事も分担制にして、朝は僕が家事や洗濯、登園準備を担当し、夜は妻にバトンタッチすることにしたのです。&lt;/p&gt;

&lt;h4&gt;&lt;b&gt;自由と無責任は違う&lt;/b&gt;&lt;/h4&gt;

&lt;p&gt;僕が在宅勤務という選択をするにあたり、強く印象に残っている代表の梅田の言葉があります。&lt;/p&gt;

&lt;p&gt;「仕事だけの人生ってつまらないよね。プライベートも大事にして、仕事とプライベートを高次元でバランスさせて、互いが原動力となり両輪がしっかりとまわっていく。そんな状態が理想だし、それを実現させるために起業したんだ。だから、生産性の向上をひたすら追及し、みんなが高いパフォーマンスを発揮することによって世界一休みが多い会社にしたい。」&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;http://tech.uzabase.com/embed/2015/01/15/102658&quot; title=&quot;世界一ハッピーでワクワクする会社を目指して ～SPEEDA, NewsPicksを生んだ企業文化～ - UZABASE Tech Blog&quot; class=&quot;embed-card embed-blogcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;http://tech.uzabase.com/entry/2015/01/15/102658&quot;&gt;tech.uzabase.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;もちろん、在宅勤務は休みではありません。会社という場所にとらわれずに働くという選択肢です。だけど、子育てというプライベートを大切にしながら働きたい、そう思ったときに梅田の言葉が背中を押してくれました。&lt;/p&gt;

&lt;p&gt;とはいえ、自分が達成すべき仕事にコミットしなければ、在宅勤務で子育てをするという僕の願いはかないません。きちんと責任を果たしたうえで、望みがかなう。個人的には、この順番を間違えてはいけないと肝に銘じ、在宅勤務でも結果を出すことで、周りも前向きに協力してくれると考えました。&lt;/p&gt;

&lt;h4&gt;&lt;b&gt;チームメンバーに感謝&lt;/b&gt;&lt;/h4&gt;

&lt;p&gt;エンジニアという職業に就いている方は、「いやいや、そうは言っても顔を合わせて仕事をしないと厳しいときもあるでしょ」と思うでしょう。実際、在宅勤務を始めたときは、まさに佳境でした。スケジュールもタイトで、家にいると作業効率も落ちてしまう。&lt;/p&gt;

&lt;p&gt;しかも、僕が在宅勤務になることで、他のメンバーにも仕事の引き継ぎが発生。「これは本当にフェアなのだろうか」という疑問があり、正直、在宅勤務を決めたことへの後ろめたさがありました。&lt;/p&gt;

&lt;p&gt;その複雑な胸の内を、勇気をもってチームメンバーに話したんです。すると、反対どころか「ぜひ在宅勤務をしてください」と応援してくれて。本当に感謝の気持ちでいっぱいでした。&lt;/p&gt;

&lt;p&gt;今後、子育てをするメンバーが増えてきたとき、僕は「大丈夫！僕もそうやってやってきた！」と伝えたい。みんなが胸を張って子育てに向かえるよう、後押しするのが最低限の恩返しだと思っています。&lt;/p&gt;

&lt;h4&gt;&lt;b&gt;育児と仕事の葛藤&lt;/b&gt;&lt;/h4&gt;

&lt;p&gt;そうして、僕の在宅勤務が始まり、育児と仕事の両立という貴重な経験を積むなかで、改めて「子育て」と「時間通りに働くこと」のバランスをとることの難しさを実感しました。&lt;/p&gt;

&lt;p&gt;娘を送り出した後、仕事に集中できたと思えば、あっという間にお迎えの時間。お迎えに行くと、娘は僕の顔を見るなり号泣するので、つきっきりであやさないといけない。やっと寝かしつけたとしても、一緒に寝落ちしてしまうこともしばしば。仕事に集中できる時間が本当に限られてしまったのです。&lt;/p&gt;

&lt;p&gt;育児に「時間」という概念が入ると、急に難易度が上がります。朝のバスの時間、お迎えの時間など、いつも会社で仕事をしていること以外に決められた時間があるのは、想像以上に大変です。&lt;/p&gt;

&lt;p&gt;それに、子ども相手に無駄を省いて効率的に動こうとすれば痛い目をみます。特に次女は、自我が芽生えてきた時期なので、着替えなどを手伝おうとすると「自分でやりたい」と大泣きし、予想以上に時間がかかってしまう。だから、決まった時間にすべてをこなすためには、相当な余裕を持った行動が必要でした。&lt;/p&gt;

&lt;p&gt;こうした経験から、育児をしながら仕事をするには、かなり時間が限られるということが分かりました。子どもたちがいない時間が唯一仕事に集中できる。でもその前後は、まったく時間が取れない。当然、仕事に集中できる時間以外に対応しないといけない仕事もあるので、なかなか大変です。&lt;/p&gt;

&lt;p&gt;もちろん、「もっと仕事をしたい」という気持ちはあります。だけど、僕にとって子育ては同じかそれ以上にやりたいこと。最近では、仕事と家族との時間の切り替えをうまくやることで、メリハリをつけながら働けるようになりました。&lt;/p&gt;

&lt;p&gt;何より、ワークライフバランスとは、仕事とプライベートの陣取り合戦ではなく、お互いに補完し合うものなのだということが分かったのは収穫です。&lt;/p&gt;

&lt;p&gt;ユーザベースという会社は、自分がコミットした仕事を全うし結果を出せば、働く時間も場所も自由です。出社義務もありません。そのような環境だからこそ、仕事とプライベートを高次元でバランスさせて、互いが原動力となり、仕事と育児という両輪をしっかりとまわすことができたのです。&lt;/p&gt;

&lt;p&gt;あのとき、僕が在宅勤務をするという選択をして本当によかった。&lt;/p&gt;

&lt;p&gt;人生は一度きりです。仕事もプライベートも両立させてこそ、豊かな人生になるのではないかと思います。最初は大変でしたが、学びも多く、毎日出社しているだけではわからない世界も知りました。だから、少しでも興味を持ってくれたなら、ユーザベースに遊びに来て欲しい。ぜひ一緒に働いてみませんか？&lt;/p&gt;

&lt;p&gt;応募に関する詳細はこちら：www.wantedly.com
&lt;iframe src=&quot;//hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.wantedly.com%2Fprojects%2F59258&quot; title=&quot;世界に通じるビジネス基盤のインフラを支えたい方、募集中！ by 株式会社ユーザベース&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://www.wantedly.com/projects/59258&quot;&gt;www.wantedly.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
</description>          <pubDate>Tue, 19 Jul 2016 12:13:12 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/6653812171404145835</guid>
          
          <enclosure url="http://cdn.mogile.archive.st-hatena.com/v1/image/uzabase/302456199552088609.png" type="image/png" length="0" />
        </item>
      
    
      
      
        <item>
          <title>エンジニア向けMeetupイベントレポート　第3回：『チームの生産性を向上させる』</title>
          <link>http://tech.uzabase.com/entry/2016/07/01/131328</link>          <description>&lt;p&gt;SPEEDA Techチームの清水です。&lt;br&gt;
&lt;br&gt;
連日のユーザベースMeetupレポート、第3弾です。(連日更新しているのは今まで更新をさぼっていたからですごめんなさい)&lt;br&gt;
第1回、第2回レポートはこちら↓
&lt;iframe src=&quot;http://tech.uzabase.com/embed/2016/06/29/024236&quot; title=&quot;エンジニア向けMeetupイベントレポート　第1回：『NewsPicks/SPEEDA「高速」成長の秘密』 - UZABASE Tech Blog&quot; class=&quot;embed-card embed-blogcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;http://tech.uzabase.com/entry/2016/06/29/024236&quot;&gt;tech.uzabase.com&lt;/a&gt;&lt;/cite&gt;
&lt;iframe src=&quot;http://tech.uzabase.com/embed/2016/06/30/100159&quot; title=&quot;エンジニア向けMeetupイベントレポート　第2回：『Java開発最前線』 - UZABASE Tech Blog&quot; class=&quot;embed-card embed-blogcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;http://tech.uzabase.com/entry/2016/06/30/100159&quot;&gt;tech.uzabase.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;h3&gt;開催内容：『チームの生産性を向上させる』&lt;/h3&gt;

&lt;p&gt;今回のテーマは「チームの生産性を向上させる」です。&lt;br&gt;
&lt;iframe src=&quot;//hatenablog-parts.com/embed?url=http%3A%2F%2Fuzabase-meetup.connpass.com%2Fevent%2F31833%2F&quot; title=&quot;UZABASE Meetup#3 〜チームの生産性を向上させる〜 (2016/06/02 19:30〜)&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;http://uzabase-meetup.connpass.com/event/31833/&quot;&gt;uzabase-meetup.connpass.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;第3回では、初の試みとして社外から登壇者をお招きしました。&lt;br&gt;
ライブ共有型スポーツニュースアプリ「Player!」を開発するスタートアップ、ookamiさんよりCTOの中村さんをお招きして、Githubを中心とした「Player!」の開発手法についてお話いただきました。&lt;br&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/k/kaonash/20160624/20160624170647.jpg&quot; alt=&quot;f:id:kaonash:20160624170647j:plain&quot; title=&quot;f:id:kaonash:20160624170647j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;script async class=&quot;speakerdeck-embed&quot; data-id=&quot;e40ac595793c416d912c5d2cebae119f&quot; data-ratio=&quot;1.77777777777778&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;


&lt;p&gt;その他にも弊社エンジニアからユーザベースでのチーム開発の進め方やSlackを用いたChatopsの発表も行い、生産性向上への取り組みについて熱く語ってもらいました。&lt;br&gt;
参加者の方々もいつも以上にたくさんの質問を登壇者に向けて投げかけていたのが印象的でした。&lt;br&gt;&lt;/p&gt;

&lt;iframe src=&quot;//www.slideshare.net/slideshow/embed_code/key/gVvievLR4IFaSx&quot; width=&quot;595&quot; height=&quot;485&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; style=&quot;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&quot; allowfullscreen&gt; &lt;/iframe&gt;


&lt;iframe src=&quot;//www.slideshare.net/slideshow/embed_code/key/d76D0f1WLzgtW&quot; width=&quot;595&quot; height=&quot;485&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; style=&quot;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&quot; allowfullscreen&gt; &lt;/iframe&gt;


&lt;h3&gt;発表後のお楽しみ&lt;/h3&gt;

&lt;p&gt;そして懇親会。
お決まりのピザ&amp;amp;エビスビールです。&lt;br&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/k/kaonash/20160701/20160701130952.jpg&quot; alt=&quot;f:id:kaonash:20160701130952j:plain&quot; title=&quot;f:id:kaonash:20160701130952j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;
&lt;br&gt;
終了後には運営に協力してくれたメンバーで記念撮影。ユーザベースTシャツで統一してみました。&lt;br&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/k/kaonash/20160701/20160701131001.jpg&quot; alt=&quot;f:id:kaonash:20160701131001j:plain&quot; title=&quot;f:id:kaonash:20160701131001j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;次回告知&lt;/h3&gt;

&lt;p&gt;第4回は7月7日の七夕に行います。テーマは「大規模サービスを支えるインフラ」です。&lt;br&gt;
&lt;iframe src=&quot;//hatenablog-parts.com/embed?url=http%3A%2F%2Fuzabase-meetup.connpass.com%2Fevent%2F33709%2F&quot; title=&quot;UZABASE Meetup#4 〜大規模サービスを支えるインフラ〜 (2016/07/07 19:30〜)&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;http://uzabase-meetup.connpass.com/event/33709/&quot;&gt;uzabase-meetup.connpass.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;恵比寿で皆さんとお会いできるのを楽しみにしています！&lt;/p&gt;
</description>          <pubDate>Fri, 01 Jul 2016 13:13:28 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/10328537792370971084</guid>
          
          <enclosure url="https://cdn-ak.f.st-hatena.com/images/fotolife/k/kaonash/20160624/20160624170647.jpg" type="image/jpeg" length="0" />
        </item>
      
    
      
      
        <item>
          <title>エンジニア向けMeetupイベントレポート　第2回：『Java開発最前線』</title>
          <link>http://tech.uzabase.com/entry/2016/06/30/100159</link>          <description>&lt;p&gt;SPEEDA Techチームの清水です。&lt;br&gt;
&lt;br&gt;
先日レポートいたしましたユーザベースMeetup、第2回目のレポートをお届けします。&lt;br&gt;
第1回レポートはこちら↓
&lt;iframe src=&quot;http://tech.uzabase.com/embed/2016/06/29/024236&quot; title=&quot;エンジニア向けMeetupイベントレポート　第1回：『NewsPicks/SPEEDA「高速」成長の秘密』 - UZABASE Tech Blog&quot; class=&quot;embed-card embed-blogcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;http://tech.uzabase.com/entry/2016/06/29/024236&quot;&gt;tech.uzabase.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;h3&gt;開催内容：『Java開発最前線』&lt;/h3&gt;

&lt;p&gt;第1回目Meetup開催の1ヶ月後、ユーザベースのメイン開発言語であるJavaをテーマとして第2回を開催しました。&lt;br&gt;
&lt;iframe src=&quot;//hatenablog-parts.com/embed?url=http%3A%2F%2Fuzabase-meetup.connpass.com%2Fevent%2F29952%2F&quot; title=&quot;Java開発最前線 - UZABASE Meetup#2 (2016/04/28 19:30〜)&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;http://uzabase-meetup.connpass.com/event/29952/&quot;&gt;uzabase-meetup.connpass.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;第2回目も大盛況で、前回から応募枠を大幅に増やしたにも関わらず、すぐに満員となりました。ありがとうございます！&lt;br&gt;
ユーザベースでは開発に使用するJavaのバージョンはすべて最新のJava8に更新済みで、その中で最新の機能をどのように活用しているかという点にスポットをあてた発表となりました。&lt;br&gt;
また、もともとRubyをこよなく愛していた弊社エンジニアが、いかにJavaを(も？)愛するようになったかという発表もあり、これもなかなか興味深い内容でした。&lt;br&gt;&lt;/p&gt;

&lt;iframe src=&quot;//www.slideshare.net/slideshow/embed_code/key/5Nh2q6rfFcl6o7&quot; width=&quot;595&quot; height=&quot;485&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; style=&quot;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&quot; allowfullscreen&gt; &lt;/iframe&gt;


&lt;script async class=&quot;speakerdeck-embed&quot; data-id=&quot;61841c27732f4659b88cc3f8837a26c3&quot; data-ratio=&quot;1.77777777777778&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;


&lt;iframe src=&quot;//www.slideshare.net/slideshow/embed_code/key/BOpFRufiWrU2XS&quot; width=&quot;595&quot; height=&quot;485&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; style=&quot;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&quot; allowfullscreen&gt; &lt;/iframe&gt;


&lt;p&gt;第1回の「ちょっと発表が多すぎて疲れるかも」という反省をいかし、今回から発表枠は基本3つまでというスタイルにしました。&lt;br&gt;
終わった後はピザとビールで乾杯！(そして写真を撮り忘れる・・・)&lt;br&gt;
ご参加頂いた方、ありがとうございました！&lt;/p&gt;

&lt;h3&gt;今後の予定&lt;/h3&gt;

&lt;p&gt;前回のレポートでもお伝えしましたが、ユーザベースでは定期的にMeetupイベントを開催しています。&lt;br&gt;
次回は7月7日の七夕、「大規模サービスを支えるインフラ」というテーマで開催します！&lt;br&gt;
&lt;iframe src=&quot;//hatenablog-parts.com/embed?url=http%3A%2F%2Fuzabase-meetup.connpass.com%2Fevent%2F33709%2F&quot; title=&quot;UZABASE Meetup#4 〜大規模サービスを支えるインフラ〜 (2016/07/07 19:30〜)&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;http://uzabase-meetup.connpass.com/event/33709/&quot;&gt;uzabase-meetup.connpass.com&lt;/a&gt;&lt;/cite&gt;
6月30日現在、すでに枠は埋まっていますが、まだいけるかも・・・ぜひお気軽に参加ボタンを押してください！&lt;/p&gt;
</description>          <pubDate>Thu, 30 Jun 2016 10:01:59 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/6653812171403193024</guid>
          
          <enclosure url="https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png" type="image/png" length="0" />
        </item>
      
    
      
      
        <item>
          <title>エンジニア向けMeetupイベントレポート　第1回：『NewsPicks/SPEEDA「高速」成長の秘密』</title>
          <link>http://tech.uzabase.com/entry/2016/06/29/024236</link>          <description>&lt;p&gt;こんにちは、SPEEDA Techチームで新規機能開発を担当しています清水です。&lt;br&gt;
&lt;br&gt;
ユーザベースでは今、定期的にエンジニア向けにMeetupイベントを開催しています！&lt;br&gt;
3月に開催をした第1回目から、ほぼ月1回のペースで開催しており、すでに開催数は3回を数えています。&lt;br&gt;
&lt;br&gt;
今回はMeetupイベントの目的と、第1回の開催内容をレポートします。&lt;br&gt;
(追って第2回・第3回のレポートもアップしますのでお楽しみに！)
&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;目的&lt;/h3&gt;

&lt;p&gt;弊社では、様々な先進的な取り組みをしているにも関わらず、なかなか「技術の会社」として認識をしてもらえていなかったりします。&lt;br&gt;
なかには「サービスは外注していると思っていました」とおっしゃる方も・・・。&lt;br&gt;
さすがにこれはまずいということで、もっとユーザベースという会社やカルチャー、雰囲気、そして社員のことを知ってもらうため(さらに言えば優秀なエンジニアの採用に繋げるため)、Meetupイベントを企画することになりました。&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;開催内容：『NewsPicks/SPEEDA「高速」成長の秘密』&lt;/h3&gt;

&lt;p&gt;記念すべき第1回目は「高速化」をテーマに開催しました。&lt;br&gt;
&lt;iframe src=&quot;//hatenablog-parts.com/embed?url=http%3A%2F%2Fuzabase-meetup.connpass.com%2Fevent%2F28036%2F&quot; title=&quot;NewsPicks/SPEEDA「高速」成長の秘密 - UZABASE Meetup#1 (2016/03/25 19:00〜)&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;http://uzabase-meetup.connpass.com/event/28036/&quot;&gt;uzabase-meetup.connpass.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;正直、「本当にみんな来てくれるんだろうか・・・」と不安でいっぱいでしたが、最終的には参加枠を大幅に上回るお申し込みをいただきました！&lt;br&gt;
第1回ということでユーザベースのチーフテクノロジスト竹内やNewsPicksのCTO(ちょうどこの日就任した)杉浦らが登壇。&lt;br&gt;
「高速化」という幅広いテーマも手伝って、ユーザベースで採用している全文検索エンジンElasticsearchの話から自動テスト、高速開発の話まで、バラエティに富む内容で発表させていただきました。&lt;br&gt;
なかには当時開発中だったNewsPicksの新機能に関する発表もあり、盛りだくさんの内容となりました。&lt;/p&gt;

&lt;script async class=&quot;speakerdeck-embed&quot; data-id=&quot;cdb7490b22af4ff7a369f04bde4900e1&quot; data-ratio=&quot;1.33333333333333&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;


&lt;script async class=&quot;speakerdeck-embed&quot; data-id=&quot;f0d9c82bab0d4536808883c13cbcfe37&quot; data-ratio=&quot;1.33333333333333&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;


&lt;script async class=&quot;speakerdeck-embed&quot; data-id=&quot;95117b3ac70c457e88ed2f5171655789&quot; data-ratio=&quot;1.33333333333333&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;


&lt;script async class=&quot;speakerdeck-embed&quot; data-id=&quot;c7c15e74a2cc4f4d8e84cc224a88a377&quot; data-ratio=&quot;1.77777777777778&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;


&lt;script async class=&quot;speakerdeck-embed&quot; data-id=&quot;cbc523f3f74344c39793782272299ed9&quot; data-ratio=&quot;1.77777777777778&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;


&lt;p&gt;また、ユーザベースの外部パートナーでありClojureのContributorでもある株式会社シェルフ代表の矢野さんより、『オープンソース開発のすすめ』という内容でLTも行っていただきました！&lt;br&gt;
&lt;span style=&quot;font-size: 200%&quot;&gt;&lt;a href=&quot;https://slideck.io/github.com/tyano/lightning_talks/join_to_open_source.md#/&quot;&gt;オープンソース開発のすすめ&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;発表後のお楽しみ&lt;/h3&gt;

&lt;p&gt;ユーザベースMeetupでは、発表の後に参加者の皆さんと親睦を深める目的で懇親会を開催しています。&lt;br&gt;
懇親会では、ピザとエビスビール(もちろんお茶もあります)をご用意しています！&lt;br&gt;
こちらは懇親会の様子。&lt;br&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/k/kaonash/20160627/20160627165330.jpg&quot; alt=&quot;f:id:kaonash:20160627165330j:plain&quot; title=&quot;f:id:kaonash:20160627165330j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;
けっこう多めにピザをご用意しているはずなんですが、無くなるのが早い早い・・・現在ピザの増量を検討中です。&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;今後について&lt;/h3&gt;

&lt;p&gt;今後も定期的にMeetupイベントを開催していく予定です。&lt;br&gt;
取り急ぎ、次回は7月7日の七夕、「大規模サービスを支えるインフラ」というテーマで開催します！&lt;br&gt;
&lt;iframe src=&quot;//hatenablog-parts.com/embed?url=http%3A%2F%2Fuzabase-meetup.connpass.com%2Fevent%2F33709%2F&quot; title=&quot;UZABASE Meetup#4 〜大規模サービスを支えるインフラ〜 (2016/07/07 19:30〜)&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;http://uzabase-meetup.connpass.com/event/33709/&quot;&gt;uzabase-meetup.connpass.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;今回も(大変ありがたいことに)すでに席が埋まってしまっていますが、直前で一定数キャンセルが出ることを考えると、まだギリギリ入れるはず・・・ぜひふるってご参加ください！&lt;/p&gt;
</description>          <pubDate>Wed, 29 Jun 2016 02:42:36 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/6653812171403112073</guid>
          
          <enclosure url="https://cdn-ak.f.st-hatena.com/images/fotolife/k/kaonash/20160627/20160627165330.jpg" type="image/jpeg" length="0" />
        </item>
      
    
      
      
        <item>
          <title> Hinemos5.0.1移行記（その2：保守サービスとエンタープライズオプションを契約） </title>
          <link>http://tech.uzabase.com/entry/2016/04/28/121633</link>          <description>&lt;p&gt;ユーザベース インフラチームの小林です。&lt;/p&gt;

&lt;p&gt;だいぶ時間が空いてしまいましたが、「&lt;a href=&quot;http://tech.uzabase.com/entry/2016/03/11/155758&quot;&gt;Hinemos5.0.1移行記（その1：理想と現実の葛藤）&lt;/a&gt;」の記事から引き続き、Hinemos5.0.1への移行のお話です。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;前回のおさらい&lt;/h2&gt;

&lt;p&gt;Hinemos環境をバージョンアップするために、以下の流れで行うことを考えていました。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;   Hinemos5Managerを新規構築 、動作検証&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;   Hinemos3のデータをHinemos5に移行&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;   Hinemos3からHinemos5への順次切り替え&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;しかし、実際には思っていた通りにいかないことが判りました。&lt;/p&gt;

&lt;p&gt;具体的には、3番目の「Hinemos3からHinemos5への順次切り替え」の部分で、以下の問題がでてきたというお話でした。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Agent用にサポート対象バージョンのOpenJDKを入れるか、OracleJDK1.8を使い続けるか。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Hinemos3とHinemos5のAgentが同居できるといっても、どちらかのインストールディレクトリを変えないといけない。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;救世主が現る&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://tech.uzabase.com/entry/2016/03/11/155758&quot;&gt;前回の記事&lt;/a&gt;にも書いてありますが、&lt;A Href=&quot;http://atomitech.jp/&quot;&gt;アトミテック&lt;/A&gt;さんが上記の問題を解決してくれました。&lt;br&gt;
もともと、Hinemos5が出る前から、データ移行の相談を何回かしておりました。
その際に、すごく頼りになりそうだったので&lt;br&gt;
「データ移行＋移行時のトラブルサポート」という形で、今回依頼をいたしました。&lt;br&gt;
結果的にそれが大正解で、本当にいろいろなことをサポートしていただきました。&lt;br&gt;
&lt;br&gt;
特に、OpenJDKを入れるかOracleJDK1.8を使い続けるかという問題を解決するうえで、非常に助かりました。
既存の環境で使用しているOracleJDK1.8を使い続けたかったのですが、これを短時間で動作検証するのは私達には不可能でした。&lt;br&gt;
しかし、快く&lt;A Href=&quot;http://atomitech.jp/&quot;&gt;アトミテック&lt;/A&gt;さんにご対応いただけたおかげで、OracleJDK1.8でもHinemos5.0の動作が一通り問題ないことが判りました。&lt;br&gt;
当然ながら自己責任の上で、弊社環境ではOracleJDK1.8でHinemos5.0のAgentを動かしてます（今のところ不具合はありません）。&lt;br&gt;
&lt;br&gt;
OracleJDK1.8でHinemos5.0のAgentを動かすにあたって、何個か落とし穴がありましたが、そこら辺もご対応をいただいてます（起動shellにJavaのバージョンチェックがあったりなど）。
&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;移行できたよ！&lt;/h2&gt;

&lt;p&gt;問題を踏まえた上で、HinemosのAgentは以下の手順で切り替えることになりました。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;   Hinemos3.1のAgentのインストールディレクトリ変更&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;   Hinemos5.0のAgentをOracleJDK1.8で起動&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;   Hinemos3.1からHinemos5.0への順次切り替え&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;&lt;br&gt;
Hinemos3.1のAgentの変更に当たっては、Agentの再起動が入るのでできるだけ既存のジョブに影響が出ないように調整しながら行いました。
Hinemos5.0のAgentは既存のジョブがないので、一括で作業をしました。&lt;br&gt;
ジョブの順次切り替えは、前回書いたように各ジョブネットは簡単な仕組みで連携していたため、一つのジョブネットがうまくいったら、Hinemos3側のスケジュールを無効化、Hinemos5側のスケジュールを有効化しながら、代替1ヶ月くらいかけて切り替えることができました。
&lt;br&gt;
&lt;br&gt;その途中でもいろいろとあったのですが（Nagiosの監視用スクリプトのVerUpや、エラー時のジョブの挙動が変わってた事など）、一つ一つ真摯にご対応いただけたおかげで、非常にスムーズに作業が進みました。
&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;結果、保守サービスとエンタープライズオプションの契約を結ぶ事に&lt;/h2&gt;

&lt;p&gt;おかげで、無事にHinemos5への移行ができたのですが、あまりにも真摯に対応していただいたので、&lt;A Href=&quot;http://atomitech.jp/&quot;&gt;アトミテック&lt;/A&gt;さん経由でHinemosの保守サービスとエンタープライズオプションの契約を結ばせていただきました。&lt;br&gt;
&lt;br&gt;
保守サービスとエンタープライズオプションを契約すると、以下のメリットがあります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;修正パッチを提供してもらえる&lt;br&gt;
&lt;span style=&quot;color: #1464b3&quot;&gt;→今回で言うと、Hinemos5.0.2のリリース前に、Hinemos5.0.1のメモリリークの修正パッチが提供されて、事前にその不具合を解消する事ができました。
&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;エンタープライズオプションが使えるようになる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Hinemosでわからない事を相談できる&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;分からない事を相談できるという点が有難く、Hinemosの情報を検索しても出てこないことが多いのですが、何が起きても聞ける環境があると思えるだけで大きな安心感があります。&lt;br&gt;
&lt;br&gt;
個人的に嬉しいのは、エンタープライズオプションを使って、更にHinemosの使える幅が広がりそうなので、いろいろ試していきたいと思ってます。&lt;br&gt;
Hinemosの情報が意外と少ないので、弊社ブログでもHinemosユーザーの皆さんに有益な情報を発信できればと思っています。&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;今回の移行で思った事&lt;/h2&gt;

&lt;p&gt;今回移行をしてみてすごく実感したのが、「やはり、あまり一つの製品で凝った仕組みを作らない方が良いな」ということでした。&lt;br&gt;
Hinemosの機能を試したいと言っておきながら矛盾する話ではありますが、うちはHinemosを使いこなしていなかったおかげで、移行に大きな工数がかからずに済んだと思っています。&lt;br&gt;
Hinemosは確かに便利でまだまだ使いこなせる余地があると思っていますし、他の有償版のジョブ監視ツールももっと細かいところができるかもしれません。&lt;br&gt;
この「細かいところ」が肝で、このせいで移行が大規模や製品選定のネックになる事が多い気がしています。&lt;br&gt;
&lt;br&gt;
弊社のジョブの組み方は、最低限のジョブネットを作って、各ジョブネット間はファイル連携という単純な仕組みを用いています。&lt;br&gt;
このファイル連携も、shellでファイル作成とファイル監視をしているので、Hinemosからみたらジョブの実行をしているだけになります。&lt;br&gt;
おかげで、ジョブの切り替えタイミングに余裕を持たせることができたので、私を含めて2～3人程度でも余裕を持って切り替えることができたと思っています。&lt;br&gt;
もし、この組み方がジョブ監視ツールの機能で、全部ジョブの前後関係を組んでいた場合、異なるHinemos間での先行条件はできないので、一括で変更をしないといけない状態でした。&lt;br&gt;
&lt;br&gt;
極端な話をすれば、Hinemosから別製品に載せ替えることもできたと思います（ジョブデータの変換できればですが）。&lt;br&gt;
&lt;br&gt;
そこら辺の自由度は最大限残しておくためにも、あまり凝った機能を使わずに、できるだけ単純な部分を組み合わせるのが良いのではないか、と実感した次第です。&lt;br&gt;
&lt;br&gt;
そうはいっても、便利な機能は使うべきだと思うので、そこら辺を意識しながら、あまり依存しすぎることのないように使っていくことが大事かなと考えています。&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;今後の要望&lt;/h2&gt;

&lt;p&gt;上でいろいろ書きましたが、私自身はHinemosと末永く付き合うつもりでいます。&lt;br&gt;
今後も長くおつきあいする上で、今回の移行で引っかかった以下の点を実現してもらえると、次回（何年後か判りませんが）のHinemosバージョンアップ作業のハードルがだいぶ下がるはずなので是非お願いしたいところです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;インストールディレクトリを/opt/hinemos_XXXみたいなバージョンごとに分けてほしい&lt;/li&gt;
&lt;li&gt;Agentをインストールするときに、OpenJDKを/opt/hinemos_XXX以下に一緒に入れてほしい&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;エンタープライズオプションのExp/Imp機能の画面紹介&lt;/h2&gt;

&lt;p&gt;簡単に、エンタープライズオプションで使いたかったExp/Impについて紹介します。&lt;br&gt;
このおかげで、ジョブの修正の工数が大幅に縮小されました。&lt;br&gt;
&lt;br&gt;
オプションをインストールすると、こんな感じでメニューが増えます。
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/m/manabu-kobayashi/20160420/20160420202629.png&quot; alt=&quot;f:id:manabu-kobayashi:20160420202629p:plain&quot; title=&quot;f:id:manabu-kobayashi:20160420202629p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;
&lt;br&gt;
エクスポート・インポートの設定は、クライアント設定の画面から確認や変更ができます。&lt;br&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/m/manabu-kobayashi/20160420/20160420202656.png&quot; alt=&quot;f:id:manabu-kobayashi:20160420202656p:plain&quot; title=&quot;f:id:manabu-kobayashi:20160420202656p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;
&lt;br&gt;実際の画面はこんな感じ。ここらへんで、エクスポート・インポート・差分比較ができます。&lt;br&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/m/manabu-kobayashi/20160420/20160420202707.png&quot; alt=&quot;f:id:manabu-kobayashi:20160420202707p:plain&quot; title=&quot;f:id:manabu-kobayashi:20160420202707p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;
&lt;br&gt;変更用のExcelの画面はこんな感じで、&lt;br&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/m/manabu-kobayashi/20160420/20160420202717.png&quot; alt=&quot;f:id:manabu-kobayashi:20160420202717p:plain&quot; title=&quot;f:id:manabu-kobayashi:20160420202717p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;
&lt;br&gt;出力した内容との差分比較は、このようなCSVファイルで出力されて、変更されたところが一目でわかります
（自分の作業が想定通りか一目でわかって便利です）。&lt;br&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/m/manabu-kobayashi/20160420/20160420202911.png&quot; alt=&quot;f:id:manabu-kobayashi:20160420202911p:plain&quot; title=&quot;f:id:manabu-kobayashi:20160420202911p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;
</description>          <pubDate>Thu, 28 Apr 2016 12:16:33 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/10328537792370893698</guid>
          
          <enclosure url="http://cdn-ak.f.st-hatena.com/images/fotolife/m/manabu-kobayashi/20160420/20160420200927.png" type="image/png" length="0" />
        </item>
      
    
      
      
        <item>
          <title>NewsPicks：記事をオススメするLINE BOTをつくってみた</title>
          <link>http://tech.uzabase.com/entry/2016/04/15/140513</link>          <description>&lt;p&gt;はじめまして。NewsPicks技術チームの井原です。&lt;/p&gt;

&lt;p&gt;チャットボット（Bot）という言葉を聞いたことがあるでしょうか。スマホやWebのメッセンジャー上で動く自動会話ロボットで、4/7にLINEが&lt;a href=&quot;https://business.line.me/ja/products/4/introduction&quot;&gt;BOT API Trial&lt;/a&gt;を公開したことでエンジニア界隈で一躍ホットなトピックとなりました。今週にはFacebookが対応を発表し、NewsPicksでも話題になりました。&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;//hatenablog-parts.com/embed?url=https%3A%2F%2Fnewspicks.com%2Fnews%2F1496965&quot; title=&quot;FacebookがMessengerのチャットボットのプラットフォームを発表&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://newspicks.com/news/1496965&quot;&gt;newspicks.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;私もBOT API Trialの公開で大喜びしたクチで、さっそく週末と帰宅後の時間でLINE BOTを作ってみました。&lt;/p&gt;

&lt;h1&gt;うま&lt;/h1&gt;

&lt;p&gt;こちらが作成したBotです。「うま」（NewsPicks非公式Bot）といいます。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/r/ryoju/20160414/20160414174014.png&quot; alt=&quot;f:id:ryoju:20160414174014p:plain&quot; title=&quot;f:id:ryoju:20160414174014p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;ユーザーが知りたいことをうまに伝えると、良さそうなNewsPicksの記事を探してお教えします。記事の内容が気になったら、画像をタップするとページが開きます。&lt;/p&gt;

&lt;p&gt;さて、うまがどういうふうにできているのかご説明いたしましょう。&lt;/p&gt;

&lt;h1&gt;インフラ環境&lt;/h1&gt;

&lt;p&gt;うまはAWSで動いています。EC2（w/ Elastic IP） + ELB + CloudFront + Certificate Manager + Route 53という構成です。Certificate Managerを使うためにバージニア北部のリージョンで動かしています。&lt;/p&gt;

&lt;p&gt;LINE BOTを動かすために以下の対応が必要でした。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;LINE BOTのコールバックを受けるためにはSSLが必須で、かつ&lt;a href=&quot;http://qiita.com/git6_com/items/008404506836011af33b&quot;&gt;証明書を選り好みする&lt;/a&gt;ため、Certificate Managerの証明書を使っています。私が所有しているドメインに対して作成した証明書をCloudFrontに紐付けて、さらにCloudFrontのエンドポイントをRoute 53のAレコードで設定しています。ここの設定に苦労したので、キャプチャを貼付しておきます。よかったら参考にしてください。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Certificate Manager&lt;br&gt;コールバックURLに使いたいドメインで証明書を作成します。ワイルドカードである必要はありません。&lt;Br&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/r/ryoju/20160414/20160414202224.png&quot; alt=&quot;f:id:ryoju:20160414202224p:plain:w400&quot; title=&quot;f:id:ryoju:20160414202224p:plain:w400&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:400px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;CloudFront&lt;br&gt;ディストリビューションを作成し、証明書を設定します。CNAMEにもコールバックURLのドメインを設定します。&lt;br&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/r/ryoju/20160414/20160414202227.png&quot; alt=&quot;f:id:ryoju:20160414202227p:plain:w400&quot; title=&quot;f:id:ryoju:20160414202227p:plain:w400&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:400px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Route 53&lt;br&gt;ドメインのAタグにディストリビューションを設定します。&lt;br&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/r/ryoju/20160414/20160414202230.png&quot; alt=&quot;f:id:ryoju:20160414202230p:plain:w200&quot; title=&quot;f:id:ryoju:20160414202230p:plain:w200&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:200px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;LINE BOTはAPIの呼び出し元のIPアドレスを事前に登録しておく必要があり、固定グローバルIPが必要となります（可変だと突然呼び出しが通らなくなるおそれがある）。そのためにElastic IPをEC2インスタンスに付けています。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;ちなみに、私はさくらのVPSを1台契約しており、最初はそれを使おうとしたのですが、証明書の問題でうまくいきませんでした。仕方なくAWSに環境を作って、開発中のプログラム一式も移したという経緯がありました。おそらくLINE BOT APIのサーバ側でチェックしているのでしょうが、無償で取れるSSL証明書ではこちらの用意したコールバックURLを呼んでくれない（？）ようで、GMO GlobalSignの試用証明書、EcoCertの試用証明書と試したのですが、いずれもうまくいきませんでした。SSL証明書はLINE BOTを作ろうとする趣味プログラマのハードルとなっていて、BOT API Trialの公開から数日は「この証明書なら大丈夫」「これはダメ」みたいな話題が多かったです。&lt;/p&gt;

&lt;h1&gt;メッセージの処理と記事推薦&lt;/h1&gt;

&lt;p&gt;ユーザーが知りたいことを送信してから、うまが記事を提示するまでの流れは以下のようになっています。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;形態素解析&lt;/li&gt;
&lt;li&gt;特徴語抽出&lt;/li&gt;
&lt;li&gt;記事の検索&lt;/li&gt;
&lt;li&gt;記事の選択&lt;/li&gt;
&lt;li&gt;記事の提示&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;また、大まかなデータのやりとりはこのような形になります。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/r/ryoju/20160414/20160414213825.png&quot; alt=&quot;f:id:ryoju:20160414213825p:plain&quot; title=&quot;f:id:ryoju:20160414213825p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;1. 形態素解析&lt;/h3&gt;

&lt;p&gt;ユーザーがLINEでうまとのトークを開始し、知りたいことを入力すると、LINEのサーバを経由してコールバックURLへ&lt;a href=&quot;https://developers.line.me/bot-api/api-reference#receiving_messages&quot;&gt;テキストメッセージ&lt;/a&gt;がPOSTされます。テキストメッセージからユーザーの入力した知りたいことを取り出して形態素解析を行い、単語に切り分けます。
形態素解析エンジンにはMeCabとIPA辞書（オフィシャルサイトで配布されているもの）を使っています。&lt;/p&gt;

&lt;h3&gt;2. 特徴語抽出&lt;/h3&gt;

&lt;p&gt;ユーザーは自然な（口語的な）表現で知りたいことを入力するため、検索の前処理として不要な単語を落としています。ここはバリエーションの考えられる処理ですが、現状では単純に名詞だけを残し、それ以外の品詞はすべて落としています。&lt;/p&gt;

&lt;p&gt;ただ、ログを見るとやはり適切ではない分割をされているケースが多いです。NewsPicksが経済ニュースアプリであるためか、企業名等の固有名詞をメッセージに含む場合が多いのですが、分割しすぎているケースが頻繁に見られます。提示するニュースの適切さをあげるには、ここの改善が大事だなという印象があります。企業・業界情報プラットフォームである&lt;a href=&quot;https://www.uzabase.com/speeda/&quot;&gt;SPEEDA&lt;/a&gt;の辞書を使えばもっと良くなるかもしれません。&lt;/p&gt;

&lt;h3&gt;3. 記事の検索&lt;/h3&gt;

&lt;p&gt;抽出された特徴語を用いてNewsPicksの記事を検索します。ここではNewsPicksの検索機能は使わず、Google検索を使っています。NewsPicksの検索機能は有料会員にだけ開放されている機能なので、誰にでもオープンなGoogle検索にしました。GoogleのWeb検索で上位10件を取得しています。&lt;/p&gt;

&lt;h3&gt;4. 記事の選択&lt;/h3&gt;

&lt;p&gt;うまは、1つの知りたいことに対して1件だけ記事を提示するため、検索結果の中から提示する記事を選択する必要があります。画像を合わせて提示したいので、検索結果の上位から画像があるかをチェックしていき、画像があるものが見つかればそれを選択しています。&lt;/p&gt;

&lt;p&gt;ここも将来的な改善の余地が大きい箇所です。たとえば、検索結果の記事ごとにPick数を取得して重み付けをする、みたいなことはすぐに思いつきます。ただ、やりだすと終わりがありませんし、記事の内容を判定に使うためにはクローリングやページの処理が必要で、レスポンスタイムがそのぶん伸びてしまうこともあり、このような処理としています。&lt;/p&gt;

&lt;h3&gt;5. 記事の提示&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://developers.line.me/bot-api/api-reference#sending_rich_content_message&quot;&gt;リッチメッセージ&lt;/a&gt;を作ってLINEサーバにPOSTすると、ユーザーに記事が提示されます。&lt;/p&gt;

&lt;p&gt;以上の処理がワンセットで、テキストメッセージを受け付けるたびにこれを実行します。&lt;/p&gt;

&lt;h1&gt;社内公開&lt;/h1&gt;

&lt;p&gt;だいたい動くようになったところで、社内(ニューズピックス/ユーザベース)のSlackでうまを公開しました。けっこう好評で皆に使ってもらえたのですが、やっぱりユーザーの実際の使い方というのは、開発者に様々な気づきやアイディアを与えてくれるものです。以下はNewsPicksのメンバーがSlackにポストしてくれたキャプチャです。&lt;/p&gt;

&lt;h3&gt;時間の指定&lt;/h3&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/r/ryoju/20160414/20160414204703.jpg&quot; alt=&quot;f:id:ryoju:20160414204703j:plain:w250&quot; title=&quot;f:id:ryoju:20160414204703j:plain:w250&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:250px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/r/ryoju/20160414/20160414204706.png&quot; alt=&quot;f:id:ryoju:20160414204706p:plain:w250&quot; title=&quot;f:id:ryoju:20160414204706p:plain:w250&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:250px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;いまの処理方法では、時間（記事の公開時刻）をまったく考慮していません。「今日の」「昨日の」のような時間指定のあるメッセージだと、ユーザーの意図を踏まえないイマイチな答えになってしまいます。改善ポイントですね。&lt;/p&gt;

&lt;h3&gt;形容詞の使用&lt;/h3&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/r/ryoju/20160414/20160414204734.png&quot; alt=&quot;f:id:ryoju:20160414204734p:plain:w250&quot; title=&quot;f:id:ryoju:20160414204734p:plain:w250&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:250px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;現在の処理方式では特徴語抽出で名詞だけを残しており、「盛り上がった」は形容詞なので、検索結果に何ら反映されません。この場合は「ニュース」だけで検索した結果を返すことになっています。&lt;/p&gt;

&lt;p&gt;まあ、うまは生まれたばかりだからね……。開発者としてはがんばって賢くしてやりたいものです。&lt;/p&gt;

&lt;h1&gt;ソースコード&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ryoju/newspicks_bot&quot;&gt;現状のソースコードをGithubに上げた&lt;/a&gt;ので、よろしければご覧ください。まだα版くらいの感じなので、ごちゃごちゃ弄っている最中でコメントも皆無と、綺麗とは言いがたいのですが。そのうち整理されてくるはず……たぶん。&lt;/p&gt;

&lt;p&gt;実装にはPythonを使っています。フレームワークはDjango(w/ Django REST Framework)です。 どこかで動かしてみる時には、newspicks/settings_line.pyにあなたのLINE BOTのChannel ID, Channel Secret, MIDを記載してください。&lt;/p&gt;
</description>          <pubDate>Fri, 15 Apr 2016 14:05:13 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/10328537792371135866</guid>
          
          <enclosure url="http://cdn-ak.f.st-hatena.com/images/fotolife/r/ryoju/20160414/20160414174014.png" type="image/png" length="0" />
        </item>
      
    
      
      
        <item>
          <title>Slackを全社導入したので、社内向け利用マニュアルを公開してみた</title>
          <link>http://tech.uzabase.com/entry/2016/03/17/145415</link>          <description>&lt;p&gt;はじめまして。ユーザベース Cultureチームの木村です。先月、インターンとして入社し、就職活動と二足の草鞋でやっています。
&lt;br&gt;
&lt;br&gt;
今回、ユーザベース全体として「Slack」の全面導入が決まりました！
これまで、社内でのチャットコミュニケーションはチームごとにLINE・チャットワーク・Skypeを使用し混在していましたが、今後はSlackに統一をしていきます。
&lt;br&gt;
&lt;br&gt;
全社導入時に使用した&lt;span style=&quot;color: #F5A2A2&quot;&gt;Slackのご紹介&lt;/span&gt;と&lt;span style=&quot;color: #F5A2A2&quot;&gt;簡易マニュアル&lt;/span&gt;を公開します。Slackが気になっていた方や初めて知る方に、他のコミュニケーションツールと違う点についてお伝えしたいと思います。
&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;What’s Slack？&lt;/h3&gt;

&lt;p&gt;&lt;br&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/u/uzabase/20160316/20160316161207.png&quot; alt=&quot;f:id:uzabase:20160316161207p:plain&quot; title=&quot;f:id:uzabase:20160316161207p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&gt;
&lt;br&gt;&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Slack（スラック）は、スチュワート・バターフィールドによって開発された、チームコミュニケーションツール。2013年8月に公開され、公開から24時間以内に8000の顧客にサインアップされた。現在Slackは世界中で急速に普及しており、1日に利用するアクティブユーザー数は125万人で、有料会員が37万人(2015年9月時点)。利用者数は90日ごとに倍増するペースで伸び続けている。&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;u&gt;&lt;b&gt;ざっくり言えば、「ビジネス用途のLINE」です。&lt;/b&gt;&lt;/u&gt;
&lt;br&gt;メールで堅苦しくやり取りをするよりも、チャットツールで簡単にコミュニケーションをとる方が、精神的にも楽ですし、効率的ですよね。LINEはプライベートと混同されてしまうし・・というわけで、Slackになりました。
&lt;br&gt;
ですが、チャットワークを始め、数ある企業向けコミュニケーションツールの中から、どうしてSlackが選ばれたのか？
&lt;br&gt;
ということで、以下にSlackを利用する5つのメリットをあげてみました！
&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h4&gt;Slackのイケてる点&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;b&gt;情報の抽出が簡単＆網羅的&lt;/b&gt;
&lt;br&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/u/uzabase/20160316/20160316163128.png&quot; alt=&quot;f:id:uzabase:20160316163128p:plain&quot; title=&quot;f:id:uzabase:20160316163128p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;
&lt;br&gt;
検索機能で、チャンネル(LINEのグループチャットの概念)をまたいで、過去ログ全ての検索ができます。
&lt;br&gt;また、ファイルやまとまった文章を投稿するPost機能は、それ自体にコメントをつけることができるので、返答や意見が一か所にまとまりやすいです。Postは複数人での共同編集にも対応しています。
&lt;br&gt;
&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;連携できる外部サービスが豊富&lt;/b&gt;
&lt;br&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/u/uzabase/20160316/20160316163143.png&quot; alt=&quot;f:id:uzabase:20160316163143p:plain&quot; title=&quot;f:id:uzabase:20160316163143p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;
&lt;br&gt;
Slackと言えば拡張性。例えばGmailからメールが来たらSlackに通知され、そのままSlack上で内容の確認ができるなど、あらゆる通知や情報がSlackを見るだけで確認ができるようになります。TwitterやRSS、Google Calendarといった一般的なサービスから、GitHubなどエンジニア向けのサービスまで、幅広く連携することができます。
&lt;br&gt;
&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;UIがシンプルでスタイリッシュ&lt;/b&gt;
&lt;br&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/u/uzabase/20160316/20160316170627.png&quot; alt=&quot;f:id:uzabase:20160316170627p:plain&quot; title=&quot;f:id:uzabase:20160316170627p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;
&lt;br&gt;
個人的な好みにはなりますが、とにかくお洒落でシンプル。洗練されたUIは、SPEEDAと共通する部分があるように思えます。コミュニケーションツールは毎日使うものですので、やはりごちゃごちゃしたUIよりも、シンプルで分かり易いものの方が捗ります。
&lt;br&gt;
&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;各端末用のアプリがある&lt;/b&gt;
&lt;br&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/u/uzabase/20160316/20160316162310.jpg&quot; alt=&quot;f:id:uzabase:20160316162310j:plain&quot; title=&quot;f:id:uzabase:20160316162310j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;
&lt;br&gt;
ブラウザ版の他、Mac、Windowsのデスクトップ版、iOS、Androidのアプリ版もあり、いつでもどこでも使うことができます。
&lt;br&gt;
&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;各種コードをアップロードできるsnippet機能がある。&lt;/b&gt;
&lt;br&gt;
この点が、とりわけエンジニアライクな設計になっています。Tech Blogということで、少し詳しくご説明します。
&lt;br&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/u/uzabase/20160316/20160316163202.png&quot; alt=&quot;f:id:uzabase:20160316163202p:plain&quot; title=&quot;f:id:uzabase:20160316163202p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;
&lt;br&gt;
左上の入力画面にコードの名前を打ち込み、右上のプルダウンでコードの言語種類を選ぶと、中央のプログラムコードが色付けされたり、自動でインデントがつけられます。
&lt;br&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/u/uzabase/20160316/20160316163221.png&quot; alt=&quot;f:id:uzabase:20160316163221p:plain&quot; title=&quot;f:id:uzabase:20160316163221p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;
&lt;br&gt;
実際に投稿すると、このように見えます。これまで、他のチャットサービスでコードをベタ貼りしていた時と比べて、かなり見違えると思います。色付け、インデントに加えて行番号も書いてあるため、他のエンジニアとのコミュニケーションもとりやすくなっています。
&lt;br&gt;
&lt;br&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/u/uzabase/20160316/20160316163243.png&quot; alt=&quot;f:id:uzabase:20160316163243p:plain&quot; title=&quot;f:id:uzabase:20160316163243p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;
&lt;br&gt;
投稿されたSnippetには、Post機能と同じようにコメントを付けられるだけではなく、検索でコードやコメントの中身まで引っかかります！
&lt;br&gt;
&lt;br&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/u/uzabase/20160316/20160316163304.png&quot; alt=&quot;f:id:uzabase:20160316163304p:plain&quot; title=&quot;f:id:uzabase:20160316163304p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;
&lt;br&gt;
ちなみに、これは「in:helloslack during:2016 helloWorld」と検索しており、『「helloslack」チャンネルの2016年に投稿された中で、helloWorldの文字列が存在する』メッセージもしくはファイルを抽出しています。
&lt;br&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;h3&gt;How to Slack&lt;/h3&gt;

&lt;h4&gt;1.コミュニケーション&lt;/h4&gt;

&lt;p&gt;Slackでのコミュニケーション方法は、以下の3通りです。
&lt;br&gt;
・メンバー全体に特定の情報を送信する「チャンネル」
&lt;br&gt;
・個々のメンバーに向けた「ダイレクトメッセージ」
&lt;br&gt;
・特定のメンバーのみが閲覧できる「プライベートグループ」
&lt;br&gt;&lt;/p&gt;

&lt;h5&gt;1-1.チャンネル&lt;/h5&gt;

&lt;p&gt;チャンネルとは、関連する話題を部屋別に分ける機能で、LINEのグループチャットと同じようなものです。ただし、このチャンネルに表示している内容は、Slack全体に共有されるので、チャンネルに参加していない人でも自由に閲覧することが可能です。(チャンネルに参加していないメンバーは、発言することはできません。)
&lt;br&gt;
&lt;br&gt;
【新規チャンネル作成】
&lt;br&gt;
新規チャンネルは「CHANNELS」の「＋ボタン」をクリックして作成をします。お好みのチャンネル名と招待したいメンバー(後からでも追加可能)、チャンネルの説明をいれたら、「Create channel」をクリックしてください。
&lt;br&gt;
 &lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/u/uzabase/20160316/20160316163337.png&quot; alt=&quot;f:id:uzabase:20160316163337p:plain&quot; title=&quot;f:id:uzabase:20160316163337p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;
&lt;br&gt;
＋ボタンの左にある「CHANNELS」からは既存のCHANNELを検索することができます。
&lt;br&gt;
&lt;br&gt;
【チャット】
&lt;br&gt;
通常の会話は、チャットツールと同様でテキストを入力し、Enterで送ることができます。編集したい場合には、テキスト入力欄の右に「･･･」がでますので、そこから「Edit message」で編集してください。
&lt;br&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/u/uzabase/20160316/20160316163821.png&quot; alt=&quot;f:id:uzabase:20160316163821p:plain&quot; title=&quot;f:id:uzabase:20160316163821p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;
&lt;br&gt;
コメントにPinやStarを付けて、後から見やすくすることもできます。
&lt;br&gt;
&lt;br&gt;
【メンション】
&lt;br&gt;
投稿時に、以下のコマンドを入力すると、特定のユーザー名を記載したメッセージが送れるようになります。初期設定では、メンションのみがポップアップ通知されるようになっているため、これを使うことで相手にメッセージが伝わりやすくなります。
&lt;br&gt;
@username → 特定の個人へのメンションは、@を入れて一覧の予測変換より選択出来ます。
&lt;br&gt;
@everyone or @group → チャンネル関係なく、全てのメンバーへのメンション
&lt;br&gt;
@here → オンラインのメンバーへのメンション
&lt;br&gt;
@channel → チャンネルのメンバー全員へのメンション
&lt;br&gt;
&lt;br&gt;
【ファイル共有】
&lt;br&gt;
テキスト入力欄左部の＋ボタンから、「Upload a file」、もしくはドラッグアンドドロップで、テキスト入力エリアに画像やファイルを持ってくると、アップロードが可能です。gif・jpg・png・pdf・textなど、どんなファイルでも送ることができます。
&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h5&gt;1-2.ダイレクトメッセージ&lt;/h5&gt;

&lt;p&gt;ダイレクトメッセージは、名前の通り直接連絡のやり取りができます。
一対一の会話なので、他の参加者が内容を確認することはできません。
&lt;br&gt;
 &lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/u/uzabase/20160316/20160316163348.png&quot; alt=&quot;f:id:uzabase:20160316163348p:plain&quot; title=&quot;f:id:uzabase:20160316163348p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;
&lt;br&gt;
画面左部「DIRECT MESSAGES」からユーザーの検索ができます。
&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h5&gt;1-3.プライベートグループ&lt;/h5&gt;

&lt;p&gt;プライベートグループは、チャンネルとほぼ同じ機能ですが、このチャンネルに書かれた内容は参加メンバーのみに共有され、同じチーム内でも閲覧はできません。クローズドな環境なのでサプライズ等の計画に使えそうです！
&lt;br&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/u/uzabase/20160316/20160316163925.png&quot; alt=&quot;f:id:uzabase:20160316163925p:plain&quot; title=&quot;f:id:uzabase:20160316163925p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;
&lt;br&gt;
通常のチャンネル作成と同様、「CHANNNELS」の「＋ボタン」から作成画面へ
→上部の「Public」タブをクリックすると「Private」となります。
&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h4&gt;2.別アプリとの連携&lt;/h4&gt;

&lt;p&gt;【Google Driveとの連携】
Google DriveとSlackを連携しておくと、Google DriveのファイルURLをSlackに貼り付けた際に、Slack上にファイルとして認識される（検索対象になる） ようになります。スプレッドシートなどを頻繁に触る方は設定しておくと、Slack内から検索できたり、直にファイルが開けたりしてとても便利になります。
&lt;br&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/u/uzabase/20160316/20160316164158.png&quot; alt=&quot;f:id:uzabase:20160316164158p:plain&quot; title=&quot;f:id:uzabase:20160316164158p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;
&lt;br&gt;
画面左部の自分のユーザーネームをクリック
&lt;br&gt;
→右部「Account」をクリック
&lt;br&gt;
→左部「Configure Apps」をクリック
&lt;br&gt;
→一覧から「Google Drive」をクリック
&lt;br&gt;
→「Authenticate」から連携許可
&lt;br&gt;
&lt;br&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/u/uzabase/20160316/20160316173141.png&quot; alt=&quot;f:id:uzabase:20160316173141p:plain&quot; title=&quot;f:id:uzabase:20160316173141p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;
&lt;br&gt;
URLではなく、ファイル形式で表示されるようになった上、Slack上でコメントを付けられるようになりました！
&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;感想&lt;/h3&gt;

&lt;p&gt;長々と書いてしまいましたが、何か一つでもご参考になるものがあれば幸いです。スラッシュコマンドやPin機能など、Slackにはまだまだ可能性が秘められております。皆さまもぜひお試しください。&lt;br&gt;
私個人としても、全社へのSlack導入のお仕事をいただいてから、半信半疑で使い始めたのですが、今はすっかりSlackの虜です。連携サービスやチャンネルの運用を駆使して&lt;span style=&quot;color: #F5A2A2&quot;&gt;「社内のコミュニケーション全てをSlackで完結させる」&lt;/span&gt;と考えはじめたら、もうワクワクの極みです。&lt;br&gt;
そして就活生である身としては、Slackを全社的に有効活用させて&lt;b&gt;「はい！私は、インターン先の企業において、社内コミュニケーションの活性化に尽力しました！」&lt;/b&gt;的なことを言えるようになりたいものです。&lt;/p&gt;
</description>          <pubDate>Thu, 17 Mar 2016 14:54:15 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/10328537792367290487</guid>
          
          <enclosure url="http://cdn-ak.f.st-hatena.com/images/fotolife/u/uzabase/20160316/20160316161207.png" type="image/png" length="0" />
        </item>
      
    
      
      
        <item>
          <title>Hinemos5.0.1移行記（その１：理想と現実の葛藤）</title>
          <link>http://tech.uzabase.com/entry/2016/03/11/155758</link>          <description>&lt;p&gt;ユーザベース インフラチームの小林です。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://tech.uzabase.com/entry/2016/02/18/165541&quot;&gt;前回の記事&lt;/a&gt;から引き続き、今回からHinemos5.0.1への移行のお話です。&lt;/p&gt;

&lt;h2&gt;が、その前に1箇所訂正があります&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://tech.uzabase.com/entry/2016/02/18/165541&quot;&gt;前回のブログで書いた&lt;/a&gt;ジョブスケジュール日跨ぎの件ですが、&lt;br&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/m/manabu-kobayashi/20160226/20160226221222.jpg&quot; alt=&quot;f:id:manabu-kobayashi:20160226221222j:plain&quot; title=&quot;f:id:manabu-kobayashi:20160226221222j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;0:00～48:00に設定する事で、日跨ぎができました！&lt;br&gt;
先日Hinemosセミナーに出た際に、NTTデータさんに教えてもらいました。ありがとうございます。&lt;br&gt;
（けれど、日付の指定が年・月・日をいちいち選ばないといけないので、やっぱり不便です。
日付選択を、カレンダーから選択できる機能もつけてしてほしい・・・と思ってます。）
&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;移行の流れ&lt;/h2&gt;

&lt;p&gt;さて、話を本題に。
&lt;br&gt;
弊社のHinemos環境をバージョンアップするにあたり、おおざっぱに以下の流れで行いました。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Hinemos5Managerを新規構築 、動作検証&lt;/li&gt;
&lt;li&gt;Hinemos3のデータをHinemos5に移行&lt;/li&gt;
&lt;li&gt;Hinemos3からHinemos5への順次切り替え&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;（正確にはHinemos3.1.2とHinemos5.0.1ですが、省略します。）&lt;/p&gt;

&lt;h2&gt;では、動作検証の話&lt;/h2&gt;

&lt;p&gt;新規構築は、マニュアル通りに行えば特に問題はありません。
動作検証においては、Hinemos3ではあまり高度な機能を使っていなかったこともあり、&lt;br&gt;
ジョブスケジューラとして、以下のような基本的な部分だけの検証で十分でした。(新機能は移行後に順次追加。)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;指定した通りにコマンド実行ができるか&lt;/li&gt;
&lt;li&gt;きちんと先行条件が効くか&lt;/li&gt;
&lt;li&gt;スケジューラが機能するか&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;上の部分について全然問題はなかったのですが、Hinemos3と違うところがあったので、思いついた部分を列挙します。&lt;br&gt;
&lt;br&gt;
&lt;b&gt;先行条件が自動で変わって便利！&lt;/b&gt;&lt;br&gt;
Himemos3の時、ジョブIDを変更したいと思っても、後続のジョブの先行条件も変更しなければならず、すごく億劫でした。&lt;br&gt;
ところが、今回のバージョンアップで試してみたところ、下記のようにジョブIDを変更すると、それに紐付く後続ジョブの先行条件が自動で変わってくれます！&lt;br&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/m/manabu-kobayashi/20160229/20160229170138.jpg&quot; alt=&quot;f:id:manabu-kobayashi:20160229170138j:plain&quot; title=&quot;f:id:manabu-kobayashi:20160229170138j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;br&gt;
&lt;b&gt;デフォルトのチェックが余計？&lt;/b&gt;&lt;br&gt;
新規ジョブ作成時、デフォルトで【条件を満たさなければ終了する】にチェックが入っているのですが、これにチェックが入っていると、前のジョブが異常終了した際などに終了してしまうので、弊社の環境では不便でした。&lt;br&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/m/manabu-kobayashi/20160229/20160229170136.jpg&quot; alt=&quot;f:id:manabu-kobayashi:20160229170136j:plain&quot; title=&quot;f:id:manabu-kobayashi:20160229170136j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;また、&lt;b&gt;ジョブをコピーして追加したい時に、うまくコピーができる場合と、できない場合（実行コマンド等が空になる）があるので、その謎を解きたいと思ってます。&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;データ移行は、&lt;A Href=&quot;http://atomitech.jp/&quot;&gt;アトミテック&lt;/A&gt;さんに依頼&lt;/h2&gt;

&lt;p&gt;次に、2点目の「Hinemos3のデータをHinemos5に移行」では、弊社の環境でノード数は約70、ジョブの登録数は約3000とありました。
これを人力で、ミスなく再設定する自信がない・・・&lt;br&gt;
という事で、Hinemosのデータ変換は、Hinemosソリューションパートナーの&lt;A Href=&quot;http://atomitech.jp/&quot;&gt;アトミテック&lt;/A&gt;さんに依頼をさせていただきました。
今回はデータの変換だけではなく、Hinemos5移行後のサポートも含めて契約をさせていただき、
後々それが大きな助けとなりました。&lt;/p&gt;

&lt;p&gt;ちなみに、アトミテックさんは、&lt;a href=&quot;http://atomitech.jp/hinemos/blog/:title&quot;&gt;ブログ&lt;/a&gt;でHinemosの情報発信をしており、いろいろな機能の検証をされてます。&lt;br&gt;&lt;/p&gt;

&lt;p&gt;Hinemos3-&gt;5へのデータ変換は、アトミテックさんにお願いしたことで、
弊社側での残作業は3つ目の「Hinemos3からHinemos5への順次切り替え」になります。&lt;/p&gt;

&lt;h2&gt;目指す移行方法&lt;/h2&gt;

&lt;p&gt;「順次切り替え」と書かせていただきましたが、
以下の要因から、一括切り替えではなく、順次確認をしながらの切り替えが可能でした。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Hinemos3とHinemos5のエージェントは同居可能(Windows環境は除く)&lt;/li&gt;
&lt;li&gt;ジョブの組み方を単純にしているため、機能検証をする項目が少ない&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;後者について、もう少し詳しく説明します。&lt;br&gt;
一般的なジョブの組み方としては、以下のようにジョブネット間を先行条件で繋ぐことが多いと思います。（Hinemosに限らず）&lt;br&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/m/manabu-kobayashi/20160227/20160227013446.jpg&quot; alt=&quot;f:id:manabu-kobayashi:20160227013446j:plain&quot; title=&quot;f:id:manabu-kobayashi:20160227013446j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;
ところが、弊社環境では、ジョブネット間の連携において、先行条件で繋いでいませんでした。
どういうことかというと、各ジョブネットの最後にファイルを作成させて、
次のジョブは、そのファイルがあると動くようにしており、ファイルの作成・監視もshellで動かしています。
こんな感じです。
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/m/manabu-kobayashi/20160227/20160227013915.jpg&quot; alt=&quot;f:id:manabu-kobayashi:20160227013915j:plain&quot; title=&quot;f:id:manabu-kobayashi:20160227013915j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;このおかげで、こんなことが可能になります。
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/m/manabu-kobayashi/20160227/20160227013500.jpg&quot; alt=&quot;f:id:manabu-kobayashi:20160227013500j:plain&quot; title=&quot;f:id:manabu-kobayashi:20160227013500j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;こうする事で、&lt;span style=&quot;color: #ff5252&quot;&gt;&lt;b&gt;一度に全部を切り替えるのではなく、ジョブネット一つずつの動作確認をしながら切り替えができるので、
スケジュールに余裕を持たせた移行が可能な状況でした。
&lt;/b&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;と思ったら単純にはAgentが同居できなかったよ！&lt;/h2&gt;

&lt;p&gt;Agentで使うJavaをマニュアルから抜粋すると、&lt;/p&gt;

&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt; Hinemosエージェントを利用する場合
 以下のいずれかのopenjdkをインストールしてください。
   java-1.7.0-openjdk
   java-1.6.0-openjdk
&lt;/pre&gt;


&lt;p&gt;という事になっているのですが、弊社ではOracleJDK1.8を使ってました。&lt;br&gt;
Agentにいれるために、既存のサービスに影響が出そうなことをしたくない。&lt;br&gt;&lt;/p&gt;

&lt;p&gt;そしてもう一つ。
インストールディレクトリ
/opt/hinemos
って、バージョンが違ってもインストール先が一緒だということ。&lt;br&gt;
（rpmコマンドでのインストールなので、オプションを付ければ変更もできるかもしれませんが、デフォルトはこのまま）&lt;br&gt;
&lt;br&gt;
つまり、異なるバージョンが同居できるといっても、インストール先をデフォルトから変更をしないといけないのです。&lt;/p&gt;

&lt;h2&gt;状況の整理&lt;/h2&gt;

&lt;p&gt;状況を整理すると、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Agent用にサポート対象バージョンのOpenJDKを入れるか、OracleJDK1.8を使い続けるか。&lt;/li&gt;
&lt;li&gt;Hinemos3とHinemos5のAgentが同居できるといっても、どちらかのインストールディレクトリを変えないといけない。&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;という問題にぶつかりました。&lt;/p&gt;

&lt;p&gt;前者ですが、当初は簡単に考えていて、
OpenJDKのバイナリファイルをダウンロードして、Agentのインストールディレクトリに展開をすればいいのでは、と思っていましたが、
&lt;a href=&quot;http://openjdk.java.net/&quot;&gt;http://openjdk.java.net/&lt;/a&gt;をみると、yumからしかインストールができないようです。
yumでインストールした場合、万が一環境変数に変更があったりすると、既存のジョブに影響が出てしまう。
うーん、困った。&lt;/p&gt;

&lt;p&gt;そこで、後者。&lt;br&gt;
新規でインストールをするHinemos5のAgentのインストールディレクトリを変える&lt;br&gt;
or&lt;br&gt;
既存サービスで利用をしているHinemos3のAgentのインストールディレクトリを変える&lt;br&gt;
&lt;br&gt;
という２択ですが、これから使う方を大事にしたいと思い、Hinemos3の方を変えることにしました。&lt;/p&gt;

&lt;p&gt;ここで登場をするのが、やはり&lt;A Href=&quot;http://atomitech.jp/&quot;&gt;アトミテック&lt;/A&gt;さんなのでした。
意外と長くなったので次回へ続く。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;新機能のジョブのリトライ間隔の検証&lt;/h2&gt;

&lt;p&gt;ちょっと話題を変えまして、小ネタを一つ。&lt;br&gt;
&lt;br&gt;
ジョブのリトライ機能が追加されましたが、&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;リトライ間隔ってどれくらいなんだろう？&lt;/li&gt;
&lt;li&gt;それは変更ができるか？&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;というのが気になり、検証をしてみました。
管理者マニュアルには、他のリトライに関する説明はあったのですが、上の点については書いてないんだもの。。。。&lt;br&gt;&lt;/p&gt;

&lt;p&gt;では、検証開始。&lt;br&gt;&lt;/p&gt;

&lt;p&gt;1．エラーになるジョブを作る
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/m/manabu-kobayashi/20160304/20160304212735.png&quot; alt=&quot;f:id:manabu-kobayashi:20160304212735p:plain&quot; title=&quot;f:id:manabu-kobayashi:20160304212735p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;br&gt;
2．あたりまえだけどすぐ終わる。
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/m/manabu-kobayashi/20160304/20160304210055.png&quot; alt=&quot;f:id:manabu-kobayashi:20160304210055p:plain&quot; title=&quot;f:id:manabu-kobayashi:20160304210055p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;
3．リトライ回数を2で設定してみたら、落ちるまで20秒かかった。
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/m/manabu-kobayashi/20160304/20160304210103.png&quot; alt=&quot;f:id:manabu-kobayashi:20160304210103p:plain&quot; title=&quot;f:id:manabu-kobayashi:20160304210103p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;
4．ソースを見てみた。&lt;br&gt;
というか、retryって言葉でgrepをかけてみて探してみた。そして、下の情報にたどり着く。&lt;br&gt;
どうやら、「job.retry.interval」という値で管理ができる。デフォルトは10*1000で、実際は10秒なので、msで設定しているっぽい。
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/m/manabu-kobayashi/20160304/20160304210111.png&quot; alt=&quot;f:id:manabu-kobayashi:20160304210111p:plain&quot; title=&quot;f:id:manabu-kobayashi:20160304210111p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;
5．プロパティ画面で、job.retry.intervalを60000で設定してみた。
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/m/manabu-kobayashi/20160304/20160304210115.png&quot; alt=&quot;f:id:manabu-kobayashi:20160304210115p:plain&quot; title=&quot;f:id:manabu-kobayashi:20160304210115p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;
6．ちゃんと2分伸びた！
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/m/manabu-kobayashi/20160304/20160304210125.png&quot; alt=&quot;f:id:manabu-kobayashi:20160304210125p:plain&quot; title=&quot;f:id:manabu-kobayashi:20160304210125p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;
&lt;br&gt;
&lt;br&gt;
というわけで、&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;リトライ間隔のデフォルトは10秒&lt;/li&gt;
&lt;li&gt;job.retry.intervalで変更可能&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;というお話でした。
&lt;br&gt;&lt;/p&gt;
</description>          <pubDate>Fri, 11 Mar 2016 15:57:58 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/10328537792364897598</guid>
          
          <enclosure url="http://cdn-ak.f.st-hatena.com/images/fotolife/m/manabu-kobayashi/20160226/20160226221222.jpg" type="image/jpeg" length="0" />
        </item>
      
    
      
      
        <item>
          <title>RxJava + Vert.x + jOOλ で Microservice 的な何かを作ってみた</title>
          <link>http://tech.uzabase.com/entry/2016/03/08/140142</link>          <description>&lt;p&gt;技術チームの竹内(@chimerast)です。&lt;/p&gt;

&lt;p&gt;先日、&lt;a href=&quot;http://connpass.com/event/25532/&quot;&gt;Rx Ja Night 2016 #1&lt;/a&gt;という勉強会で、「RxJava + Vert.x + jOOλ で Microservice 的な何かを作ってみた」という題でLTしてきたので内容を少し書いてみようと思います。&lt;/p&gt;

&lt;p&gt;当日は自分以外基本Android勢の発表で、サーバサイドの自分にとっては、とてもアウェイな雰囲気でしたがめげずに発表してきました。RxJavaっていうとサーバサイドでは普通は使う機会がないですからね。&lt;/p&gt;

&lt;script async class=&quot;speakerdeck-embed&quot; data-id=&quot;2745f52212ba4e678b9d37f172c9ebdb&quot; data-ratio=&quot;1.77777777777778&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;


&lt;h2&gt;今回作ったものとその問題点&lt;/h2&gt;

&lt;p&gt;ブラウザでチャートを描画するための元データとなるJSONを返すREST APIを作りました。&lt;/p&gt;

&lt;p&gt;現在UZABASEではマイクロサービスアーキテクチャ的な何かのように、複数のREST APIを提供するサービスをぽこぽこ立ち上げており、その中の一つという位置づけです。&lt;/p&gt;

&lt;p&gt;今回作ったChart APIの裏では、企業情報を扱う「Companies API」、統計情報を扱う「Stats API」、チャートそれぞれの線のデータ指定情報を管理する「Media API」という3つのAPIが動いています。これらにリクエストを投げて得たデータを元に最終的なチャートのJSONを構築します。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/c/chimerast/20160227/20160227154832.jpg&quot; alt=&quot;f:id:chimerast:20160227154832j:plain&quot; title=&quot;f:id:chimerast:20160227154832j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;今回作る前から問題点として上がっていたのは、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Chart APIだけがAWS上に配置され、それ以外がオンプレのデータセンター上にありデータセンター間通信となってしまうこと&lt;/li&gt;
&lt;li&gt;最終的なレスポンスを返すまでに複数回（多いときには20回以上）バックエンドのAPIにリクエストを投げる必要があるということ&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;という二点です。&lt;/p&gt;

&lt;p&gt;この状態で最速でレスポンスを返すためには、並列でバックエンドのAPIにリクエストを投げる必要がありますが、それを普通にブロッキングI/Oでやろうとすると、Chart APIへの1リクエストが10スレッド以上立ち上げてバックエンドAPIの返りを待つ必要があるという残念な状態になってしまします。&lt;/p&gt;

&lt;h2&gt;使ったもの&lt;/h2&gt;

&lt;h3&gt;Vert.x &lt;a href=&quot;http://vertx.io/&quot;&gt;http://vertx.io/&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Nettyの上に作られ、ノンブロッキングI/Oで通信を行う事のできる高レベルAPI群です。サブプロジェクトがたくさんありDBとの通信を行うことの出来るモジュールなんかもあります。&lt;/p&gt;

&lt;p&gt;これのサブプロジェクトの一つである、Vert.x-WebをつかってRESTなAPIをつくりつつ、バックエンドAPIに対して１スレッドからノンブロッキングで複数リクエストを投げるみたいな使い方をしました。&lt;/p&gt;

&lt;p&gt;Vert.xの問題点として、全てがコールバックで返る非同期APIなため、例えば単純なDBのSELECT&amp;amp;UPDATEをするだけでも何段ものインデントが必要な書き方になります。メソッドを分けるという単純な解決法もありますが宣言的に書けるところは宣言的に書きたいです。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/c/chimerast/20160227/20160227160730.jpg&quot; alt=&quot;f:id:chimerast:20160227160730j:plain&quot; title=&quot;f:id:chimerast:20160227160730j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;これを解決するためにRxJavaを使います。&lt;/p&gt;

&lt;h3&gt;RxJava &lt;a href=&quot;https://github.com/ReactiveX/RxJava&quot;&gt;https://github.com/ReactiveX/RxJava&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;RxJavaは、Streamとしての側面とPromiseとしての側面を併せ持ったライブラリです。いろいろな使い方ができ自分も全てのメソッドの使い道をうまく把握出来ていません。Android勢はJava8がまだ使えないためStreamの代わりとして使っていたり、非同期処理も多いのでPromiseとしての使い方をしたり色々しているようです。&lt;/p&gt;

&lt;p&gt;今回のサーバサイドの開発では、Promiseとしての側面しか使っていません。コールバック地獄から抜け出すため(flatMap)、そして、複数の非同期処理をひとまとめにするため(zip)に主に使っています。&lt;/p&gt;

&lt;p&gt;最終的には組み合わせて以下みたいなコードになっています。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/c/chimerast/20160229/20160229075644.jpg&quot; alt=&quot;f:id:chimerast:20160229075644j:plain&quot; title=&quot;f:id:chimerast:20160229075644j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;感想&lt;/h2&gt;

&lt;p&gt;あまり長い文を書いても読みづらくなるだけなので、あとの細かい所はスライドを見てみてください。&lt;/p&gt;

&lt;p&gt;Vert.xは巨大なモノリシックなサービスを作るのにはあまり向いていない気がしていますが、今回のように小さいサービスを作るには軽くて向いていると思えました。特に並列でバックエンドのAPIに丸投げして待つみたいなものを作る時にはスレッドの数を考える必要が無いという大きな利点があると思います。&lt;/p&gt;

&lt;p&gt;RxJavaは非同期処理を気持ちよく書けるライブラリです。Vert.x、RxJavaともにJava8に対応しているためラムダ式でがしがし書くことができます。&lt;/p&gt;

&lt;h2&gt;エンジニア募集&lt;/h2&gt;

&lt;p&gt;株式会社ユーザベース、および、株式会社ニューズピックスではエンジニアを募集しています。ご興味があればお気軽にご連絡ください。&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;//hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.wantedly.com%2Fcompanies%2Fuzabase-inc%2Fprojects&quot; title=&quot;株式会社ユーザベースの採用/求人一覧 - Wantedly&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://www.wantedly.com/companies/uzabase-inc/projects&quot;&gt;www.wantedly.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;//hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.wantedly.com%2Fcompanies%2Fnewspicks%2Fprojects&quot; title=&quot;株式会社ニューズピックスの採用/求人一覧 - Wantedly&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://www.wantedly.com/companies/newspicks/projects&quot;&gt;www.wantedly.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
</description>          <pubDate>Tue, 08 Mar 2016 14:01:42 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/10328537792364977387</guid>
          
          <enclosure url="http://cdn-ak.f.st-hatena.com/images/fotolife/c/chimerast/20160227/20160227154832.jpg" type="image/jpeg" length="0" />
        </item>
      
    
      
      
        <item>
          <title>Hinemos3.1.2→Hinemos5.0.1に移行しました</title>
          <link>http://tech.uzabase.com/entry/2016/02/18/165541</link>          <description>&lt;p&gt;&lt;a href=&quot;http://tech.uzabase.com/entry/2015/01/29/102935&quot;&gt;前回の投稿&lt;/a&gt;から約1年と、だいぶ時間が空いてしまいました。&lt;br&gt;
ご無沙汰しておりますユーザベース インフラチームの小林です。&lt;/p&gt;

&lt;p&gt;当時海外留学していたメンバーも無事帰国し、新メンバーも増え、インフラチームはだいぶにぎやかになっております。&lt;/p&gt;

&lt;h2&gt;Hinemos3.1.2→Hinemos5.0.1に移行！&lt;/h2&gt;

&lt;p&gt;さて、本題なのですが、昨年5月にHinemos5が発表されました。&lt;br&gt;
すぐに導入したかったのですが、昨年9月の5.0.1の公開を待って、満を持してHinemos3.1.2→Hinemos5.0.1への移行を行いました。
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/m/manabu-kobayashi/20160215/20160215231044.png&quot; alt=&quot;f:id:manabu-kobayashi:20160215231044p:plain&quot; title=&quot;f:id:manabu-kobayashi:20160215231044p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;
&lt;br&gt;&lt;br&gt;&lt;br&gt;
この移行時の顛末については、次回にさせていただくとして、今回はHinemos5にしてみて、実際どうだったかというところを紹介させていただきます。&lt;/p&gt;

&lt;h2&gt;Hinemos5.0.1で大幅な運用改善を実現！&lt;/h2&gt;

&lt;p&gt;おさらいですが、Hinemos3の運用での困っていた点は以下の通りです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Hinemosエージェントが、Windows8だと動かない&lt;br&gt;

&lt;ul&gt;
&lt;li&gt;⇒そもそもWindows対応のみで、Mac作業者が作業できない。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;画面を開くの重い、ジョブの登録はもっと重い&lt;br&gt;

&lt;ul&gt;
&lt;li&gt;⇒あまりに重くて、常時PC開きっぱなし。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;ジョブ管理ツールとしては問題なく動いてくれていたのですが、パフォーマンス面でどうしても運用メンバーの負荷が上がっている状態でした。&lt;/p&gt;

&lt;p&gt;では、これらが、Hinemos5になって解決されたかというと、、&lt;br&gt;
&lt;span style=&quot;color: #000000&quot;&gt;&lt;b&gt;はい、ばっちりです！&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
Webクライアントについては、下のブログで詳しく紹介されているのでそちらをご確認いただきたいですが、リッチクライアントと遜色ない仕上がりで、&lt;br&gt;
&lt;b&gt;ようやくジョブ監視のWindows縛りから解放されたのであります！&lt;/b&gt;&lt;br&gt;
&lt;iframe src=&quot;//hatenablog-parts.com/embed?url=http%3A%2F%2Ftech-sketch.jp%2F2015%2F09%2Fhinemos5-0_part1.html&quot; title=&quot;Hinemos5.0新機能紹介Part1「Webクライアント」 | Tech-Sketch&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;http://tech-sketch.jp/2015/09/hinemos5-0_part1.html&quot;&gt;tech-sketch.jp&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
次に、画面が開くまで時間ですが、僕の実測ベースで、&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Hinemos3の時

&lt;ul&gt;
&lt;li&gt;ログインするまで：2分7秒（そのあとに、ジョブ履歴の画面を開くのにまた待ち時間）&lt;/li&gt;
&lt;li&gt;ジョブの登録時の待ち時間：2分30秒&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Hinemos5の時

&lt;ul&gt;
&lt;li&gt;ログインするまで：30秒（更にジョブ履歴の画面まで開いてる！！）&lt;/li&gt;
&lt;li&gt;ジョブの登録時の待ち時間：10秒位&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;と大幅改善されていて、&lt;b&gt;常時画面を開いている状態からも解放されました。&lt;/b&gt;&lt;br&gt;
毎日Hinemos開いていたので、待ち時間だけで1年で約10時間の削減効果です(笑&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
それ以外にも、&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;ジョブのスケジュール予定がわかるようになった&lt;/b&gt;り、&lt;br&gt;（新規でスケジュールしたときに想定通り動くか確認できて超便利！）
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/m/manabu-kobayashi/20160217/20160217225235.png&quot; alt=&quot;f:id:manabu-kobayashi:20160217225235p:plain&quot; title=&quot;f:id:manabu-kobayashi:20160217225235p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;祝日のパターンなどを複数のカレンダで共有できた&lt;/b&gt;り（デフォルトで祝日入ってるし！）&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;ジョブのエラー時にSlackに通知出るようにした&lt;/b&gt;り
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/m/manabu-kobayashi/20160215/20160215215536.png&quot; alt=&quot;f:id:manabu-kobayashi:20160215215536p:plain&quot; title=&quot;f:id:manabu-kobayashi:20160215215536p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;と、いろいろと運用負荷が下がっています。（通知の機能は、Hinemos3からあった機能を使ってます。）&lt;/p&gt;

&lt;h2&gt;Hinemos5.0.1のちょっといけていない点&lt;/h2&gt;

&lt;p&gt;で、いいことばかりでもなく、ちょっといけてない点もあったりしてます。&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Hinemos5.0.1でも若干不安定。

&lt;ul&gt;
&lt;li&gt;→なんかメモリリークしてそうな感じ。月に何回かサービス再起動してます。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ジョブスケジュールを臨時で停止したい時、日跨ぎしたいとき不便。（例えば、今日の12時から、明日の12時まで止めたい時とかは2度登録必要。）&lt;br&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/m/manabu-kobayashi/20160215/20160215225823.png&quot; alt=&quot;f:id:manabu-kobayashi:20160215225823p:plain&quot; title=&quot;f:id:manabu-kobayashi:20160215225823p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;ジョブ履歴画面から落ちたジョブのコマンド確認したい時に、グレーアウトされてて見れない。&lt;br&gt;（下の例だと短いコマンドですが、長いコマンドだと途中で切れる。）&lt;br&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/m/manabu-kobayashi/20160215/20160215225116.png&quot; alt=&quot;f:id:manabu-kobayashi:20160215225116p:plain&quot; title=&quot;f:id:manabu-kobayashi:20160215225116p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;下の２つは、Hinemos3とHinemos5で操作が違って慣れてないだけの気もしますが・・・&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;HInemos5.0.0→5.0.1へのアップグレード手順&lt;/h2&gt;

&lt;p&gt;最後に、開発環境にあった、5.0.0環境を5.0.1にアップグレードしてみましたので、簡単に手順を載せておきます。
（そんな難しいことはしてませんが。。）&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;1. DBのバックアップを取得&lt;/h3&gt;

&lt;p&gt;念のため、jvmを停止後バックアップを取得します。&lt;/p&gt;

&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# /opt/hinemos/bin/jvm_stop.sh&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# /opt/hinemos/sbin/mng/hinemos_backup.sh&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# /opt/hinemos/bin/jvm_start.sh&lt;/span&gt;
&lt;/pre&gt;


&lt;h3&gt;2. それぞれサービス停止&lt;/h3&gt;

&lt;p&gt;弊社環境では、ManagerとWebクライアントが同居しています。&lt;/p&gt;

&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# service hinemos_web stop&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# service hinemos_manager stop&lt;/span&gt;
&lt;/pre&gt;


&lt;h3&gt;3. さらに念をおしてHinemosマネージャver.5.0.0のバックアップを取得&lt;/h3&gt;

&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# cp -rp /opt/hinemos /tmp/hinemos_500_backup&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# cp -rp /opt/hinemos_web /tmp/hinemos_web_500_backup&lt;/span&gt;
&lt;/pre&gt;


&lt;h3&gt;4. rpmコマンドでUpdate&lt;/h3&gt;

&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# rpm -Uvh hinemos-manager-5.0.1-1.el7.x86_64.rpm&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# rpm -Uvh hinemos-web-5.0.1-1.el7.x86_64.rpm&lt;/span&gt;
&lt;/pre&gt;


&lt;h3&gt;5. serviceファイルをリロードする&lt;/h3&gt;

&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# systemctl daemon-reload&lt;/span&gt;
&lt;/pre&gt;


&lt;h3&gt;6. それぞれサービス起動&lt;/h3&gt;

&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# service hinemos_manager start&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# service hinemos_web start&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;って、この記事準備してたら、2016/2/15にHinemos5.0.2が公開されたので、さっそくもう一度試す羽目に。。&lt;/p&gt;

&lt;p&gt;Hinemos5への移行記は今後も続きますので楽しみにお待ちください！&lt;/p&gt;
</description>          <pubDate>Thu, 18 Feb 2016 16:55:41 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/6653586347156633673</guid>
          
          <enclosure url="http://cdn.mogile.archive.st-hatena.com/v1/image/uzabase/302456199552088609.png" type="image/png" length="0" />
        </item>
      
    
      
      
        <item>
          <title>えびスタ！#3 特別編「NewsPicksウェブ版リニューアルの裏側」を開催します</title>
          <link>http://tech.uzabase.com/entry/2015/08/07/123741</link>          <description>&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/u/uzabase/20150807/20150807105606.png&quot; alt=&quot;f:id:uzabase:20150807105606p:plain&quot; title=&quot;f:id:uzabase:20150807105606p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;皆さまこんにちは。&lt;/p&gt;

&lt;p&gt;恵比寿のイケてるスタートアップが集まるエンジニア向けの技術勉強会「えびスタ！」の第3回を開催します。
第3回は特別編として1社での単独開催です。先日リニューアルしたばかりのNewsPicksウェブ版の開発の裏側についてお届けします。&lt;/p&gt;

&lt;p&gt;もちろん今回もLT枠を用意しています。自社の技術についてアピールしたいという方はぜひLT枠でご参加ください！懇親会ではエビスビールとピザも用意してお待ちしています！&lt;/p&gt;

&lt;p&gt;エビスビールを飲みながら、テクノロジーとデザインの未来について語り合いましょう！&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;//hatenablog-parts.com/embed?url=http%3A%2F%2Febista.connpass.com%2Fevent%2F18581%2F&quot; title=&quot;えびスタ！#3 特別編「NewsPicksウェブ版リニューアルの裏側」 (2015/08/24 19:00〜)&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;a href=&quot;http://ebista.connpass.com/event/18581/&quot;&gt;えびスタ！#3 特別編「NewsPicksウェブ版リニューアルの裏側」 (2015/08/24 19:00〜)&lt;/a&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;http://ebista.connpass.com/event/18581/&quot;&gt;ebista.connpass.com&lt;/a&gt;&lt;/cite&gt;
&lt;iframe src=&quot;http://blog.newspicks.com/embed/2015web_renewal&quot; title=&quot;NewsPicks ウェブ版リニューアルのお知らせ - NewsPicks Blog&quot; class=&quot;embed-card embed-blogcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;a href=&quot;http://blog.newspicks.com/entry/2015web_renewal&quot;&gt;NewsPicks ウェブ版リニューアルのお知らせ - NewsPicks Blog&lt;/a&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;http://blog.newspicks.com/entry/2015web_renewal&quot;&gt;blog.newspicks.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;h2&gt;イベント情報&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;日時：8/24（月）19:00（18:30 開場）&lt;/li&gt;
&lt;li&gt;場所：株式会社ニューズピックス（東京都渋谷区恵比寿 1-18-14 恵比寿ファーストスクエア 10 階）&lt;/li&gt;
&lt;/ul&gt;


&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left;&quot;&gt;時間&lt;/th&gt;
&lt;th style=&quot;text-align:left;&quot;&gt;発表者&lt;/th&gt;
&lt;th style=&quot;text-align:left;&quot;&gt;内容&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left;&quot;&gt;18:30 ~ 19:00&lt;/td&gt;
&lt;td style=&quot;text-align:left;&quot;&gt;-&lt;/td&gt;
&lt;td style=&quot;text-align:left;&quot;&gt;開場&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left;&quot;&gt;19:00&lt;/td&gt;
&lt;td style=&quot;text-align:left;&quot;&gt;-&lt;/td&gt;
&lt;td style=&quot;text-align:left;&quot;&gt;乾杯（エビスビールで）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left;&quot;&gt;19:00 ~ 19:30&lt;/td&gt;
&lt;td style=&quot;text-align:left;&quot;&gt;甲斐 琢巳（NewsPicks エクスペリエンスエディター）&lt;/td&gt;
&lt;td style=&quot;text-align:left;&quot;&gt;NewsPicksが目指す新しいニュース体験について&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left;&quot;&gt;19:30 ~ 20:00&lt;/td&gt;
&lt;td style=&quot;text-align:left;&quot;&gt;戸辺 淳一郎（NewsPicks ウェブリニューアルプロジェクトリーダー）&lt;/td&gt;
&lt;td style=&quot;text-align:left;&quot;&gt;ウェブリニューアルを成功させたチーム体制「Holacracy（ホラクラシー）」、およびエンジニアとデザイナーの協業について&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left;&quot;&gt;20:00 ~ 20:20&lt;/td&gt;
&lt;td style=&quot;text-align:left;&quot;&gt;発表者募集中！&lt;/td&gt;
&lt;td style=&quot;text-align:left;&quot;&gt;LTタイム（5分×4人）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left;&quot;&gt;20:20 - 21:30&lt;/td&gt;
&lt;td style=&quot;text-align:left;&quot;&gt;-&lt;/td&gt;
&lt;td style=&quot;text-align:left;&quot;&gt;懇親会（エビスビールとピザを用意しています！）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;p&gt;&lt;iframe src=&quot;//hatenablog-parts.com/embed?url=http%3A%2F%2Febista.connpass.com%2Fevent%2F18581%2F&quot; title=&quot;えびスタ！#3 特別編「NewsPicksウェブ版リニューアルの裏側」 (2015/08/24 19:00〜)&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;a href=&quot;http://ebista.connpass.com/event/18581/&quot;&gt;えびスタ！#3 特別編「NewsPicksウェブ版リニューアルの裏側」 (2015/08/24 19:00〜)&lt;/a&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;http://ebista.connpass.com/event/18581/&quot;&gt;ebista.connpass.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
</description>          <pubDate>Fri, 07 Aug 2015 12:37:41 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450104773144</guid>
          
          <enclosure url="http://cdn-ak.f.st-hatena.com/images/fotolife/u/uzabase/20150807/20150807105606.png" type="image/png" length="0" />
        </item>
      
    
      
      
        <item>
          <title>「日本の夏は高温化しているか？」について可視化して確かめてみた。</title>
          <link>http://tech.uzabase.com/entry/2015/08/05/185131</link>          <description>&lt;p&gt;技術チーム竹内(@&lt;a class=&quot;twitter-user-screen-name&quot; href=&quot;http://twitter.com/chimerast&quot;&gt;chimerast&lt;/a&gt;)です。&lt;/p&gt;

&lt;p&gt;最近暑いですね。東京では猛暑日の連続が新記録だそうです。&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;//hatenablog-parts.com/embed?url=http%3A%2F%2Fwww.tenki.jp%2Fforecaster%2Fdiary%2Fdeskpart%2F2015%2F08%2F05%2F29061-summary.html&quot; title=&quot;猛暑日　東京新記録　仙台25年ぶり(日直予報士) - tenki.jp&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;a href=&quot;http://www.tenki.jp/forecaster/diary/deskpart/2015/08/05/29061-summary.html&quot;&gt;猛暑日　東京新記録　仙台25年ぶり(日直予報士) - tenki.jp&lt;/a&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;http://www.tenki.jp/forecaster/diary/deskpart/2015/08/05/29061-summary.html&quot;&gt;www.tenki.jp&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;Twitter上でも最近暑くなったことについて、データを見つつ色々話題になっていたようです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://togetter.com/li/856042&quot;&gt;&amp;#x65E5;&amp;#x672C;&amp;#x306E;&amp;#x590F;&amp;#x306F;&amp;#x9AD8;&amp;#x6E29;&amp;#x5316;&amp;#x3057;&amp;#x3066;&amp;#x308B;&amp;#x304B;&amp;#xFF1F; - Togetter&amp;#x307E;&amp;#x3068;&amp;#x3081;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://togetter.com/li/855995&quot;&gt;&amp;#xFF13;&amp;#xFF10;&amp;#x5E74;&amp;#x524D;&amp;#x3068;&amp;#x6BD4;&amp;#x3079;&amp;#x6691;&amp;#x304F;&amp;#x306A;&amp;#x3063;&amp;#x305F;&amp;#x3068;&amp;#x805E;&amp;#x304D;&amp;#x590F;&amp;#x306E;&amp;#x6C17;&amp;#x6E29;&amp;#x30C7;&amp;#x30FC;&amp;#x30BF;&amp;#x3092;&amp;#x30B0;&amp;#x30E9;&amp;#x30D5;&amp;#x306B;&amp;#x3057;&amp;#x3066;&amp;#x307F;&amp;#x305F;&amp;rarr;&amp;#x69D8;&amp;#x3005;&amp;#x306A;&amp;#x610F;&amp;#x898B;&amp;#x96C6;&amp;#x307E;&amp;#x308B; - Togetter&amp;#x307E;&amp;#x3068;&amp;#x3081;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;で、せっかくなんで自分でも最近どうなっているのか確かめてみました。&lt;/p&gt;

&lt;h3&gt;使ったデータ&lt;/h3&gt;

&lt;p&gt;&lt;iframe src=&quot;//hatenablog-parts.com/embed?url=http%3A%2F%2Fwww.data.jma.go.jp%2Fgmd%2Frisk%2Fobsdl%2F&quot; title=&quot;気象庁|過去の気象データ・ダウンロード&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;a href=&quot;http://www.data.jma.go.jp/gmd/risk/obsdl/&quot;&gt;気象庁|過去の気象データ・ダウンロード&lt;/a&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;http://www.data.jma.go.jp/gmd/risk/obsdl/&quot;&gt;www.data.jma.go.jp&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;気象庁から東京都の1986年1月から2015年8月4日時点までの月次データを取得してきてみました。&lt;/p&gt;

&lt;p&gt;項目は、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;平均気温(℃)&lt;/li&gt;
&lt;li&gt;降水量の合計(mm)&lt;/li&gt;
&lt;li&gt;平均湿度(％)&lt;/li&gt;
&lt;li&gt;日照時間(時間)&lt;/li&gt;
&lt;li&gt;日最高気温の平均(℃)&lt;/li&gt;
&lt;li&gt;日最低気温の平均(℃)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;をとりあえずとってきてみました。&lt;/p&gt;

&lt;h3&gt;使ったもの&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://e2d3.org/ja/&quot;&gt;E2D3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://dc-js.github.io/dc.js/&quot;&gt;dc.js - Dimensional Charting Javascript Library&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Excelでセルにデータを入力するとモダンな感じにビジュアライズ出来るE2D3で、データを多角的に見られるdc.jsを使える「dcjs-example」というテンプレートを使って(作って)可視化してみました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://e2d3.org/ja/&quot;&gt;E2D3&lt;/a&gt;は、Excelから気軽にデータビジュアライズできるようにしようと、現在絶賛開発中のオープンソースソフトウェアです。Excel2013以降もしくは、Excel OnlineのOfficeストアから探せるので使ってみてください。&lt;/p&gt;

&lt;h3&gt;できたもの&lt;/h3&gt;

&lt;p&gt;こんな感じです(残念ですが、スマホでは表示されません)。マウスで下のグラフを選択すると、選択した範囲でデータがフィルタリングされます。&lt;/p&gt;

&lt;p&gt;下の方の青いグラフの縦軸はデータの個数です。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://s.e2d3.org/e5f3bff/be9fe63b4e1b14e8c644d62e67e9ba2e&quot; target=&quot;_blank&quot;&gt;別画面で大きく表示する&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;画像ではなくマウスクリックで動かせますよ！&lt;/strong&gt;&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot;&gt;
if (document.getElementsByTagName(&quot;html&quot;)[0].getAttribute(&quot;data-globalheader-type&quot;) === &#39;pc&#39;) {
  document.open();
  document.write(&#39;&lt;iframe src=&quot;https://s.e2d3.org/e5f3bff/be9fe63b4e1b14e8c644d62e67e9ba2e&quot; width=&quot;100%&quot; height=&quot;1250&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot;&gt;&lt;/iframe&gt;&#39;);
  documnet.close();
}
&lt;/script&gt;


&lt;h3&gt;考察&lt;/h3&gt;

&lt;p&gt;実際に自分でいろいろ触って見てもらうのが一番ですが、例えば、8月の最低気温の平均を25度以上でフィルタリングしてみると明らかに近年(緑色)の年だけが出てきてしまいますね。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/c/chimerast/20150805/20150805174130.png&quot; alt=&quot;f:id:chimerast:20150805174130p:plain&quot; title=&quot;f:id:chimerast:20150805174130p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;まとめ&lt;/h3&gt;

&lt;p&gt;データを触って見ると色々気づきがあります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://e2d3.org/ja/&quot;&gt;E2D3&lt;/a&gt;を使うとExcelでデータを簡単に入れ替えてデータ可視化を行うことが出来ます(たぶん)。&lt;/p&gt;

&lt;p&gt;東京だけでなくいろんな地点のデータを入れてみると面白いと思います。&lt;/p&gt;

&lt;h3&gt;いろいろ&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://www.uzabase.com/&quot;&gt;株式会社ユーザベース&lt;/a&gt;では、企業・業界・統計データやニュース記事・コメント等データを大量に抱えています。そんなデータをなんとかしてみたいエンジニアを募集しています。&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;//hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.wantedly.com%2Fcompanies%2Fuzabase-inc%2Fprojects&quot; title=&quot;株式会社ユーザベースの募集一覧 - Wantedly&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;a href=&quot;https://www.wantedly.com/companies/uzabase-inc/projects&quot;&gt;株式会社ユーザベースの募集一覧 - Wantedly&lt;/a&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://www.wantedly.com/companies/uzabase-inc/projects&quot;&gt;www.wantedly.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;あと、OSSで開発している&lt;a href=&quot;http://e2d3.org/ja/&quot;&gt;E2D3&lt;/a&gt;プロジェクトでは、可視化テンプレートを作成してくれるエンジニアや、基盤システムを開発してくれるエンジニアを探しています。&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;//hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Fe2d3%2Fe2d3&quot; title=&quot;e2d3/e2d3&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;a href=&quot;https://github.com/e2d3/e2d3&quot;&gt;e2d3/e2d3&lt;/a&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://github.com/e2d3/e2d3&quot;&gt;github.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
</description>          <pubDate>Wed, 05 Aug 2015 18:51:31 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450104591467</guid>
          
          <enclosure url="http://cdn-ak.f.st-hatena.com/images/fotolife/c/chimerast/20150805/20150805174130.png" type="image/png" length="0" />
        </item>
      
    
      
      
        <item>
          <title>ウェブサービスの品質保証をお弁当作りに例えたら</title>
          <link>http://tech.uzabase.com/entry/2015/07/02/200356</link>          <description>&lt;p&gt;初めまして。QA（Quality Assurance）を担当しております、えがさ（仮名）と申します。&lt;br /&gt;
QAエンジニアとして、主にBtoC向けWebサービスサイトや、プリンタ、&lt;br /&gt;
携帯電話などのテスティングや、雑誌の原稿作成のお手伝いなどをしておりました。&lt;br /&gt;
ユーザベースに参加してからだいたい半年になります。&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;span style=&quot;font-size: 150%&quot;&gt;&lt;b&gt;SPEEDAの簡単な概要&lt;/b&gt;&lt;br /&gt;&lt;/span&gt;
&lt;br /&gt;
私は、SPEEDAのWebサイト部分がメインの担当ですが、SPEEDAとは。&lt;br /&gt;
一言で表すと、「企業情報などを多角的に取り出せるデータベース」です。&lt;br /&gt;
お客様がSPEEDAを活用して新たな価値を生み出すための&lt;br /&gt;
ベースを支えるのがミッションです。&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;span style=&quot;font-size: 150%&quot;&gt;&lt;b&gt;SPEEDAって・・・。&lt;/b&gt;&lt;br /&gt;&lt;/span&gt;
&lt;br /&gt;
このお仕事をして製品を触るうちに、私はあることを思いつきました。&lt;br /&gt;
SPEEDAって・・・まるでお弁当みたいだな、と。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/u/uzabase/20150630/20150630113418.png&quot; alt=&quot;f:id:uzabase:20150630113418p:plain&quot; title=&quot;f:id:uzabase:20150630113418p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;color: #00cc00&quot;&gt;
お客様にお出しするためのお弁当箱：インフラ　があり&lt;br /&gt;
お客様にコアバリューを提供するデータ：主食　があり&lt;br /&gt;
データをおいしく加工するためのおかず：Webサイト　があり。&lt;br /&gt;
&lt;/span&gt;
全部がそろって活用できる。&lt;br /&gt;
&lt;br /&gt;
しかしお弁当は温かいほうがよりおいしくいただけます。&lt;br /&gt;
ホットな情報には賞味期限もあります。&lt;br /&gt;
そのためにアジャイルでの開発が行われています。&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;span style=&quot;font-size: 150%&quot;&gt;&lt;b&gt;と　こ　ろ　が&lt;/b&gt;&lt;br /&gt;&lt;/span&gt;
&lt;br /&gt;
アジャイルのQAはウォーターフォールの開発とは&lt;br /&gt;
発想が真逆になることもあり。&lt;br /&gt;
最初は目が点になることも多々ありました。&lt;br /&gt;
&lt;br /&gt;
見る間にリリースされるスケジュール感。&lt;br /&gt;
クライテリアの基準。&lt;br /&gt;
&lt;br /&gt;
IEEE829?　ISO9001?&lt;br /&gt;
既存のモデルはアジャイルにそのまま適用できません。&lt;br /&gt;
&lt;br /&gt;
できればテストケースも使いまわしたい。&lt;br /&gt;
漏れなく効率よくまわしたい。&lt;br /&gt;
&lt;br /&gt;
しかし納期と品質という相反する要素をどうやって折り合いを付けるのか？&lt;br /&gt;
のんびりしていると冷めたおいしくないお弁当になってしまいます。&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;span style=&quot;font-size: 150%&quot;&gt;&lt;b&gt;残念なお弁当の一例&lt;/b&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/u/uzabase/20150623/20150623124057.png&quot; alt=&quot;f:id:uzabase:20150623124057p:plain&quot; title=&quot;f:id:uzabase:20150623124057p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;ケンカでもしましたか？&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/u/uzabase/20150623/20150623124258.png&quot; alt=&quot;f:id:uzabase:20150623124258p:plain&quot; title=&quot;f:id:uzabase:20150623124258p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;お弁当にする意味が・・・。&lt;br /&gt;
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/u/uzabase/20150623/20150623124520.png&quot; alt=&quot;f:id:uzabase:20150623124520p:plain&quot; title=&quot;f:id:uzabase:20150623124520p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;ゼリーを弁当と言い張る弱さ。&lt;br /&gt;
&lt;br /&gt;
・・・こんなお弁当を出荷するわけにはいきません。&lt;br /&gt;
&lt;br /&gt;
そこで、まだ和書では少ないアジャイルQAの本や各種勉強会などで勉強を進めつつ&lt;br /&gt;
（KindlePCが日本でも使えるようになったので洋書の&lt;br /&gt;
　QA本が買いやすくなりました！これは嬉しい。）&lt;br /&gt;
既存のモデルをSPEEDA向けにアレンジして以下のセットを&lt;br /&gt;
作りおきすることにしました。&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;span style=&quot;font-size: 150%&quot;&gt;&lt;b&gt;お弁当作り置き&lt;/b&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;&lt;span style=&quot;color: #286f2c&quot;&gt;基礎（下ごしらえ）&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;要求分析→既存製品でしたので簡素化しました。&lt;/li&gt;
&lt;li&gt;ユースケース&lt;/li&gt;
&lt;li&gt;機能分析&lt;/li&gt;
&lt;li&gt;問題分析（魚の骨）
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/u/uzabase/20150623/20150623144912.png&quot; alt=&quot;f:id:uzabase:20150623144912p:plain&quot; title=&quot;f:id:uzabase:20150623144912p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;br /&gt;
SPEEDAの冷蔵庫です&lt;br /&gt;
&lt;br /&gt;
機能の影響範囲をチェックリストにしたがって見ていけば&lt;br /&gt;
基本的なテストケースまでができあがります。&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;br /&gt;
&lt;b&gt;&lt;span style=&quot;color: #286f2c&quot;&gt;案件毎のテストセット作成（おかずづくり）&lt;/span&gt;&lt;br /&gt;&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;基礎をベースに、プロジェクト毎のテスト要件定義は、&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;マインドマップ:テスト観点の洗い出し
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/u/uzabase/20150623/20150623141643.png&quot; alt=&quot;f:id:uzabase:20150623141643p:plain&quot; title=&quot;f:id:uzabase:20150623141643p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;ブラウザのマインドマップ&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;ユースケース：テスト範囲・開発範囲、影響の見積もり&lt;/li&gt;
&lt;li&gt;シーケンス図：実務の考慮漏れ対策&lt;/li&gt;
&lt;li&gt;状態遷移図：シナリオテストのヒントにする&lt;/li&gt;
&lt;li&gt;デシジョンテーブル：パターン洗い出し&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;などを用意してテストセットに落としています。&lt;br /&gt;
どれも目新しいものではありませんが、&lt;br /&gt;
再利用もしやすく時間もかからず重宝しています。&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;&lt;span style=&quot;color: #286f2c&quot;&gt;盛り付け（テストラン）&lt;/span&gt;&lt;br /&gt;&lt;/b&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;テスト（お弁当を詰める）&lt;br /&gt;
　　UT：単体テスト&lt;br /&gt;
　　SIT：結合テスト　直交表やシナリオなど&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;体制（料理人の皆様）&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;こうして、温かいうちに召し上がっていただけるように&lt;br /&gt;
こつこつ資産化しています。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/u/uzabase/20150623/20150623143617.png&quot; alt=&quot;f:id:uzabase:20150623143617p:plain&quot; title=&quot;f:id:uzabase:20150623143617p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;召し上がれ！&lt;br /&gt;
&lt;br /&gt;
お弁当QAを体験してみたいエンジニアの皆さん、おいでませ＾－＾&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&quot;hatena-asin-detail&quot;&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4817192283/hatena-blog-22/&quot;&gt;&lt;img src=&quot;http://ecx.images-amazon.com/images/I/41VcxPXKoYL._SL160_.jpg&quot; class=&quot;hatena-asin-detail-image&quot; alt=&quot;ソフトウェアテストHAYST法入門 品質と生産性がアップする直交表の使い方&quot; title=&quot;ソフトウェアテストHAYST法入門 品質と生産性がアップする直交表の使い方&quot;&gt;&lt;/a&gt;&lt;div class=&quot;hatena-asin-detail-info&quot;&gt;&lt;p class=&quot;hatena-asin-detail-title&quot;&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4817192283/hatena-blog-22/&quot;&gt;ソフトウェアテストHAYST法入門 品質と生産性がアップする直交表の使い方&lt;/a&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;span class=&quot;hatena-asin-detail-label&quot;&gt;作者:&lt;/span&gt; 吉澤正孝/秋山浩一/仙石太郎&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;hatena-asin-detail-label&quot;&gt;出版社/メーカー:&lt;/span&gt; 日科技連出版社&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;hatena-asin-detail-label&quot;&gt;発売日:&lt;/span&gt; 2007/07/26&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;hatena-asin-detail-label&quot;&gt;メディア:&lt;/span&gt; 単行本&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;hatena-asin-detail-label&quot;&gt;購入&lt;/span&gt;: 3人 &lt;span class=&quot;hatena-asin-detail-label&quot;&gt;クリック&lt;/span&gt;: 86回&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/asin/4817192283/hatena-blog-22&quot; target=&quot;_blank&quot;&gt;この商品を含むブログ (20件) を見る&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div class=&quot;hatena-asin-detail-foot&quot;&gt;&lt;/div&gt;&lt;/div&gt; サイン本もってます:-D&lt;/p&gt;

&lt;p&gt;&lt;div class=&quot;hatena-asin-detail&quot;&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4048672347/hatena-blog-22/&quot;&gt;&lt;img src=&quot;http://ecx.images-amazon.com/images/I/51Vxllc4BBL._SL160_.jpg&quot; class=&quot;hatena-asin-detail-image&quot; alt=&quot;ペンとノートで発想を広げる“お絵描き”ノート術 マインドマップ(R)が本当に使いこなせる本 (アスキームック)&quot; title=&quot;ペンとノートで発想を広げる“お絵描き”ノート術 マインドマップ(R)が本当に使いこなせる本 (アスキームック)&quot;&gt;&lt;/a&gt;&lt;div class=&quot;hatena-asin-detail-info&quot;&gt;&lt;p class=&quot;hatena-asin-detail-title&quot;&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4048672347/hatena-blog-22/&quot;&gt;ペンとノートで発想を広げる“お絵描き”ノート術 マインドマップ(R)が本当に使いこなせる本 (アスキームック)&lt;/a&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;span class=&quot;hatena-asin-detail-label&quot;&gt;作者:&lt;/span&gt; 遠竹智寿子,月刊アスキー編集部,ブザン・ワールドワイド・ジャパン、ブザン教育協会&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;hatena-asin-detail-label&quot;&gt;出版社/メーカー:&lt;/span&gt; アスキー・メディアワークス&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;hatena-asin-detail-label&quot;&gt;発売日:&lt;/span&gt; 2008/06/30&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;hatena-asin-detail-label&quot;&gt;メディア:&lt;/span&gt; ムック&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;hatena-asin-detail-label&quot;&gt;購入&lt;/span&gt;: 40人 &lt;span class=&quot;hatena-asin-detail-label&quot;&gt;クリック&lt;/span&gt;: 957回&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/asin/4048672347/hatena-blog-22&quot; target=&quot;_blank&quot;&gt;この商品を含むブログ (66件) を見る&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div class=&quot;hatena-asin-detail-foot&quot;&gt;&lt;/div&gt;&lt;/div&gt;　さらっと読んですぐ使いこなしたい方に&lt;/p&gt;

&lt;p&gt;&lt;div class=&quot;hatena-asin-detail&quot;&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4798118443/hatena-blog-22/&quot;&gt;&lt;img src=&quot;http://ecx.images-amazon.com/images/I/51hcs7og2fL._SL160_.jpg&quot; class=&quot;hatena-asin-detail-image&quot; alt=&quot;ダイアグラム別UML徹底活用 第2版 (DB Magazine SELECTION)&quot; title=&quot;ダイアグラム別UML徹底活用 第2版 (DB Magazine SELECTION)&quot;&gt;&lt;/a&gt;&lt;div class=&quot;hatena-asin-detail-info&quot;&gt;&lt;p class=&quot;hatena-asin-detail-title&quot;&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4798118443/hatena-blog-22/&quot;&gt;ダイアグラム別UML徹底活用 第2版 (DB Magazine SELECTION)&lt;/a&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;span class=&quot;hatena-asin-detail-label&quot;&gt;作者:&lt;/span&gt; 井上樹&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;hatena-asin-detail-label&quot;&gt;出版社/メーカー:&lt;/span&gt; 翔泳社&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;hatena-asin-detail-label&quot;&gt;発売日:&lt;/span&gt; 2011/02/25&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;hatena-asin-detail-label&quot;&gt;メディア:&lt;/span&gt; 大型本&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;hatena-asin-detail-label&quot;&gt;購入&lt;/span&gt;: 1人 &lt;span class=&quot;hatena-asin-detail-label&quot;&gt;クリック&lt;/span&gt;: 5回&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/asin/4798118443/hatena-blog-22&quot; target=&quot;_blank&quot;&gt;この商品を含むブログ (2件) を見る&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div class=&quot;hatena-asin-detail-foot&quot;&gt;&lt;/div&gt;&lt;/div&gt;　Kindle版もあります&lt;/p&gt;
</description>          <pubDate>Thu, 02 Jul 2015 20:03:56 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450098619942</guid>
          
          <enclosure url="http://cdn-ak.f.st-hatena.com/images/fotolife/u/uzabase/20150623/20150623123325.png" type="image/png" length="0" />
        </item>
      
    
      
      
        <item>
          <title>たのしいフォントえらび 〜 GoogleやDEAN &amp; DELUCA、SPEEDAの事例から 〜</title>
          <link>http://tech.uzabase.com/entry/2015/06/11/164718</link>          <description>&lt;p&gt;こんにちは。ユーザベースのデザイナー、広田です。企業・業界情報サービス「SPEEDA」を担当しています。&lt;/p&gt;

&lt;p&gt;とうとう、ブログの順番が回ってきました。
UZABASE Tech Blogの記事ネタは、ユーザベースのエンジニアが一堂に集まる週一のミーティング、そこで話す持ち回りのライトニングトークが元になっています。もちろん、それがすべてではありませんが、記事を書く順番としてはそんな感じです。
そして、2月に入社した私にも、ライトニングトークの順番、すなわちブログを書く順番が回ってきたというわけです。&lt;/p&gt;

&lt;p&gt;テックミーティングの参加者は、当然ですが、エンジニアばかり。
なので、私にとってはチンプンカンプンのエンジニア用語が並ぶわけですが、そんな中で私が話せることってなんだろう？と（一応、真剣に）考えた結果、エンジニアにとっても身近であろうフォントについて話すことにしました。&lt;/p&gt;

&lt;p&gt;というのも、入社以来、ずっと気になっていたSPEEDAのロゴのルーツ。その答えを見つけた良いタイミングでもあったので。&lt;/p&gt;

&lt;p&gt;・・・と、ちょっと前置きが長くなってしまいましたが、テーマは「たのしいフォントえらび 〜 GoogleやDEAN &amp;amp; DELUCA、SPEEDAの事例から 〜」に決定しました。&lt;/p&gt;

&lt;h3&gt;目次&lt;/h3&gt;

&lt;p&gt;・&lt;a href=&quot;#section1&quot;&gt;SPEEDAのロゴのルーツ&lt;/a&gt;&lt;br&gt;
・&lt;a href=&quot;#section2&quot;&gt;SPEEDAのお仲間さがし&lt;/a&gt;&lt;br&gt;
・&lt;a href=&quot;#section3&quot;&gt;有名ブランドのロゴは何のフォントを使ってる？&lt;/a&gt;&lt;br&gt;
・&lt;a href=&quot;#section4&quot;&gt;もしもユーザベースが第3の事業を始めたら...&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;&lt;a name=&quot;section1&quot;&gt;&lt;/a&gt;SPEEDAのロゴのルーツ&lt;/h3&gt;

&lt;p&gt;さて、本題のSPEEDAのロゴですが、残念ながらこのロゴの成り立ちを語れる人を見つけることはできませんでした。それで、ずっとモヤモヤした毎日を過ごしていたわけです。これに似たフォントはなんだろう、、、と。そうやってSPEEDAのロゴのフォントのことをずっと想っていたら、とうとう出会ってしまったんです。&lt;/p&gt;

&lt;p&gt;それは、ある日、突然。まるで天から降ってきたかのように。久しぶりに見たフォント本の中にいました。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/u/uzabase/20150531/20150531104840.jpg&quot; alt=&quot;f:id:uzabase:20150531104840j:plain&quot; title=&quot;f:id:uzabase:20150531104840j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;
2013年発行の「&lt;a href=&quot;http://www.graphicsha.co.jp/shosai.php?snumber3=1305&quot;&gt;TYPOGRAPHY03&lt;/a&gt;」（グラフィック社）&lt;/p&gt;

&lt;p&gt;このムックのここに。ほら。SPEEDAのロゴにそっくりでしょ？
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/u/uzabase/20150531/20150531105845.jpg&quot; alt=&quot;f:id:uzabase:20150531105845j:plain&quot; title=&quot;f:id:uzabase:20150531105845j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;そう「BANK GOTHIC」というフォントです。
（ムックには「 BANNK GOTHIC」とありますが、これは誤植ですね。）&lt;/p&gt;

&lt;p&gt;このフォントに出会った瞬間、もうね、なんとも言えない晴れ晴れした気持ちになったんですよ。出会うべくして出会った赤い糸＝運命の人？みたいな。それはおおげさですが。。。しかも、フォント名にBANK（銀行）とあるなんて。さまざまな企業の財務情報や業界の動向を提供するSPEEDAにぴったりのフォントですね。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/u/uzabase/20150531/20150531111126.png&quot; alt=&quot;f:id:uzabase:20150531111126p:plain&quot; title=&quot;f:id:uzabase:20150531111126p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;BANK GOTHICはサンセリフ、ウロコのない書体です。その中でも幾何学的図形のような骨格を持つジオメトリック・サンセリフです。
ほら、見てください。ほぼ正方形の形をしていますよね？（青枠に注目）&lt;/p&gt;

&lt;p&gt;BANK GOTHICの特徴を他にも挙げると、GやO、Cに見られる正方形部分、この内側部分が直角になっているのに対して、外側が丸みを帯びている点ですね（赤の丸に注目）&lt;/p&gt;

&lt;p&gt;参考までに、&lt;a href=&quot;http://www.fonts.com/ja/browse/designers/morris-fuller-benton&quot;&gt;fonts.com&lt;/a&gt; から引用したBANK GOTHICの生みの親、Morris Fuller Bentonについて記しておきます。&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Morris Fuller Benton – born 1872 in Milwaukee, USA, died 1948 in Morristown, USA – engineer, type designer. After training as a mechanic and engineer, Benton jointed the ATF, where he became type designer and in-house designer with ATF.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;フォント名が明らかになったところで、SPEEDAのロゴの検証をしていきましょう。&lt;/p&gt;

&lt;p&gt;まずは現在のロゴ。これが最終形です。
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/u/uzabase/20150531/20150531112457.png&quot; alt=&quot;f:id:uzabase:20150531112457p:plain&quot; title=&quot;f:id:uzabase:20150531112457p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;そしてこれが一世代前のロゴ。いつまで使われていたのか、正確なところはわかりません。
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/u/uzabase/20150531/20150531112712.png&quot; alt=&quot;f:id:uzabase:20150531112712p:plain&quot; title=&quot;f:id:uzabase:20150531112712p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;今のロゴと比較すると一世代前のロゴは少しスリムでしたね。今のロゴのほうが骨太です。その他にも、PとDに変化が見られますね。現在のロゴのほうが尖った印象になっているとと同時に、より堂々とした感じが伝わってきます。そして男性的。&lt;/p&gt;

&lt;p&gt;ここからは想像ですが、こんな流れでSPEEDAのロゴができあがったのではないかと。
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/u/uzabase/20150603/20150603195800.png&quot; alt=&quot;f:id:uzabase:20150603195800p:plain&quot; title=&quot;f:id:uzabase:20150603195800p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;BANK GOTHICでSPEEDAを組む …（ A）&lt;/li&gt;
&lt;li&gt;（A）をベースに文字の横幅を少しスリムにする（正方形から長方形に）...（B）&lt;/li&gt;
&lt;li&gt;微調整（特にSやE）を繰り返して、一世代前のロゴが完成…（C）&lt;/li&gt;
&lt;li&gt;さらに微調整を繰り返して、今のロゴが完成…（D）&lt;/li&gt;
&lt;/ol&gt;


&lt;h3&gt;&lt;a name=&quot;section2&quot;&gt;&lt;/a&gt;SPEEDAのお仲間さがし&lt;/h3&gt;

&lt;p&gt;SPEEDAのロゴのルーツを知り、俄然、BANK GOTHICが身近になった私。そこで、BANK GOTHICを使ったロゴのお仲間を探してみました。&lt;/p&gt;

&lt;p&gt;Googleで検索してみると、いろいろ見つかります。
いずれもロゴの形を見ての想像でしかありませんが、&lt;a href=&quot;http://www.nintendo.co.jp/ds/&quot;&gt;NINTENDO DS&lt;/a&gt;のNINTENDOやER緊急救命室のER、浅草にあるホテル&lt;a href=&quot;http://www.agoraplace-asakusa.com/&quot;&gt;AGOLA PLACE&lt;/a&gt;などはBANK GOTHICではないかと思います。&lt;/p&gt;

&lt;p&gt;そして、私たちのオフィス近くにもBANK GOTHICを見つけました。
恵比寿駅からオフィスに向かう途中にある恵比寿ビジネスタワー。下の写真をご覧ください。この欧文ロゴがBANK GOTHICっぽいんです。
昨年12月、ユーザベースは外苑前からここ恵比寿に移転しましたが、もしかしたら引っ越し先はこのビルにすべきだったかもしれませんね、、、なんて思ったり。
&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/u/uzabase/20150531/20150531115149.jpg&quot; alt=&quot;f:id:uzabase:20150531115149j:plain&quot; title=&quot;f:id:uzabase:20150531115149j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;&lt;a name=&quot;section3&quot;&gt;&lt;/a&gt;Google、VOGUE、Dean &amp;amp; Delucaなどのブランドロゴはどのフォントを使ってる？&lt;/h3&gt;

&lt;p&gt;ロゴとフォントのことをいろいろ調べていたら、有名ブランドのロゴのフォントも気になってきました。そこで、書籍やインターネットなどで調べてみました。&lt;/p&gt;

&lt;h4&gt;LOUIS VUITTON&lt;/h4&gt;

&lt;p&gt;多くの人の憧れのファッションブランド &lt;a href=&quot;http://jp.louisvuitton.com/&quot;&gt;LOUIS VUITTON&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/u/uzabase/20150602/20150602000621.png&quot; alt=&quot;f:id:uzabase:20150602000621p:plain&quot; title=&quot;f:id:uzabase:20150602000621p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;これはMacにも標準で搭載されているFutura（フツラ、フーツラ）で組まれたフォントです。字と字の間を調整している以外は、ほぼ原型のまま使っているっぽいです。実は、ユーザベースのロゴもFuturaなんですね。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/u/uzabase/20150602/20150602224304.png&quot; alt=&quot;f:id:uzabase:20150602224304p:plain&quot; title=&quot;f:id:uzabase:20150602224304p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h4&gt;VOGUE&lt;/h4&gt;

&lt;p&gt;続いて老舗の女性ファッション誌 &lt;a href=&quot;http://www.vogue.co.jp/&quot;&gt;VOGUE&lt;/a&gt;。このロゴで使われているのは、Didot（ディド）です。こちらもMacをお使いの方は持っているんじゃないでしょうか？&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/u/uzabase/20150602/20150602002309.jpg&quot; alt=&quot;f:id:uzabase:20150602002309j:plain&quot; title=&quot;f:id:uzabase:20150602002309j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;
&lt;a href=&quot;http://(http://www.vogue.co.jp/&quot;&gt;http://www.vogue.co.jp/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;あらためて書店で平積みされている女性ファッション誌を見てみると、Didotのように、細いところと太いところの差がはっきりしているロゴが多いですね。特に大人の女性向けファッション誌に。まるで女性の理想的なプロポーション、華奢に見えるのに出ているところは出ている、、、みたいな。そんな印象を受けるフォントです。Didotはそれに加えて丸みもあるので、女性らしいしなやかさも感じます。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/u/uzabase/20150602/20150602224332.png&quot; alt=&quot;f:id:uzabase:20150602224332p:plain&quot; title=&quot;f:id:uzabase:20150602224332p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h4&gt;DEAN &amp;amp; DELUCA&lt;/h4&gt;

&lt;p&gt;NY生まれのフード＆カフェのお店。見たことのないオシャレなパッケージの食材が並んでいて、本当に楽しいお店です。このロゴはCopperplate Gothicですね。いろんなところで目にする人気のフォントです。こちらも私のMacにはインストールされています。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/u/uzabase/20150602/20150602003156.jpg&quot; alt=&quot;f:id:uzabase:20150602003156j:plain&quot; title=&quot;f:id:uzabase:20150602003156j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;
&lt;a href=&quot;http://www.deandeluca.com/&quot;&gt;http://www.deandeluca.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/u/uzabase/20150602/20150602224348.png&quot; alt=&quot;f:id:uzabase:20150602224348p:plain&quot; title=&quot;f:id:uzabase:20150602224348p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h4&gt;Google&lt;/h4&gt;

&lt;p&gt;そして、いつもお世話になっているGoogle。このロゴで使われているのはCatull BQです。ほぼ手を加えず原型のまま使っているっぽいです。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/u/uzabase/20150602/20150602003639.jpg&quot; alt=&quot;f:id:uzabase:20150602003639j:plain&quot; title=&quot;f:id:uzabase:20150602003639j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;
&lt;a href=&quot;http://www.google.co.jp/&quot;&gt;http://www.google.co.jp/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;//hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.myfonts.com%2Ffonts%2Fberthold%2Fcatull-bq%2F&quot; title=&quot;Catull® BQ - Desktop font « MyFonts&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;a href=&quot;https://www.myfonts.com/fonts/berthold/catull-bq/&quot;&gt;Catull® BQ - Desktop font « MyFonts&lt;/a&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://www.myfonts.com/fonts/berthold/catull-bq/&quot;&gt;www.myfonts.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;h3&gt;&lt;a name=&quot;section4&quot;&gt;&lt;/a&gt;もしもユーザベースが第3の事業を始めたら...&lt;/h3&gt;

&lt;p&gt;さて、ここからは私の妄想です。「もしもユーザベースが第3の事業を始めたら…」を妄想して、こんなときにはこんなフォントが合うんじゃ？という視点で、フォントを探してみました。&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;ユーザベースは、法人向け業界分析情報データベース「SPEEDA」と、経済情報に特化したニュース共有サービス「NewsPicks」という2つのプロダクトの開発・運営を行っています。&lt;/p&gt;&lt;/blockquote&gt;

&lt;h4&gt;もしもユーザベースが「ホラー映画」を作ったら...&lt;/h4&gt;

&lt;p&gt;そこで、こわーいフォントを探してみました。&lt;/p&gt;

&lt;p&gt;さて、どうでしょう？　これはAdobe Creative CloudのTypekitにもあるAdobeのIronwoodというフォントです。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/u/uzabase/20150603/20150603232308.jpg&quot; alt=&quot;f:id:uzabase:20150603232308j:plain&quot; title=&quot;f:id:uzabase:20150603232308j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.fontshop.com/families/ironwood&quot;&gt;https://www.fontshop.com/families/ironwood&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;こうやってみるとそんなに怖そうに見えませんが、少し色を工夫すると、イギリスあたりの誰も住んでいない古い館っぽっく見えてきませんか？　まるでドラキュラの棲家のような。また、不安定な 3本のラインがなかなか良い効果が出ているようで、「裏切り」や「壊れる」といったサスペンス映画の要素も見えてきます。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/u/uzabase/20150604/20150604002217.jpg&quot; alt=&quot;f:id:uzabase:20150604002217j:plain&quot; title=&quot;f:id:uzabase:20150604002217j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;dafont.comを探せば、それはそれは怖いフォントも他にもたくさん見つかるんですが、お勧めしてもいいものとそうでないものの選別が難しいので、ここで紹介するのはやめました。&lt;/p&gt;

&lt;h4&gt;もしもユーザベースが「自然派化粧品」を売り出したら...&lt;/h4&gt;

&lt;p&gt;続いて、同じくAdobe Creative CloudのTypekitにもあるBlakely というフォントを使って、自然派化粧品のロゴを作ってみました。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/u/uzabase/20150604/20150604225039.jpg&quot; alt=&quot;f:id:uzabase:20150604225039j:plain&quot; title=&quot;f:id:uzabase:20150604225039j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.fontshop.com/families/blakely&quot;&gt;https://www.fontshop.com/families/blakely&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;上の図はBoldですが、一番細いLightを使うと印象がぐっと変わります。このLightを使って、今度はNewsPIcksでロゴを作ってみました。&lt;/p&gt;

&lt;p&gt;ターゲットは20代女性くらい？　「いつまでもみずみずしいお肌をキープしたい女性へ」「敏感肌のあなたへ」といったところかな。とても涼しげな感じに仕上がったので、今のこの暑い季節に売り出したいところですね。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/u/uzabase/20150604/20150604225617.png&quot; alt=&quot;f:id:uzabase:20150604225617p:plain&quot; title=&quot;f:id:uzabase:20150604225617p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h4&gt;もしもユーザベースが「子ども服ブランド」を立ち上げたら…&lt;/h4&gt;

&lt;p&gt;最後に、もしもユーザベースが「子ども服ブランド」を立ち上げたら…と題して、楽しくてやさしいフォントを探してみました。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/u/uzabase/20150603/20150603221133.jpg&quot; alt=&quot;f:id:uzabase:20150603221133j:plain&quot; title=&quot;f:id:uzabase:20150603221133j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;
&lt;a href=&quot;https://www.fontshop.com/families/scruff&quot;&gt;https://www.fontshop.com/families/scruff&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;どうでしょうか？ これは scruff というフォントです。
おもちゃ箱をひっくり返したように、とっても楽しそうですよね。&lt;/p&gt;

&lt;p&gt;「S」なんて、おもちゃの電車を走らせる線路に見えてくるし、「f」が2つ並んでいるところは双子の兄弟がひげダンスしているように見えてくる。ほら、他の文字も全部楽しそうですよね。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/u/uzabase/20150603/20150603224352.jpg&quot; alt=&quot;f:id:uzabase:20150603224352j:plain&quot; title=&quot;f:id:uzabase:20150603224352j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;このフォントは、元気な子ども服ブランドや知育の玩具メーカーのロゴにきっと似合うはず。例えば、こんな感じでね。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/u/uzabase/20150604/20150604220204.png&quot; alt=&quot;f:id:uzabase:20150604220204p:plain&quot; title=&quot;f:id:uzabase:20150604220204p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;ちなみに、キャッチコピーで使用したフォントは「&lt;a href=&quot;https://www.fontshop.com/families/blakely&quot;&gt;やさしさゴシック&lt;/a&gt;」というフリーのフォントです。日本語のフリーフォントでこれだけ文字の種類が揃っているのは珍しいのでとても貴重です。&lt;/p&gt;

&lt;p&gt;長々とフォントについて書きましたが、最後に、敬愛する日本人フォントデザイナー、小林章さんの言葉を載せて、締めくくりたいと思います。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/u/uzabase/20150531/20150531130901.png&quot; alt=&quot;f:id:uzabase:20150531130901p:plain&quot; title=&quot;f:id:uzabase:20150531130901p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;ユーザベースではエンジニアを募集しています！&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;大規模で多種多様なデータを扱うことに興味がある方&lt;/li&gt;
&lt;li&gt;とにかく技術が好きな方&lt;/li&gt;
&lt;li&gt;様々なバックグラウンドを持つ人材と働いてみたい方&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;以上に一つでも当てはまる方は、一度オフィスに遊びに来てください！&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;//hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.wantedly.com%2Fprojects%2F11497&quot; title=&quot;巨大金融メディアに打ち勝つサービスをつくりたいエンジニアWanted! by 株式会社ユーザベース&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;a href=&quot;https://www.wantedly.com/projects/11497&quot;&gt;巨大金融メディアに打ち勝つサービスをつくりたいエンジニアWanted! by 株式会社ユーザベース&lt;/a&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://www.wantedly.com/projects/11497&quot;&gt;www.wantedly.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;【参考サイト・書籍】&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;//hatenablog-parts.com/embed?url=http%3A%2F%2Fmatome.naver.jp%2Fodai%2F2133151854135573901&quot; title=&quot;有名企業やサイトのロゴに使用されているフォントまとめ - NAVER まとめ&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;a href=&quot;http://matome.naver.jp/odai/2133151854135573901&quot;&gt;有名企業やサイトのロゴに使用されているフォントまとめ - NAVER まとめ&lt;/a&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;http://matome.naver.jp/odai/2133151854135573901&quot;&gt;matome.naver.jp&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;//hatenablog-parts.com/embed?url=http%3A%2F%2Fmatome.naver.jp%2Fodai%2F2135168573243723001&quot; title=&quot;名作フォントと有名ロゴのおいしい関係 - NAVER まとめ&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;a href=&quot;http://matome.naver.jp/odai/2135168573243723001&quot;&gt;名作フォントと有名ロゴのおいしい関係 - NAVER まとめ&lt;/a&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;http://matome.naver.jp/odai/2135168573243723001&quot;&gt;matome.naver.jp&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&quot;hatena-asin-detail&quot;&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4766124758/hatena-blog-22/&quot;&gt;&lt;img src=&quot;http://ecx.images-amazon.com/images/I/51fM19fMW2L._SL160_.jpg&quot; class=&quot;hatena-asin-detail-image&quot; alt=&quot;TYPOGRAPHY(タイポグラフィ)03  デザイナーなら覚えておくべき 厳選フォント350&quot; title=&quot;TYPOGRAPHY(タイポグラフィ)03  デザイナーなら覚えておくべき 厳選フォント350&quot;&gt;&lt;/a&gt;&lt;div class=&quot;hatena-asin-detail-info&quot;&gt;&lt;p class=&quot;hatena-asin-detail-title&quot;&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4766124758/hatena-blog-22/&quot;&gt;TYPOGRAPHY(タイポグラフィ)03  デザイナーなら覚えておくべき 厳選フォント350&lt;/a&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;span class=&quot;hatena-asin-detail-label&quot;&gt;作者:&lt;/span&gt; グラフィック社編集部&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;hatena-asin-detail-label&quot;&gt;出版社/メーカー:&lt;/span&gt; グラフィック社&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;hatena-asin-detail-label&quot;&gt;発売日:&lt;/span&gt; 2013/05/07&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;hatena-asin-detail-label&quot;&gt;メディア:&lt;/span&gt; 大型本&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/asin/4766124758/hatena-blog-22&quot; target=&quot;_blank&quot;&gt;この商品を含むブログ (4件) を見る&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div class=&quot;hatena-asin-detail-foot&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&quot;hatena-asin-detail&quot;&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4568504287/hatena-blog-22/&quot;&gt;&lt;img src=&quot;http://ecx.images-amazon.com/images/I/51Dtxr9LBSL._SL160_.jpg&quot; class=&quot;hatena-asin-detail-image&quot; alt=&quot;フォントのふしぎ  ブランドのロゴはなぜ高そうに見えるのか？&quot; title=&quot;フォントのふしぎ  ブランドのロゴはなぜ高そうに見えるのか？&quot;&gt;&lt;/a&gt;&lt;div class=&quot;hatena-asin-detail-info&quot;&gt;&lt;p class=&quot;hatena-asin-detail-title&quot;&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4568504287/hatena-blog-22/&quot;&gt;フォントのふしぎ  ブランドのロゴはなぜ高そうに見えるのか？&lt;/a&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;span class=&quot;hatena-asin-detail-label&quot;&gt;作者:&lt;/span&gt; 小林章&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;hatena-asin-detail-label&quot;&gt;出版社/メーカー:&lt;/span&gt; 美術出版社&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;hatena-asin-detail-label&quot;&gt;発売日:&lt;/span&gt; 2011/01/17&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;hatena-asin-detail-label&quot;&gt;メディア:&lt;/span&gt; 単行本（ソフトカバー）&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;hatena-asin-detail-label&quot;&gt;購入&lt;/span&gt;: 11人 &lt;span class=&quot;hatena-asin-detail-label&quot;&gt;クリック&lt;/span&gt;: 235回&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/asin/4568504287/hatena-blog-22&quot; target=&quot;_blank&quot;&gt;この商品を含むブログ (33件) を見る&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div class=&quot;hatena-asin-detail-foot&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&quot;hatena-asin-detail&quot;&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4756245676/hatena-blog-22/&quot;&gt;&lt;img src=&quot;http://ecx.images-amazon.com/images/I/51CbPBYN4VL._SL160_.jpg&quot; class=&quot;hatena-asin-detail-image&quot; alt=&quot;新しい価値を生み出すためのブランディングプロセス&quot; title=&quot;新しい価値を生み出すためのブランディングプロセス&quot;&gt;&lt;/a&gt;&lt;div class=&quot;hatena-asin-detail-info&quot;&gt;&lt;p class=&quot;hatena-asin-detail-title&quot;&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4756245676/hatena-blog-22/&quot;&gt;新しい価値を生み出すためのブランディングプロセス&lt;/a&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;span class=&quot;hatena-asin-detail-label&quot;&gt;出版社/メーカー:&lt;/span&gt; パイインターナショナル&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;hatena-asin-detail-label&quot;&gt;発売日:&lt;/span&gt; 2015/01/20&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;hatena-asin-detail-label&quot;&gt;メディア:&lt;/span&gt; 単行本&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/asin/4756245676/hatena-blog-22&quot; target=&quot;_blank&quot;&gt;この商品を含むブログを見る&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div class=&quot;hatena-asin-detail-foot&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;
</description>          <pubDate>Thu, 11 Jun 2015 16:47:18 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450095961553</guid>
          
          <enclosure url="http://cdn-ak.f.st-hatena.com/images/fotolife/u/uzabase/20150531/20150531104840.jpg" type="image/jpeg" length="0" />
        </item>
      
    
      
      
        <item>
          <title>ユーザベースの自由な社風を支える「みんなの会」のつくり方（動画環境編）</title>
          <link>http://tech.uzabase.com/entry/2015/06/02/183335</link>          <description>&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/u/uzabase/20150526/20150526122646.jpg&quot; alt=&quot;f:id:uzabase:20150526122646j:plain&quot; title=&quot;f:id:uzabase:20150526122646j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;企業・業界情報データベース&lt;a href=&quot;http://www.uzabase.com/speeda/&quot;&gt;「SPEEDA」&lt;/a&gt;の開発チームに所属している川口と申します。&lt;/p&gt;

&lt;p&gt;ユーザベースで大事にしている価値観として、「&lt;strong&gt;自由主義で行こう&lt;/strong&gt;」があります。きちんと仕事の結果を出せば、出社時間や服装は自由で、出社の義務もないというものです。&lt;/p&gt;

&lt;p&gt;一方、自由に対する責任の一つとして、毎週一回の全社会議だけは全員出席する必要があります。この全社会議が「&lt;strong&gt;みんなの会（Town Hall Meeting）&lt;/strong&gt;」です。ここでは各チームの進捗報告やリリースされた機能の発表、事務連絡や新メンバーの紹介などを行っています。（以前は「全体進捗会議」という名前でしたが、社内投票の結果、この名前になりました。）&lt;/p&gt;

&lt;p&gt;私が入社した2011年当時、オフィスは東京だけで、全体会議の出席メンバーも20人ぐらいでしたので、会議室に全員入り切るぐらいでした。それからオフィスも2回移転して、上海、シンガポール、香港と海外にも拠点も広がり、全体で160人前後のメンバーになりました。今でも全員が出席するスタイルでの会議は続いているのですが、各海外拠点への生中継を毎回行うようになり、海外メンバーからの発表や質問なども可能にしています。&lt;/p&gt;

&lt;p&gt;このシステムの構築やオペレーションには私もかかわっており、試行錯誤を続けながらバージョンアップしてきました。この記事では、そんな「みんなの会」を支えている現在のシステムについて少しご紹介したいと思います。&lt;/p&gt;

&lt;p&gt;なお、「みんなの会」については、先日公開されたSELECKの記事や、本ブログの竹内（当社チーフテクノロジスト）の記事でもご紹介しています。&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;//hatenablog-parts.com/embed?url=https%3A%2F%2Fseleck.cc%2Farticle%2F11&quot; title=&quot;ベンチャーからグローバル企業へ　ユーザベースCTOが作った「ニコ動」式の全社会議 | SELECK&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;a href=&quot;https://seleck.cc/article/11&quot;&gt;ベンチャーからグローバル企業へ　ユーザベースCTOが作った「ニコ動」式の全社会議 | SELECK&lt;/a&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://seleck.cc/article/11&quot;&gt;seleck.cc&lt;/a&gt;&lt;/cite&gt;
&lt;iframe src=&quot;http://tech.uzabase.com/embed/2015/06/01/143202&quot; title=&quot;ニコニコメソッドプレゼンを全社会議に取り入れてみたら会議が面白くなった - UZABASE Tech Blog&quot; class=&quot;embed-card embed-blogcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;a href=&quot;http://tech.uzabase.com/entry/2015/06/01/143202&quot;&gt;ニコニコメソッドプレゼンを全社会議に取り入れてみたら会議が面白くなった - UZABASE Tech Blog&lt;/a&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;http://tech.uzabase.com/entry/2015/06/01/143202&quot;&gt;tech.uzabase.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;h3&gt;目次&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1&quot;&gt;Zoomを使って全世界と中継&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2&quot;&gt;スライドの配信もZoomの画面共有で&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3&quot;&gt;「参加者の顔が見えること」が何より重要&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#4&quot;&gt;Wii Uのマイクも使って音声環境を改善&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#5&quot;&gt;有志メンバーによる同時通訳&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#6&quot;&gt;ニコニコメソッドプレゼンで一体感のあるコミュニケーション&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#7&quot;&gt;まとめ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;&lt;a name=&quot;1&quot;&gt;&lt;/a&gt;Zoomを使って全世界と中継&lt;/h2&gt;

&lt;p&gt;「みんなの会」の中心となるWeb会議システムですが、&lt;a href=&quot;http://zoom.us/&quot;&gt;「Zoom」&lt;/a&gt;という製品を使用しています。いろいろな製品がある中で、「Zoom」では最大100ユーザまで同時接続可能というところが大きな特長です。&lt;/p&gt;

&lt;p&gt;ユーザベースで現在使用しているのは25ユーザまでのプランで、海外拠点の各メンバーが接続するだけでなく、在宅や出張先からのリモートでの参加も出来ています。&lt;/p&gt;

&lt;p&gt;なお、Zoomの無料アカウントでは最大40分で会議が切れてしまうという制限があるため、長時間会議を行う場合はProアカウント（$9.99/Month）が必要になります。&lt;/p&gt;

&lt;p&gt;会議への参加は、主催者からの招待メール中のリンクをクリックすることで行いますが、初めて参加する場合はアプリのインストールも自動的に行われます。&lt;/p&gt;

&lt;p&gt;Windows、Macはもちろん、iPad・iPhoneやAndroid用のアプリも公開されていて、スマートフォンでも後述の画面共有やチャットを含めた一通りの機能が可能です。&lt;/p&gt;

&lt;p&gt;「Zoom」はなかなか高機能でよく出来ていると思うのですが、「Skype」などに比べると若干取っつきにくいためか、日本ではあまり知られていなさそうです。これからの普及に期待しています。&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;//hatenablog-parts.com/embed?url=http%3A%2F%2Fzoom.us%2F&quot; title=&quot;Video Conferencing, Web Conferencing, Online Meetings, Screen Sharing&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;a href=&quot;http://zoom.us/&quot;&gt;Video Conferencing, Web Conferencing, Online Meetings, Screen Sharing&lt;/a&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;http://zoom.us/&quot;&gt;zoom.us&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;h2&gt;&lt;a name=&quot;2&quot;&gt;&lt;/a&gt;スライドの配信もZoomの画面共有で&lt;/h2&gt;

&lt;p&gt;「みんなの会」では、東京オフィスのプロジェクター画面に、発表内容をまとめたプレゼンテーションファイルを映します。同時に、「Zoom」の画面共有機能によって、海外やリモートでの参加者にも同じ画面が表示できます。&lt;/p&gt;

&lt;p&gt;リモート表示ではレスポンスが気になるところですが、スライド切り替え時の反映もスムーズですし、画質がオリジナルより大きく劣ることもありませんので、十分実用的だと思います。&lt;/p&gt;

&lt;p&gt;「Zoom」の画面共有では、共有対象のウィンドウをアプリ単位もしくはデスクトップ全体で指定します。「みんなの会」のプレゼンテーションファイルはGoogle Driveのスライド形式（Googleスライド）で作成しており、ブラウザにてプレゼンテーションを行いますので、Google Chromeのウィンドウを共有しています。ケースバイケースですが、他の会議では、お手軽にデスクトップ全体を共有することも多いです。&lt;/p&gt;

&lt;p&gt;ところで、スライドを開いて、メニューから「プレゼンテーションを開始」を実行すると、プレゼンテーションが全画面で表示されますが、Zoomでブラウザウィンドウを共有している場合は、全画面表示は共有対象外となるので、他のユーザにスライド画面が映らなくなってしまいます。&lt;/p&gt;

&lt;p&gt;そこで、Google Chromeを使用する場合のみですが、「スピーカーノートを使って開始」のメニューを実行すると、ブラウザのタブ内にプレゼンテーション画面が表示されます。少しマニアックな話ですが、Zoomを使ってGoogleスライドの画面共有を行う場合はこの方法がおすめです。&lt;/p&gt;

&lt;p&gt;ちなみにGoogleスライドですが、PowerPoint等と比較すると凝ったデザインや動きのものは作成しにくいですが、一つのファイルを複数人で同時に編集することが可能で、マージや差し替えの手間が省けるので、こういった会議の資料作成には非常に便利です。&lt;/p&gt;

&lt;p&gt;なお、PowerPoint等のプレゼンテーションファイルからの変換も可能ですが、レイアウトが崩れることが多いので、注意が必要です。&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;//hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.google.com%2Fintl%2Fja_jp%2Fdrive%2F&quot; title=&quot;Google ドライブ - 写真やドキュメントなど、ファイルのクラウド ストレージとバックアップ&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;a href=&quot;https://www.google.com/intl/ja_jp/drive/&quot;&gt;Google ドライブ - 写真やドキュメントなど、ファイルのクラウド ストレージとバックアップ&lt;/a&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://www.google.com/intl/ja_jp/drive/&quot;&gt;www.google.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;h2&gt;&lt;a name=&quot;3&quot;&gt;&lt;/a&gt;「参加者の顔が見えること」が何より重要&lt;/h2&gt;

&lt;p&gt;「Zoom」では、会議の参加者の映像を画面に映すことが可能です。参加者がカメラを持っている場合に限定されますが、やはり声だけ聞こえるよりも、顔の表情も一緒に見えるのは重要なポイントだと思います。&lt;/p&gt;

&lt;p&gt;なお、東京オフィスの場合は会議室に何十人ものメンバーが集まるので、通常のWebカメラでは全員を1つの画面に映すことは困難です。そこでいろいろ試しているので、少し紹介します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;BUFFALOの&lt;a href=&quot;http://buffalo.jp/product/multimedia/web-camera/bsw180abk/&quot;&gt;「BSW180ABK」&lt;/a&gt;というWebカメラは、180°の広角レンズで会議室全体の様子を映すことが出来て便利です。
ただし、ズーム機能も無いため、細かい部分を映すのには向いていません。&lt;/li&gt;
&lt;li&gt;発表者の表情が見えなかったり、質問者が誰か分からないという意見が挙がっていたので、私物のDVビデオカメラを持ち込んでみました。カメラマンが発表者や質問者にズームしたり、会議室全体を映したりと工夫出来るし、映りが良いと好評なようです。&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;しばらくはDVビデオカメラを使用してみたいと思いますが、段々と設備が大がかりになってきました。&lt;/p&gt;

&lt;p&gt;なお、MacへのDVビデオカメラの接続ですが、&lt;a href=&quot;http://store.apple.com/jp/product/MD464ZM&quot;&gt;「Thunderbolt - FireWireアダプタ」&lt;/a&gt;と9pin-4pinのFireWireケーブルを使用しています。これで、MacからはWebカメラと同様のビデオデバイスとして認識されますので、Zoomの設定画面にて選択することが可能になります。&lt;/p&gt;

&lt;p&gt;&lt;div class=&quot;hatena-asin-detail&quot;&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/B00E0D1RWI/hatena-blog-22/&quot;&gt;&lt;img src=&quot;http://ecx.images-amazon.com/images/I/31kRCg1Rh-L._SL160_.jpg&quot; class=&quot;hatena-asin-detail-image&quot; alt=&quot;iBUFFALO マイク内蔵60万画素WEBカメラ 180°広角モデル BSW180ABK&quot; title=&quot;iBUFFALO マイク内蔵60万画素WEBカメラ 180°広角モデル BSW180ABK&quot;&gt;&lt;/a&gt;&lt;div class=&quot;hatena-asin-detail-info&quot;&gt;&lt;p class=&quot;hatena-asin-detail-title&quot;&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/B00E0D1RWI/hatena-blog-22/&quot;&gt;iBUFFALO マイク内蔵60万画素WEBカメラ 180°広角モデル BSW180ABK&lt;/a&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;span class=&quot;hatena-asin-detail-label&quot;&gt;出版社/メーカー:&lt;/span&gt; バッファロー&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;hatena-asin-detail-label&quot;&gt;発売日:&lt;/span&gt; 2013/08/25&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;hatena-asin-detail-label&quot;&gt;メディア:&lt;/span&gt; Personal Computers&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/asin/B00E0D1RWI/hatena-blog-22&quot; target=&quot;_blank&quot;&gt;この商品を含むブログを見る&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div class=&quot;hatena-asin-detail-foot&quot;&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;hatena-asin-detail&quot;&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/B008RXYOKY/hatena-blog-22/&quot;&gt;&lt;img src=&quot;http://ecx.images-amazon.com/images/I/21sRgqMdUKL._SL160_.jpg&quot; class=&quot;hatena-asin-detail-image&quot; alt=&quot;アップル Thunderbolt - FireWireアダプタ MD464ZM/A&quot; title=&quot;アップル Thunderbolt - FireWireアダプタ MD464ZM/A&quot;&gt;&lt;/a&gt;&lt;div class=&quot;hatena-asin-detail-info&quot;&gt;&lt;p class=&quot;hatena-asin-detail-title&quot;&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/B008RXYOKY/hatena-blog-22/&quot;&gt;アップル Thunderbolt - FireWireアダプタ MD464ZM/A&lt;/a&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;span class=&quot;hatena-asin-detail-label&quot;&gt;出版社/メーカー:&lt;/span&gt; アップル&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;hatena-asin-detail-label&quot;&gt;メディア:&lt;/span&gt; Personal Computers&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/asin/B008RXYOKY/hatena-blog-22&quot; target=&quot;_blank&quot;&gt;この商品を含むブログを見る&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div class=&quot;hatena-asin-detail-foot&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;&lt;a name=&quot;4&quot;&gt;&lt;/a&gt;Wii Uのマイクも使って音声環境を改善&lt;/h2&gt;

&lt;p&gt;「みんなの会」では、海外を含めて、毎回20台ぐらいのPCがWeb会議に参加しています。&lt;/p&gt;

&lt;p&gt;インターネットを使用しているので、一時的に音声が途切れたりする時もありますが、音声の品質や遅延はあまり気にならないため、その点でもZoomは高評価です。&lt;/p&gt;

&lt;p&gt;ところで、会議室に複数の人が集まってWeb会議に参加する場合、通常ではマイクは一つだけ設置すると思いますが、マイクから離れた場所にいる人の声が聞き取りづらく、聞く側にとってストレスになることがしばしばあります。&lt;/p&gt;

&lt;p&gt;そこで、マイクについてもいろいろ試しているので、少し紹介いたします。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SANWA DIRECTの&lt;a href=&quot;http://direct.sanwa.co.jp/ItemPage/400-MC001&quot;&gt;「400-MC001」&lt;/a&gt;というUSB接続のスタンドマイクは、高集音かつ全指向性の本格的な製品です。
声の大きさにもよりますが、10mぐらい離れた場所に座っている人の発言でもちゃんと拾ってくれるので、なかなか優秀です。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.nintendo.co.jp/wiiu/hardware/accessories/index.html&quot;&gt;Nitendo Wii U&lt;/a&gt;のワイヤレスマイク「WUP-019」ですが、実はWindowsやMacでも使用することが出来ます。マイクのレシーバーをUSB端子に差すだけで、Macから音声入力デバイスと認識されるので、とても簡単です。音声も非常にクリアに聞こえるので、大いに活用しています。&lt;/li&gt;
&lt;li&gt;Wii Uでは2本同時に使用出来るそうなので、Macにワイヤレスマイク「WUP-019」を2台繋いでみましたが、残念ながら1つしか認識しないようです。&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;ワイヤレスマイクとスタンドマイクを同時に使用することが出来れば最高なのですが、Zoomではマイク、スピーカーとも1つのデバイスしか設定出来ません。&lt;/p&gt;

&lt;p&gt;そこで、何か手は無いかと探したところ、Macでは以下のソフトウェアを組み合わせることで可能ということが分かりました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://code.google.com/p/soundflower/&quot;&gt;Soundflower&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;「仮想サウンドデバイス」で、例えばMacでインターネット中継を行う時に、同じMacで再生した音楽ファイルを配信するような場合に使用出来ます。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.kawauso.com/ladiocast&quot;&gt;LadioCast&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;複数デバイスからの音声入力をミックスしたり、複数デバイスに出力することの出来るミキサーです。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;LadioCastでワイヤレスマイクと集音マイクをミキシングしてSoundflowerに出力し、Zoomの音声入力デバイスとしてSoundflowerを指定することで、両方のマイクの音声がWeb会議の参加者に聞こえるという仕組みです。&lt;/p&gt;

&lt;p&gt;これによって、発表者がワイヤレスマイクで話しながら、聴衆の拍手や笑い声を集音マイクで同時に拾うことが出来ています。さらに、LadioCastで発表者の声に合わせて音量を調整することで、より聞き取りやすくなっていると思います。&lt;/p&gt;

&lt;p&gt;また、現在のオフィスでは、HDMI出力のプロジェクタにスピーカーが付いており、東京オフィス以外のメンバーの発言はこのプロジェクターから聞こえます。&lt;/p&gt;

&lt;p&gt;ハウリングを避けるため、通常ではマイクの音はスピーカーから聞こえないのですが、LadioCastの設定を工夫して、ワイヤレスマイクの音声のみ、プロジェクターに出すようにしています。東京オフィスのように広い部屋では、発表者の声が聞こえにくいこともあるので、この簡易拡声器機能がとても便利です。&lt;/p&gt;

&lt;p&gt;なお、「Zoom」に参加している各メンバーは、基本的にマイクはミュート状態で、発言時のみマイクをオンにするようにしています。そのままでは、キーボードの操作音や周囲の会話などを拾ってしまうためです。&lt;/p&gt;

&lt;p&gt;&lt;div class=&quot;hatena-asin-detail&quot;&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/B008F1S3PU/hatena-blog-22/&quot;&gt;&lt;img src=&quot;http://ecx.images-amazon.com/images/I/41GPhvAFODL._SL160_.jpg&quot; class=&quot;hatena-asin-detail-image&quot; alt=&quot;サンワダイレクト WEB会議マイク USBマイク PCマイク 高集音 全指向性&amp;単一指向性 400-MC001&quot; title=&quot;サンワダイレクト WEB会議マイク USBマイク PCマイク 高集音 全指向性&amp;単一指向性 400-MC001&quot;&gt;&lt;/a&gt;&lt;div class=&quot;hatena-asin-detail-info&quot;&gt;&lt;p class=&quot;hatena-asin-detail-title&quot;&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/B008F1S3PU/hatena-blog-22/&quot;&gt;サンワダイレクト WEB会議マイク USBマイク PCマイク 高集音 全指向性&amp;単一指向性 400-MC001&lt;/a&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;span class=&quot;hatena-asin-detail-label&quot;&gt;出版社/メーカー:&lt;/span&gt; サンワダイレクト&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;hatena-asin-detail-label&quot;&gt;メディア:&lt;/span&gt; Personal Computers&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/asin/B008F1S3PU/hatena-blog-22&quot; target=&quot;_blank&quot;&gt;この商品を含むブログを見る&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div class=&quot;hatena-asin-detail-foot&quot;&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;hatena-asin-detail&quot;&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/B00FKSWGVI/hatena-blog-22/&quot;&gt;&lt;img src=&quot;http://ecx.images-amazon.com/images/I/41DTcM%2BHU5L._SL160_.jpg&quot; class=&quot;hatena-asin-detail-image&quot; alt=&quot;Wii U ワイヤレスマイク&quot; title=&quot;Wii U ワイヤレスマイク&quot;&gt;&lt;/a&gt;&lt;div class=&quot;hatena-asin-detail-info&quot;&gt;&lt;p class=&quot;hatena-asin-detail-title&quot;&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/B00FKSWGVI/hatena-blog-22/&quot;&gt;Wii U ワイヤレスマイク&lt;/a&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;span class=&quot;hatena-asin-detail-label&quot;&gt;出版社/メーカー:&lt;/span&gt; 任天堂&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;hatena-asin-detail-label&quot;&gt;発売日:&lt;/span&gt; 2013/12/12&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;hatena-asin-detail-label&quot;&gt;メディア:&lt;/span&gt; Video Game&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/asin/B00FKSWGVI/hatena-blog-22&quot; target=&quot;_blank&quot;&gt;この商品を含むブログを見る&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div class=&quot;hatena-asin-detail-foot&quot;&gt;&lt;/div&gt;&lt;/div&gt;
&lt;a href=&quot;https://code.google.com/p/soundflower/&quot;&gt;https://code.google.com/p/soundflower/&lt;/a&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://code.google.com/p/soundflower/&quot;&gt;code.google.com&lt;/a&gt;&lt;/cite&gt;
&lt;a href=&quot;http://blog.kawauso.com/ladiocast&quot;&gt;http://blog.kawauso.com/ladiocast&lt;/a&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;http://blog.kawauso.com/ladiocast&quot;&gt;blog.kawauso.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;h2&gt;&lt;a name=&quot;5&quot;&gt;&lt;/a&gt;有志メンバーによる同時通訳&lt;/h2&gt;

&lt;p&gt;海外のオフィスも繋いで会議を行う場合に避けられない問題として、言語の壁があります。これについても、様々なトライアルを行ってきました。&lt;/p&gt;

&lt;p&gt;例えば、「みんなの会」を資料・発表とも英語で行っていた時期もありました。ユーザベースには英語の得意なメンバーも多いので、各チームとも流暢な英語にて発表が行われていましたが、もちろん全員そうではありません。私は英語が得意ではないので、事前に英訳した原稿を用意して臨んだのですが、ちゃんと伝わっていたのか怪しく、申し訳なかったです。&lt;/p&gt;

&lt;p&gt;現在は、日本語版の資料と英語版の資料を用意して、2画面あるプロジェクターに片方ずつ映すようにしています。なお、Zoomで共有するのは英語版のみで、日本語版の画面はそれ専用のPCで映しています。ページ送りはそれぞれ手動で進めていますが、自動的に同期する仕組みも構想中です。&lt;/p&gt;

&lt;p&gt;発表は当人の得意な言語で行われますが、Zoomのチャットで、有志メンバーによる同時翻訳が行われています。このため、プロジェクター画面に、プレゼンテーション資料とチャット画面を並べて映しています。翻訳を行うメンバーは、会議室に持ち込んだPCからZoomの会議に参加して、日本語の発表や質問は英語に、英語の発表や質問は日本語に訳して、リアルタイムにチャットに投稿しています。&lt;/p&gt;

&lt;p&gt;また、チャットによる文字の通訳だけでは思いが伝わりにくいということで、さらに有志の方に立候補していただき、発表の同時通訳にもチャレンジしています。発表と通訳を交互に行う逐次通訳では倍の時間が必要なので、同時通訳で行うのが理想ですが、システム面での難易度も上がります。&lt;/p&gt;

&lt;p&gt;そもそも、Web会議システムで二カ国語の音声に対応しているものはあまり無いようで、Zoomもサポートしていません。そこで、Zoomとは別の、通訳音声用の独立した会議システムにて配信しています。具体的には、各オフィスの専用PCをSkypeで繋いでおり、海外オフィス側でもSkype用のPCで通訳の音声を受信しています。通訳の音声はオフィス全体にスピーカーで流しており、各メンバーは必要に応じてZoomの音声と聞き分けています。&lt;/p&gt;

&lt;p&gt;このような構成にしている理由は、当初は1台でZoomとSkypeを両方配信しようとしたのですが、配信側も受信側も準備にも時間がかかるし、PCの動作も不安定になってしまったためです。「みんなの会」は全社で行う会議ですので、トラブルが起きた場合でもすぐ復旧出来るように、なるべくシンプルな構成を心がけています。&lt;/p&gt;

&lt;p&gt;なお、資料に沿った発表だけとは限らないし、専門用語が多く出てくる内容もあるので、翻訳を引き受けていただいている方々にはとても感謝しています。当社代表・新野による「白熱教室」という、その場でのディスカッションが主体となることもあるのですが、そういう会では翻訳がかなりハードだそうです。&lt;/p&gt;

&lt;h2&gt;&lt;a name=&quot;6&quot;&gt;&lt;/a&gt;ニコニコメソッドプレゼンで一体感のあるコミュニケーション&lt;/h2&gt;

&lt;p&gt;「みんなの会」に社員がもっと参加するための仕組みとして、当社オリジナルの“字幕コメントシステム”を取り入れました。これは、Google Chromeの機能拡張を使って、発表内容についての参加者からのコメントを、ニコニコ動画のようにプレゼンテーション画面上に字幕で流すものです。本記事の冒頭に示した画像が、スライドに字幕コメントがつけられている様子です。（ブログで紹介用に弾幕を貼ってもらいました。）&lt;/p&gt;

&lt;p&gt;このシステムは、当社チーフテクノロジストの竹内が一晩で作成したそうです。これについては、当ブログにて竹内から技術背景についてご紹介しました。&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;http://tech.uzabase.com/embed/2015/06/01/143202&quot; title=&quot;ニコニコメソッドプレゼンを全社会議に取り入れてみたら会議が面白くなった - UZABASE Tech Blog&quot; class=&quot;embed-card embed-blogcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;a href=&quot;http://tech.uzabase.com/entry/2015/06/01/143202&quot;&gt;ニコニコメソッドプレゼンを全社会議に取り入れてみたら会議が面白くなった - UZABASE Tech Blog&lt;/a&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;http://tech.uzabase.com/entry/2015/06/01/143202&quot;&gt;tech.uzabase.com&lt;/a&gt;&lt;/cite&gt;
&lt;iframe src=&quot;//hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Fchimerast%2Fniconico-speenya&quot; title=&quot;chimerast/niconico-speenya&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;a href=&quot;https://github.com/chimerast/niconico-speenya&quot;&gt;chimerast/niconico-speenya&lt;/a&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://github.com/chimerast/niconico-speenya&quot;&gt;github.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;全社会議というと真面目で少し堅いイメージがありますので、当初はこのようなコンテンツが受け入れられるのか不安でした。ところが、いざ始めて見ると予想以上に好評で、もはや「みんなの会」に無くてはならないツールになりました。&lt;/p&gt;

&lt;p&gt;例えば、SPEEDAやNewsPicksの新機能のリリースについての報告では、「いいね！」のマークが画面を埋め尽くしたり、バックオフィスからの経費精算手順の説明では、いつも間違っていた人から「すみませんでした」というコメントがあったり…。今までよりもリアクションが遙かにしやすくなり、会議に参加しているという意識が強くなって、「みんなの会」の雰囲気もかなり変わったと思います。&lt;/p&gt;

&lt;h2&gt;&lt;a name=&quot;7&quot;&gt;&lt;/a&gt;まとめ&lt;/h2&gt;

&lt;p&gt;今回の記事では、「みんなの会」のシステムについて、一通りご紹介いたしました。まだまだ完成形とは言えず、課題も多いのですが、その一方でかなり複雑になってしまっているので、よりシンプルにしていきたいと思います。機会があれば、さらに細かい部分についても、詳しく説明してみたいと思います。&lt;/p&gt;

&lt;p&gt;ユーザベースの「世界一の経済メディアをつくる」というミッション実現のため、今後さらに社員数も増え、新しいオフィスも開設されていくと思います。物理的な距離があっても、「みんなの会」には全てのメンバーが同じように参加出来るべきです。完全な実現は難しいかもしれませんが、メンバーのアイデアとテクノロジーの力で、少しでも理想に近付けられればと思います。&lt;/p&gt;

&lt;p&gt;ユーザベースでは、SPEEDAやNewsPicksに携わっていただくエンジニアを募集中です。こういったシステム構築や、企業カルチャーをつくる「みんなの会」などの取り組みに興味のある方も、採用ページやWantedlyからお気軽にご連絡ください。&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;//hatenablog-parts.com/embed?url=http%3A%2F%2Fwww.uzabase.com%2Fcareer%2F%23career-sec1&quot; title=&quot;CAREER | 株式会社ユーザベース | UZABASE, Inc.&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;a href=&quot;http://www.uzabase.com/career/#career-sec1&quot;&gt;CAREER | 株式会社ユーザベース | UZABASE, Inc.&lt;/a&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;http://www.uzabase.com/career/#career-sec1&quot;&gt;www.uzabase.com&lt;/a&gt;&lt;/cite&gt;
&lt;iframe src=&quot;//hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.wantedly.com%2Fprojects%2F11448&quot; title=&quot;100年に一度のメディア変革期！世界一のニュースプラットフォームを創ろう by 株式会社ユーザベース&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;a href=&quot;https://www.wantedly.com/projects/11448&quot;&gt;100年に一度のメディア変革期！世界一のニュースプラットフォームを創ろう by 株式会社ユーザベース&lt;/a&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://www.wantedly.com/projects/11448&quot;&gt;www.wantedly.com&lt;/a&gt;&lt;/cite&gt;
&lt;iframe src=&quot;//hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.wantedly.com%2Fprojects%2F11497&quot; title=&quot;巨大金融メディアに打ち勝つサービスをつくりたいエンジニアWanted! by 株式会社ユーザベース&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;a href=&quot;https://www.wantedly.com/projects/11497&quot;&gt;巨大金融メディアに打ち勝つサービスをつくりたいエンジニアWanted! by 株式会社ユーザベース&lt;/a&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://www.wantedly.com/projects/11497&quot;&gt;www.wantedly.com&lt;/a&gt;&lt;/cite&gt;
&lt;iframe src=&quot;//hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.wantedly.com%2Fprojects%2F19575&quot; title=&quot;情報社会にイノベーションを起こせ！エンジニアインターン募集 by 株式会社ユーザベース&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;a href=&quot;https://www.wantedly.com/projects/19575&quot;&gt;情報社会にイノベーションを起こせ！エンジニアインターン募集 by 株式会社ユーザベース&lt;/a&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://www.wantedly.com/projects/19575&quot;&gt;www.wantedly.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
</description>          <pubDate>Tue, 02 Jun 2015 18:33:35 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450087345655</guid>
          
          <enclosure url="http://cdn-ak.f.st-hatena.com/images/fotolife/u/uzabase/20150526/20150526122646.jpg" type="image/jpeg" length="0" />
        </item>
      
    
      
      
        <item>
          <title>ニコニコメソッドプレゼンを全社会議に取り入れてみたら会議が面白くなった</title>
          <link>http://tech.uzabase.com/entry/2015/06/01/143202</link>          <description>&lt;p&gt;技術チーム竹内(@&lt;a class=&quot;twitter-user-screen-name&quot; href=&quot;http://twitter.com/chimerast&quot;&gt;chimerast&lt;/a&gt;)です。&lt;/p&gt;

&lt;p&gt;作ったものが知らない間に&lt;a href=&quot;https://seleck.cc/article/11&quot;&gt;記事&lt;/a&gt;のネタにされていたので、どんな仕組みで動いているか技術的なところについて書いてみます。どう使われているかの細かい話は、後日ブログ内に別の記事が上がる予定です。&lt;/p&gt;

&lt;p&gt;&lt;i&gt;（6/2 追記：「みんなの会」の動画配信システムについて記事を投稿しました。&lt;/i&gt;）
&lt;iframe src=&quot;http://tech.uzabase.com/embed/2015/06/02/183335&quot; title=&quot;ユーザベースの自由な社風を支える「みんなの会」のつくり方（動画環境編） - UZABASE Tech Blog&quot; class=&quot;embed-card embed-blogcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;a href=&quot;http://tech.uzabase.com/entry/2015/06/02/183335&quot;&gt;ユーザベースの自由な社風を支える「みんなの会」のつくり方（動画環境編） - UZABASE Tech Blog&lt;/a&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;http://tech.uzabase.com/entry/2015/06/02/183335&quot;&gt;tech.uzabase.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;h3&gt;全社会議で「ニコニコメソッドプレゼン」&lt;/h3&gt;

&lt;p&gt;だいぶ昔にWeb業界界隈で話題になった(?)ニコニコメソッドプレゼンを、週一の全社会議で取り入れたところ、プレゼンのエンタメ性が増して以前よりだいぶ面白いものになりました。プレゼンを聞く側の一体感がでて面白くなったのに加え、プレゼンする側としても、今まで聞いてるんだか聞いていないんだかよくわからない状態だったのが、反応が目に見えるようになってやりやすくなりました。&lt;/p&gt;

&lt;p&gt;ニコニコメソッドプレゼンとは、視聴者がスマホ等でコメントを入力して、そのコメントがニコニコ動画のようにプレゼン資料の上に流れる、視聴者参加型のプレゼンです。&lt;/p&gt;

&lt;p&gt;やるとこんな感じになります(全社会議内でやっている社員の自己紹介タイム)↓&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/h0rErlGD0JM&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;


&lt;p&gt;ニコニコメソッドを取り入れることになったきっかけは、全社会議への参加者のコミットメントをどうやったら上げることが出来るかどうかみたいな事を話し合った際に、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;発言しようにも人数が多くなって発言しづらい雰囲気ができあがってしまっている&lt;/li&gt;
&lt;li&gt;海外拠点等のリモートからの参加時に、発言がしづらかったり、会議の盛り上がり具合が伝わりにくい&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;という声があがり、その解決策として、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ニコニコ動画みたいに横から匿名の突っ込みを入れるようにできたら発言の機会が増えるんじゃないか&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;という意見が出たことによるものです。&lt;/p&gt;

&lt;p&gt;ちょうど、視聴者参加型プレゼンツールを作ってみたいなと思っていたこともあり、一晩夜なべして作りました。&lt;/p&gt;

&lt;h3&gt;作ったもの: Chrome機能拡張「NicoNico SPEENYA」&lt;/h3&gt;

&lt;p&gt;(Chromeウェブストアでの公開はしてません)&lt;/p&gt;

&lt;p&gt;全社会議では、色んなチームが進捗報告することもあり、全員で一つのプレゼン資料を編集出来るGoogle Slidesを使用して発表を行っています。&lt;/p&gt;

&lt;p&gt;プレゼンのためのほかのツールを使ったり作ったりすることは、移行コストや作成コストの面で考えられなかったので、Google Slidesをそのまま使うことにして、Chrome機能拡張でその上にコメントを重ねるようなものを作りました。&lt;/p&gt;

&lt;p&gt;コメントをするだけでは面白くないので、いいねボタンをつけて、押すと親指の画像が浮き上がって消えるような機能や、それを応用して任意の画像を送り込むような機能もつけてます。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/c/chimerast/20150531/20150531234517.gif&quot; alt=&quot;f:id:chimerast:20150531234517g:plain&quot; title=&quot;f:id:chimerast:20150531234517g:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;プログラムはGitHub上でひっそり公開しています。一般向けに機能拡張およびサーバを公開することも考えたのですが、チャンネル機能を作るモチベーションがわかないのと、セキュリティの事を考えると使う人ごとにサーバ立ててもらった方が良い気がするので、そのままにしています。&lt;/p&gt;

&lt;p&gt;Forkして拡張していただいたり、面白い機能をつけてPull Requestを送っていただけるとうれしいです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/chimerast/niconico-speenya&quot;&gt;chimerast/niconico-speenya &amp;middot; GitHub&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;作るのに使ったもの&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://socket.io/&quot;&gt;Socket.IO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.chrome.com/extensions/getstarted&quot;&gt;Google Chrome機能拡張&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.w3.org/TR/web-animations/&quot;&gt;Web Animations API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://nodejs.org/&quot;&gt;Node.js&lt;/a&gt; + &lt;a href=&quot;http://expressjs.com/&quot;&gt;Express&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h4&gt;Socket.IO&lt;/h4&gt;

&lt;p&gt;ブラウザで双方向の何かをつくる場合は鉄板の選択ですね。&lt;/p&gt;

&lt;p&gt;Chrome機能拡張側でSocket.IOのサーバへの接続を行い、サーバ側からの通知を待って、コメントやイメージ表示の通知があったらそれを表示するという事をやっています。&lt;/p&gt;

&lt;h4&gt;Google Chrome機能拡張&lt;/h4&gt;

&lt;p&gt;Chromeには、表示される全てのページへJavaScriptを挿入するような機能拡張を作るための拡張ポイントが用意されているのでそれを使いました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.chrome.com/extensions/content_scripts&quot;&gt;Content Scripts - Google Chrome&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;これに加えて、ツールバーにボタンを置いて、コメント表示のON/OFFを切り替えられるようにしていたりします。&lt;/p&gt;

&lt;h4&gt;Web Animations API&lt;/h4&gt;

&lt;p&gt;あまり有名ではない機能だと思いますが、HTML5標準のアニメーションAPIです。jQuery.animate()と同じようなものだと思って良いと思います。&lt;/p&gt;

&lt;p&gt;ブラウザネイティブなので、動作が軽かったりリソース消費が少なかったりするみたいです。ただし、まだドラフトなのでサポートしていないブラウザも多いです。&lt;/p&gt;

&lt;p&gt;あまり依存ライブラリを増やしたくなかったのと、どんなもんなのか使ってみたかったのでアニメーションAPIとして採用しました。&lt;/p&gt;

&lt;h4&gt;Node.js + Express&lt;/h4&gt;

&lt;p&gt;こったことはせず、普通のAPIサーバとしての使い方をしています。Expressで待ち受けているURLにPOSTが送信されると、Socket.IOを呼び出して、Chrome機能拡張側に通知を行います。&lt;/p&gt;

&lt;h3&gt;まとめ&lt;/h3&gt;

&lt;p&gt;視聴者参加型のプレゼンは盛り上がります。また、プレゼンする側も面白いプレゼンを作ろうという気になります。&lt;/p&gt;

&lt;p&gt;プログラムの総行数はクライアントサーバ合わせて200行ぐらいです。ありものの機能を使うとさくさくっと作れます。&lt;/p&gt;

&lt;h3&gt;宣伝&lt;/h3&gt;

&lt;p&gt;ユーザベースでは、2015年6月14日(日)に、&lt;a href=&quot;http://e2d3.org/about-e2d3-2/?lang=ja&quot;&gt;E2D3プロジェクト&lt;/a&gt;と一緒にハッカソンを行います。&lt;/p&gt;

&lt;p&gt;スマホでのデータビジュアライズ方法が、世の中で試行錯誤されている中、みんなで考えてみようというハッカソンです。&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;//hatenablog-parts.com/embed?url=http%3A%2F%2Fe2d3.connpass.com%2Fevent%2F14868%2F&quot; title=&quot;NewsPicks &amp;amp; SPEEDA スマートデータエクスペリエンス ハッカソン (2015/06/14 10:00〜)&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;a href=&quot;http://e2d3.connpass.com/event/14868/&quot;&gt;NewsPicks &amp;amp; SPEEDA スマートデータエクスペリエンス ハッカソン (2015/06/14 10:00〜)&lt;/a&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;http://e2d3.connpass.com/event/14868/&quot;&gt;e2d3.connpass.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;ネタ的に面白いと思うので是非ご参加ください。&lt;/p&gt;

&lt;p&gt;E2D3プロジェクトについてはまた別で記事を書こうと思います。&lt;/p&gt;
</description>          <pubDate>Mon, 01 Jun 2015 14:32:02 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450095983310</guid>
          
          <enclosure url="http://cdn-ak.f.st-hatena.com/images/fotolife/c/chimerast/20150531/20150531234517.gif" type="image/gif" length="0" />
        </item>
      
    
      
      
        <item>
          <title>恵比寿のスタートアップエンジニアが集まる「えびスタ！」#2 を開催しました（ユーザベース、クックパッド、VASILY、エウレカ、はてな）</title>
          <link>http://tech.uzabase.com/entry/2015/05/15/170206</link>          <description>&lt;p&gt;&lt;a href=&quot;http://tech.uzabase.com/entry/2015/04/10/194732&quot;&gt;既報&lt;/a&gt;の通り、恵比寿近辺のスタートアップエンジニアが集まる勉強会「えびスタ！」#2 を開催しました。少し遅れましたが開催レポートをお届けします。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/u/uzabase/20150513/20150513145913.jpg&quot; alt=&quot;f:id:uzabase:20150513145913j:plain&quot; title=&quot;f:id:uzabase:20150513145913j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h1&gt;発表資料&lt;/h1&gt;

&lt;p&gt;第2回となる今回は、「大規模データの料理法」と題してユーザベース、クックパッド、VASILY、エウレカ、はてなのエンジニアが集まり、各社の事例をご紹介しました。発表内容と資料を以下にまとめます。&lt;/p&gt;

&lt;h2&gt;アドベリフィケーションサービス「BrandSafe はてな」の裏側（株式会社はてな 山家 雄介）&lt;/h2&gt;

&lt;blockquote&gt;&lt;p&gt;2014年8月に株式会社はてなの初のアドテクノロジープロダクトとしてリリースされた「BrandSafe はてな」について、システムを構成するアーキテクチャや、はてな特有のデータを活用して高精度にブランド毀損サイトを判定するための技術的アプローチ、DSP上で広告インプレッションがあった全URLをベースにした、膨大なアドベリフィケーションリクエストをさばくためのインフラ的な工夫などについてお話をする予定です。&lt;/p&gt;&lt;/blockquote&gt;

&lt;h3&gt;発表資料&lt;/h3&gt;

&lt;p&gt;&lt;iframe src=&quot;//hatenablog-parts.com/embed?url=https%3A%2F%2Fdocs.google.com%2Fpresentation%2Fd%2F1_m8XTOt4Rz--aVGN-qDtrmuaGLu9eWuBA-CRAJWBKt0%2Fedit%3Fusp%3Dsharing&quot; title=&quot;アドベリフィケーションサービス「BrandSafe はてな」の裏側&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;a href=&quot;https://docs.google.com/presentation/d/1_m8XTOt4Rz--aVGN-qDtrmuaGLu9eWuBA-CRAJWBKt0/edit?usp=sharing&quot;&gt;アドベリフィケーションサービス「BrandSafe はてな」の裏側&lt;/a&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://docs.google.com/presentation/d/1_m8XTOt4Rz--aVGN-qDtrmuaGLu9eWuBA-CRAJWBKt0/edit?usp=sharing&quot;&gt;docs.google.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;h2&gt;企業・業界データサービスSPEEDAの複雑怪奇なデータとの格闘（株式会社ユーザベース 北内啓）&lt;/h2&gt;

&lt;blockquote&gt;&lt;p&gt;急激に増加し続けるSPEEDAの企業データを扱う上での課題や取り組み、今後の展望などについて紹介します。&lt;/p&gt;&lt;/blockquote&gt;

&lt;h3&gt;発表資料&lt;/h3&gt;

&lt;p&gt;&lt;iframe src=&quot;https://www.slideshare.net/slideshow/embed_code/key/C8bvFGYNjwBTDy&quot; width=&quot;427&quot; height=&quot;356&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; style=&quot;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&quot; allowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&quot;margin-bottom:5px&quot;&gt; &lt;strong&gt; &lt;a href=&quot;https://www.slideshare.net/tau3000/speeda-47444622&quot; title=&quot;企業・業界データサービスSPEEDAの複雑怪奇なデータとの格闘&quot; target=&quot;_blank&quot;&gt;企業・業界データサービスSPEEDAの複雑怪奇なデータとの格闘&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&quot;http://www.slideshare.net/tau3000&quot; target=&quot;_blank&quot;&gt;Akira Kitauchi&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;http://www.slideshare.net/tau3000/speeda-47444622&quot;&gt;www.slideshare.net&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;h2&gt;iQONのアプリ内のデータ分析基盤の紹介や分析手法について紹介します（今村雅幸 株式会社VASILY）&lt;/h2&gt;

&lt;blockquote&gt;&lt;p&gt;iQONのアプリ内のデータ分析基盤の紹介や分析手法について紹介します&lt;/p&gt;&lt;/blockquote&gt;

&lt;h3&gt;発表資料&lt;/h3&gt;

&lt;p&gt;&lt;iframe allowfullscreen=&quot;true&quot; allowtransparency=&quot;true&quot; frameborder=&quot;0&quot; height=&quot;596&quot; id=&quot;talk_frame_296543&quot; mozallowfullscreen=&quot;true&quot; src=&quot;//speakerdeck.com/player/aa71354e8c1140278ba2ac59c4f359ae&quot; style=&quot;border:0; padding:0; margin:0; background:transparent;&quot; webkitallowfullscreen=&quot;true&quot; width=&quot;710&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://speakerdeck.com/kyuns/iqon-bigquery&quot;&gt;speakerdeck.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;h2&gt;ベンチャーならではRedShiftの低コスト運用（株式会社エウレカ 鉄本環）&lt;/h2&gt;

&lt;blockquote&gt;&lt;p&gt;pairsではRedShiftを用いてマーケティングデータや、アルゴリズム解析をしていますが、 これを低価格で運用しているTIPSをお話いたします。&lt;/p&gt;&lt;/blockquote&gt;

&lt;h3&gt;発表資料&lt;/h3&gt;

&lt;p&gt;&lt;iframe allowfullscreen=&quot;true&quot; allowtransparency=&quot;true&quot; frameborder=&quot;0&quot; height=&quot;463&quot; id=&quot;talk_frame_296950&quot; mozallowfullscreen=&quot;true&quot; src=&quot;//speakerdeck.com/player/864b12be51a445e28e5513e9d3dcf821&quot; style=&quot;border:0; padding:0; margin:0; background:transparent;&quot; webkitallowfullscreen=&quot;true&quot; width=&quot;710&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://speakerdeck.com/tamaki0506/bentiyanaradehafalseredshiftdi-kosutoyun-yong&quot;&gt;speakerdeck.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;h2&gt;リアルタイム分析サービス『たべみる』を支える高可用性アーキテクチャ（クックパッド株式会社 井上寛之）&lt;/h2&gt;

&lt;blockquote&gt;&lt;p&gt;「たべみる」は、クックパッドの検索データをウェブから分析できる法人向けのウェブサービスです。 そのアーキテクチャの特徴としてサービスのバックエンドDBとバッチの両方でRedshiftを使っていることが挙げられます。 今回は、Redshiftの可用性を高めるためのクックパッド独自のアーキテクチャについて紹介します。&lt;/p&gt;&lt;/blockquote&gt;

&lt;h3&gt;発表資料&lt;/h3&gt;

&lt;iframe src=&quot;//www.slideshare.net/slideshow/embed_code/key/3HMWdJOMwi9CkJ&quot; width=&quot;425&quot; height=&quot;355&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; style=&quot;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&quot; allowfullscreen&gt; &lt;/iframe&gt;


&lt;p&gt; &lt;div style=&quot;margin-bottom:5px&quot;&gt; &lt;strong&gt; &lt;a href=&quot;//www.slideshare.net/inohiro/ebi-sta&quot; title=&quot;リアルタイム分析サービス『たべみる』を支える高可用性アーキテクチャ&quot; target=&quot;_blank&quot;&gt;リアルタイム分析サービス『たべみる』を支える高可用性アーキテクチャ&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&quot;//www.slideshare.net/inohiro&quot; target=&quot;_blank&quot;&gt;Hiroyuki Inoue&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/p&gt;

&lt;h1&gt;懇親会はエビスビールとピザ＋LT！&lt;/h1&gt;

&lt;p&gt;懇親会ではピザと、恵比寿スタートアップということで&lt;b&gt;エビスビール&lt;/b&gt;をご用意しました。希望者によるLTもとても盛り上がりました。発表いただいた皆さまありがとうございました！&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/u/uzabase/20150513/20150513151035.jpg&quot; alt=&quot;f:id:uzabase:20150513151035j:plain&quot; title=&quot;f:id:uzabase:20150513151035j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;LT：GoWorker調査（大貫）&lt;/h2&gt;

&lt;blockquote&gt;&lt;p&gt;データ処理を支えるGoWorkerあたりの紹介など&lt;/p&gt;&lt;/blockquote&gt;

&lt;h3&gt;発表資料&lt;/h3&gt;

&lt;p&gt;（確認中）&lt;/p&gt;

&lt;h2&gt;LT：E2D3プロジェクトの紹介（株式会社ユーザベース CTO たけうちひでゆき）&lt;/h2&gt;

&lt;blockquote&gt;&lt;p&gt;Excelで様々なデータ可視化を行えるようになる予定の、E2D3というオープンソースで進めているプロジェクトを紹介します。&lt;/p&gt;&lt;/blockquote&gt;

&lt;h3&gt;発表資料&lt;/h3&gt;

&lt;p&gt;&lt;iframe src=&quot;https://www.slideshare.net/slideshow/embed_code/key/n3gL3DWPlosXlz&quot; width=&quot;427&quot; height=&quot;356&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; style=&quot;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&quot; allowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&quot;margin-bottom:5px&quot;&gt; &lt;strong&gt; &lt;a href=&quot;https://www.slideshare.net/chimerast/e2d3-47364632&quot; title=&quot;E2D3プロジェクトのご紹介@えびスタ！&quot; target=&quot;_blank&quot;&gt;E2D3プロジェクトのご紹介@えびスタ！&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&quot;http://www.slideshare.net/chimerast&quot; target=&quot;_blank&quot;&gt;Hideyuki Takeuchi&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;http://www.slideshare.net/chimerast/e2d3-47364632&quot;&gt;www.slideshare.net&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;h2&gt;LT：mecab-ipadic-NEologd の効果的な使い方（LINE株式会社 佐藤敏紀）&lt;/h2&gt;

&lt;blockquote&gt;&lt;p&gt;「mecab-ipadic-NEologd」は 形態素解析エンジン MeCab のシステム辞書である IPA 辞書を拡張するオープンソースな辞書です。大きな特徴は「大量の新語・固有表現を読み仮名付きで採録されていること」と「最低でも月二回(初旬と中旬)、辞書データが更新されること」です。またライセンスは Apache License 2.0 ですので、安心して製品開発や研究にご利用いただけます。今回は「mecab-ipadic-NEologd」を実務で使う際にどうするべきかをお伝えし、使用例のデモをご紹介いたします。&lt;/p&gt;&lt;/blockquote&gt;

&lt;h3&gt;発表資料&lt;/h3&gt;

&lt;p&gt;&lt;iframe src=&quot;https://www.slideshare.net/slideshow/embed_code/key/xfahOOsXcA159j&quot; width=&quot;427&quot; height=&quot;356&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; style=&quot;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&quot; allowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&quot;margin-bottom:5px&quot;&gt; &lt;strong&gt; &lt;a href=&quot;https://www.slideshare.net/overlast/effective-mecabipadicneologdebisuta-1&quot; title=&quot;mecab-ipadic-NEologd の効果的な使い方&quot; target=&quot;_blank&quot;&gt;mecab-ipadic-NEologd の効果的な使い方&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&quot;http://www.slideshare.net/overlast&quot; target=&quot;_blank&quot;&gt;Toshinori Sato&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;http://www.slideshare.net/overlast/effective-mecabipadicneologdebisuta-1&quot;&gt;www.slideshare.net&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;h1&gt;恵比寿スタートアップを盛り上げていきます！&lt;/h1&gt;

&lt;p&gt;スタートアップを追いかけている週アスPLUSによると、「スタートアップ集積地」として恵比寿が最近盛り上がってきているそうです。&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;//hatenablog-parts.com/embed?url=http%3A%2F%2Fweekly.ascii.jp%2Felem%2F000%2F000%2F334%2F334134%2F&quot; title=&quot;バイアウトが話題のエウレカほか注目企業多数！ 押さえておきたい恵比寿スタートアップ【2015年5月】&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;a href=&quot;http://weekly.ascii.jp/elem/000/000/334/334134/&quot;&gt;バイアウトが話題のエウレカほか注目企業多数！ 押さえておきたい恵比寿スタートアップ【2015年5月】&lt;/a&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;http://weekly.ascii.jp/elem/000/000/334/334134/&quot;&gt;weekly.ascii.jp&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;えびスタ！では、恵比寿のスタートアップやエンジニアコミュニティを盛り上げるために今後もイベントを開催してまいります。運営する株式会社ユーザベース・株式会社ニューズピックスにご興味のある方は、以下のWantedlyなどからお気軽にご連絡ください！&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;//hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.wantedly.com%2Fcompanies%2Fuzabase-inc&quot; title=&quot;株式会社ユーザベースの最新情報 - Wantedly&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;a href=&quot;https://www.wantedly.com/companies/uzabase-inc&quot;&gt;株式会社ユーザベースの最新情報 - Wantedly&lt;/a&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://www.wantedly.com/companies/uzabase-inc&quot;&gt;www.wantedly.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
</description>          <pubDate>Fri, 15 May 2015 17:02:06 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450094322238</guid>
          
          <enclosure url="http://cdn-ak.f.st-hatena.com/images/fotolife/u/uzabase/20150513/20150513151035.jpg" type="image/jpeg" length="0" />
        </item>
      
    
      
      
        <item>
          <title>「えびスタ！#2 ~大規模データの調理法~ ユーザベースxクックパッドxVASILYxエウレカxはてな」開催のお知らせ</title>
          <link>http://tech.uzabase.com/entry/2015/04/10/194732</link>          <description>&lt;p&gt;SPEEDA/NewsPicksを提供する株式会社ユーザベースでは、エンジニアの技術力向上と交流を目的として「えびスタ！（恵比寿スタートアップ勉強会）」を開催しています。2015年4月23日（木）に「えびスタ #2」を開催しますのでお知らせいたします。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/u/uzabase/20150410/20150410193802.png&quot; alt=&quot;f:id:uzabase:20150410193802p:plain&quot; title=&quot;f:id:uzabase:20150410193802p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;第2回となる今回は、クックパッド、VASILY、エウレカ、そして特別ゲストとして京都からはてなのエンジニアをお呼びして開催します。各社の事例をもとに、アドテクを支える技術やRedShiftの活用法などについてお話する予定です。&lt;/p&gt;

&lt;p&gt;また後半では軽食（エビスビールとピザ！）を交えたLTや交流会も開催予定です。恵比寿のスタートアップと語り合いたい、他社エンジニアと交流したいという方はぜひお気軽にご参加いただければと思います。（LT参加者も募集しています。LTしていただける方は応募時に「LTしたい！」とコメントください。）&lt;/p&gt;

&lt;p&gt;イベント詳細や申し込みについては以下の connpass ページをご覧ください。&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;//hatenablog-parts.com/embed?url=http%3A%2F%2Febista.connpass.com%2Fevent%2F13953%2F&quot; title=&quot;えびスタ！#2 ~大規模データの調理法~ ユーザベースxクックパッドxVASILYxエウレカxはてな (2015/04/23 19:00〜)&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;a href=&quot;http://ebista.connpass.com/event/13953/&quot;&gt;えびスタ！#2 ~大規模データの調理法~ ユーザベースxクックパッドxVASILYxエウレカxはてな (2015/04/23 19:00〜)&lt;/a&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;http://ebista.connpass.com/event/13953/&quot;&gt;ebista.connpass.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
</description>          <pubDate>Fri, 10 Apr 2015 19:47:32 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450091056412</guid>
          
          <enclosure url="http://cdn-ak.f.st-hatena.com/images/fotolife/u/uzabase/20150410/20150410193802.png" type="image/png" length="0" />
        </item>
      
    
      
      
        <item>
          <title>IntelliJ IDEA + JRebel セミナーを開催しました</title>
          <link>http://tech.uzabase.com/entry/2015/03/30/175726</link>          <description>&lt;p&gt;NewsPicks 開発チームの文字です。&lt;/p&gt;

&lt;p&gt;先週の金曜日、株式会社サムライズムの山本裕介さん（&lt;a href=&quot;https://twitter.com/yusuke&quot;&gt;@yusuke&lt;/a&gt;）に弊社オフィスまで来て頂き、IntelliJ IDEA + JRebel のセミナーを開催して頂きました。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/u/uzabase/20150329/20150329161416.jpg&quot; alt=&quot;f:id:uzabase:20150329161416j:plain&quot; title=&quot;f:id:uzabase:20150329161416j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;弊社は SPEEDA / NewsPicks ともにサーバーサイドの実装に Java を利用しています。私自身や一部メンバーは IntelliJ IDEA を使っているのですが、使い慣れた Eclipse を利用しているメンバーも多いため、今回 Eclipse から IntelliJ IDEA への移行を検討するためにセミナーを開いて頂きました（ちなみに iOS 開発を行っているメンバーは App Code を利用しています）。加えて、SPEEDA 開発チームで導入を検討している JRebel のデモも行って頂きました。&lt;/p&gt;

&lt;p&gt;私が Eclipse から IntelliJ IDEA に移行したのは半年ほど前ですが、既に Eclipse に戻れなくなりつつあります。要因は幾つかあるのですが、パッと思い付くところだと以下でしょうか。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;全体的に動作が軽い・速い&lt;/li&gt;
&lt;li&gt;デバッグ時の変数内容表示が使いやすい&lt;/li&gt;
&lt;li&gt;プラグインが無くてもデフォルトで様々な言語／フレームワークのサポートがある&lt;/li&gt;
&lt;li&gt;Postfix Completion が使いやすい&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;総じて何もセットアップしなくても「痒いところに手が届く」IDE になっているのが魅力だなと感じています。Eclipse 時代には何かとプラグインを自作していましたが、IntelliJ IDEA では大抵のものは標準でサポートされています。&lt;/p&gt;

&lt;p&gt;@yusuke さんのデモを見て私自身も様々な機能を知らなかったことに今更ながら気付きましたが（恥ずかしながら Chronon Debug や Live Edit・BTS 連携などは全く知りませんでした）、社内の開発メンバーも Postfix Completion を始めとした IntelliJ IDEA の様々な機能に驚きの声を上げており、本格的にチームでの導入を検討しようかという声もありました。&lt;/p&gt;

&lt;p&gt;非常に勉強になるセッションでした。@yusuke さん、本当にありがとうございました！&lt;/p&gt;
</description>          <pubDate>Mon, 30 Mar 2015 17:57:26 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450089701904</guid>
          
          <enclosure url="http://cdn-ak.f.st-hatena.com/images/fotolife/u/uzabase/20150329/20150329161416.jpg" type="image/jpeg" length="0" />
        </item>
      
    
      
      
        <item>
          <title>Preserving Code Quality and Save Everyone’s Time with SonarQube</title>
          <link>http://tech.uzabase.com/entry/2015/03/20/174914</link>          <description>&lt;p&gt;Hello. I&#39;m Jason from SPEEDA&#39;s development team&lt;/p&gt;

&lt;p&gt;A developer&#39;s work (and even life) revolves around writing and testing codes. As a developer, I, like many others, take pride in my codes which are clean, elegant, and bug-free. And so we do our best to achieve this.&lt;/p&gt;

&lt;p&gt;I must admit, though, that even as a seasoned developer, I do have some shortcomings. SonarQube classifies these shortcomings as the &quot;Seven Deadly Sins&quot; which are considered as capital sins committed by developers everyday.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Bugs and potential bugs&lt;/li&gt;
&lt;li&gt;Coding standards breach&lt;/li&gt;
&lt;li&gt;Duplicates&lt;/li&gt;
&lt;li&gt;Lack of unit tests&lt;/li&gt;
&lt;li&gt;Bad distribution of complexity&lt;/li&gt;
&lt;li&gt;Spaghetti design&lt;/li&gt;
&lt;li&gt;Not enough / too many comments&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;For more description you can visit the SonarQube: &lt;a href=&quot;http://docs.sonarqube.org/display/SONAR/Developers%27+Seven+Deadly+Sins&quot;&gt;Developers&amp;#39; Seven Deadly Sins - SonarQube - Confluence&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One way to avoid these pitfalls is through peer review. We should not be afraid to ask others to review our codes so we can be aware of our weaknesses. Similarly, we should also take the time to review other&#39;s work. This helps ensure that we deliver quality but this does not guarantee 100% error-proof codes (after all, reviewers are also humans who commit errors). They may improve 90% of the code but will still miss the remaining 10%.&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/u/uzabase/20150320/20150320013622.png&quot; alt=&quot;f:id:uzabase:20150320013622p:plain&quot; title=&quot;f:id:uzabase:20150320013622p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Some people claim that the practice of peer review is a waste of precious human resource. They argue that more experienced developer can contribute more to a project through other means other than reviewing their colleagues&#39; codes. While they may have a point, in my experience, review improves everybody&#39;s coding skills because of the reviewers give correct solutions and tips. Meanwhile, the reviewee (or the developer receiving the feedback) learns from the more-experienced colleague. This exercise becomes an avenue for knowledge sharing in the company.&lt;/p&gt;

&lt;p&gt;From the project management perspective, one would like to measure or quantify the developers&#39; improvements in the peer review practice. But since we don&#39;t really count how many feedbacks a developer has for his code, we can&#39;t really give a number to the project managers.&lt;/p&gt;

&lt;p&gt;But I believe that these problems can be managed through a platform to manage code quality called &lt;b&gt;SonarQube&lt;/b&gt;.&lt;/p&gt;

&lt;h3&gt;What is SonarQube?&lt;/h3&gt;

&lt;p&gt;&lt;i&gt;&quot;SonarQube is the central place to manage code quality, offering visual reporting on and across projects and enabling to replay the past to follow metrics evolution.&quot;&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;It is open source, extensible with custom plugins (and we can even create one ourselves), we can integrate this with other systems (such as Jenkins), and supports 20+ programming language (In our case we will just use Java).&lt;/p&gt;

&lt;p&gt;I&#39;ve actually implemented this with our current codebase and there were, indeed, some simple misses in the codes (it might have been overlooked by the reviewers). But due to confidentiality, I chose to hide the numbers and the source codes here in this entry.&lt;/p&gt;

&lt;p&gt;This is a screenshot of the dashboard of SonarQube&#39;s demo: &lt;a href=&quot;http://nemo.sonarqube.org&quot;&gt;SonarQube&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/u/uzabase/20150320/20150320013733.png&quot; alt=&quot;f:id:uzabase:20150320013733p:plain&quot; title=&quot;f:id:uzabase:20150320013733p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;We can see the technical debt (what the developers have to &quot;pay&quot; to fix the issues) is set to 82,176 days. Assuming that 1 person will work in 8 hours a day, it will take that developer to fix everything in 82,176 days. (And also assuming that it won&#39;t increase anymore). There are 14,937,000 lines of codes there, and 2,714,682 issues. Issues are categorized as Blocker, Critical, Major, Minor, Info. Depending on your company, you will need to determine how they should be dealt with.&lt;/p&gt;

&lt;p&gt;In the code below, you can see SonarQube gives suggestions as to the best approach for this case. Of course, SonarQube will not always be correct since we may be following the company&#39;s coding standard. We can actually adjust the rules of SonarQube to fit our company&#39;s coding standard.&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/u/uzabase/20150320/20150320013957.png&quot; alt=&quot;f:id:uzabase:20150320013957p:plain&quot; title=&quot;f:id:uzabase:20150320013957p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;This is another example of a code that doesn&#39;t follow JavaBean&#39;s Naming convention and the complexity of this code is quite high based from SonarQube&#39;s  calculation.&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/u/uzabase/20150320/20150320014035.png&quot; alt=&quot;f:id:uzabase:20150320014035p:plain&quot; title=&quot;f:id:uzabase:20150320014035p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;You can also assign the technical debt tasks to your teammates (You can integrate this to your JIRA or Redmine so it creates tickets which the Project Leader could also manage)&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/u/uzabase/20150320/20150320014054.png&quot; alt=&quot;f:id:uzabase:20150320014054p:plain&quot; title=&quot;f:id:uzabase:20150320014054p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Here we can customized the rules SonarQube is following&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/u/uzabase/20150320/20150320014111.png&quot; alt=&quot;f:id:uzabase:20150320014111p:plain&quot; title=&quot;f:id:uzabase:20150320014111p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;We can also see which codes got duplicated (or copy paste instead of refactoring and reusing the same code)&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/u/uzabase/20150320/20150320014135.png&quot; alt=&quot;f:id:uzabase:20150320014135p:plain&quot; title=&quot;f:id:uzabase:20150320014135p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;And here is from another file with the same codes&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;http://cdn-ak.f.st-hatena.com/images/fotolife/u/uzabase/20150320/20150320014147.png&quot; alt=&quot;f:id:uzabase:20150320014147p:plain&quot; title=&quot;f:id:uzabase:20150320014147p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;There are still tons of functionalities which SonarQube has but I haven&#39;t explored yet.&lt;/p&gt;

&lt;p&gt;Regarding installation, setup is a breeze so I highly recommend you try it on your codebase.&lt;/p&gt;

&lt;h4&gt;To sum up,&lt;/h4&gt;

&lt;p&gt;SonarQube is not just for developers, but for everyone involved in the project:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For developers, it helps them check if their code is correct and follows the correct coding standard.&lt;/li&gt;
&lt;li&gt;For QA, it helps them check the test coverage of unit test (they make sure that every code is tested on unit level)&lt;/li&gt;
&lt;li&gt;For Architects, it helps them check if the architecture of the system is correct, and that no codes are having a spaghetti code design.&lt;/li&gt;
&lt;li&gt;For Managers, it helps them see if developers are actually improving (they can monitor if technical debt actually decreases) and can
use this for future decisions (i.e. they can delay the release of a functionality because it&#39;s technical debt is too high).&lt;/li&gt;
&lt;/ul&gt;


&lt;h4&gt;&quot;Quality is everyone&#39;s responsibility&quot; - Deming, W. Edwards&lt;/h4&gt;

&lt;hr /&gt;

&lt;p&gt;If you are the type of developer who takes pride in your skills and values code quality, or if you are interested in learning new and interesting technologies, then we want you!&lt;/p&gt;

&lt;p&gt;You can try checking this link &lt;a href=&quot;https://www.wantedly.com/companies/uzabase-inc&quot;&gt;&amp;#x682A;&amp;#x5F0F;&amp;#x4F1A;&amp;#x793E;&amp;#x30E6;&amp;#x30FC;&amp;#x30B6;&amp;#x30D9;&amp;#x30FC;&amp;#x30B9;&amp;#x306E;&amp;#x6700;&amp;#x65B0;&amp;#x60C5;&amp;#x5831; - Wantedly&lt;/a&gt; and give us a contact!&lt;/p&gt;
</description>          <pubDate>Fri, 20 Mar 2015 17:49:14 +0900</pubDate>
          <guid isPermalink="false">hatenablog://entry/8454420450088648834</guid>
          
          <enclosure url="http://cdn-ak.f.st-hatena.com/images/fotolife/u/uzabase/20150320/20150320013622.png" type="image/png" length="0" />
        </item>
      
    
  </channel>
</rss>
